group Bridge:
  group UI:
    group LT:
      uncontrollable u_activate;
      uncontrollable u_deactivate;
      uncontrollable u_stop;
    end
    group Barrier1:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group Barrier27:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group Barrier36:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group Barrier48:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group Barrier5:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group Deck:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
  end
  group EmergencyStop:
    uncontrollable u_activate;
    uncontrollable u_reset;
  end
  group LTAS:
    group FarActuator:
      controllable c_on;
      controllable c_off;
    end
    group NearActuator:
      controllable c_on;
      controllable c_off;
    end
    group ApproachSign1:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group ApproachSign2:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group ApproachSign3:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group ApproachSign4:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group ApproachSign5:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group On15Timer:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
    end
    group On20Timer:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
    end
    group NearOff60Timer:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
    end
  end
  group LTSS:
    group MainLaneActuator:
      controllable c_on;
      controllable c_off;
    end
    group SwitchLaneActuator:
      controllable c_on;
      controllable c_off;
    end
    group StopSign1:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group StopSign2:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group StopSign3:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group StopSign4:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group StopSign5:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group StopSign6:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group StopSign7:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group StopSign8:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group StopSign9:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group StopSign10:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group StopSign11:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group StopSign12:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group On15Timer:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
    end
    group Off60Timer:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
    end
  end
  group Barriers:
    group B1:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_emrgStop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group B2:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_emrgStop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group B3:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_emrgStop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group B4:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_emrgStop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group B5:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_emrgStop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group B6:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_emrgStop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group B7:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_emrgStop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group B8:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_emrgStop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group LightSignals:
      controllable c_on;
      controllable c_off;
    end
    group SoundSignals:
      controllable c_on;
      controllable c_off;
    end
    group B3B6Closed1Timer:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
    end
    group B2B7Open1Timer:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
    end
    group SoundOn6Timer:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
    end
  end
  group Deck:
    group Actuator:
      controllable c_open;
      controllable c_close;
      controllable c_emrgStop;
      controllable c_endStopClosing;
      controllable c_endStopOpening;
    end
    group Sensor:
      uncontrollable u_open_on;
      uncontrollable u_open_off;
      uncontrollable u_closed_on;
      uncontrollable u_closed_off;
    end
  end
  group CloseRequest:
    uncontrollable u_on;
    uncontrollable u_off;
  end
end
group sup:
  group Requirement1:
    requirement invariant .Bridge.LTSS.MainLaneActuator.c_on needs Bridge.LTAS.On;
    requirement invariant .Bridge.LTSS.MainLaneActuator.c_on needs Bridge.LTAS.On15Timer.Finished;
    requirement invariant .Bridge.LTSS.SwitchLaneActuator.c_on needs Bridge.LTAS.On;
    requirement invariant .Bridge.LTSS.SwitchLaneActuator.c_on needs Bridge.LTAS.On15Timer.Finished;
    requirement invariant .Bridge.Barriers.LightSignals.c_on needs Bridge.LTAS.On;
    requirement invariant .Bridge.Barriers.LightSignals.c_on needs Bridge.LTAS.On15Timer.Finished;
  end
  group Requirement2:
    requirement invariant .Bridge.Barriers.SoundSignals.c_on needs Bridge.LTAS.On;
    requirement invariant .Bridge.Barriers.SoundSignals.c_on needs Bridge.LTAS.On20Timer.Finished;
    requirement invariant .Bridge.Barriers.SoundSignals.c_on needs not Bridge.Barriers.SlowClosed;
    requirement invariant .Bridge.Barriers.SoundSignals.c_off needs Bridge.Barriers.SlowClosed;
  end
  group Requirement3:
    requirement invariant .Bridge.Barriers.B3.Actuator.c_close needs Bridge.LTSS.On;
    requirement invariant .Bridge.Barriers.B3.Actuator.c_close needs Bridge.LTSS.On15Timer.Finished;
    requirement invariant .Bridge.Barriers.B6.Actuator.c_close needs Bridge.LTSS.On;
    requirement invariant .Bridge.Barriers.B6.Actuator.c_close needs Bridge.LTSS.On15Timer.Finished;
  end
  group Requirement4:
    requirement invariant .Bridge.Barriers.B2.Actuator.c_close needs Bridge.Barriers.B3.Closed;
    requirement invariant .Bridge.Barriers.B2.Actuator.c_close needs Bridge.Barriers.B6.Closed;
    requirement invariant .Bridge.Barriers.B2.Actuator.c_close needs Bridge.Barriers.B3B6Closed1Timer.Finished;
    requirement invariant .Bridge.Barriers.B7.Actuator.c_close needs Bridge.Barriers.B3.Closed;
    requirement invariant .Bridge.Barriers.B7.Actuator.c_close needs Bridge.Barriers.B6.Closed;
    requirement invariant .Bridge.Barriers.B7.Actuator.c_close needs Bridge.Barriers.B3B6Closed1Timer.Finished;
  end
  group Requirement5:
    requirement invariant .Bridge.Barriers.B1.Actuator.c_close needs Bridge.Barriers.B2.Closed;
    requirement invariant .Bridge.Barriers.B1.Actuator.c_close needs Bridge.Barriers.B7.Closed;
    requirement invariant .Bridge.Barriers.B4.Actuator.c_close needs Bridge.Barriers.B2.Closed;
    requirement invariant .Bridge.Barriers.B4.Actuator.c_close needs Bridge.Barriers.B7.Closed;
    requirement invariant .Bridge.Barriers.B5.Actuator.c_close needs Bridge.Barriers.B2.Closed;
    requirement invariant .Bridge.Barriers.B5.Actuator.c_close needs Bridge.Barriers.B7.Closed;
    requirement invariant .Bridge.Barriers.B8.Actuator.c_close needs Bridge.Barriers.B2.Closed;
    requirement invariant .Bridge.Barriers.B8.Actuator.c_close needs Bridge.Barriers.B7.Closed;
  end
  group Requirement6:
    requirement invariant .Bridge.Barriers.B4.Actuator.c_close needs Bridge.Barriers.SoundSignals.On;
    requirement invariant .Bridge.Barriers.B4.Actuator.c_close needs Bridge.Barriers.SoundOn6Timer.Finished;
    requirement invariant .Bridge.Barriers.B8.Actuator.c_close needs Bridge.Barriers.SoundSignals.On;
    requirement invariant .Bridge.Barriers.B8.Actuator.c_close needs Bridge.Barriers.SoundOn6Timer.Finished;
  end
  group Requirement7:
    requirement invariant .Bridge.Deck.Actuator.c_open needs Bridge.Barriers.Closed;
  end
  group Requirement8:
    requirement invariant .Bridge.Barriers.B1.Actuator.c_open needs Bridge.Deck.Closed;
    requirement invariant .Bridge.Barriers.B2.Actuator.c_open needs Bridge.Deck.Closed;
    requirement invariant .Bridge.Barriers.B3.Actuator.c_open needs Bridge.Deck.Closed;
    requirement invariant .Bridge.Barriers.B4.Actuator.c_open needs Bridge.Deck.Closed;
    requirement invariant .Bridge.Barriers.B5.Actuator.c_open needs Bridge.Deck.Closed;
    requirement invariant .Bridge.Barriers.B6.Actuator.c_open needs Bridge.Deck.Closed;
    requirement invariant .Bridge.Barriers.B7.Actuator.c_open needs Bridge.Deck.Closed;
    requirement invariant .Bridge.Barriers.B8.Actuator.c_open needs Bridge.Deck.Closed;
  end
  group Requirement9:
    requirement invariant .Bridge.Barriers.B3.Actuator.c_open needs Bridge.Barriers.B2.Open;
    requirement invariant .Bridge.Barriers.B3.Actuator.c_open needs Bridge.Barriers.B7.Open;
    requirement invariant .Bridge.Barriers.B3.Actuator.c_open needs Bridge.Barriers.B2B7Open1Timer.Finished;
    requirement invariant .Bridge.Barriers.B6.Actuator.c_open needs Bridge.Barriers.B2.Open;
    requirement invariant .Bridge.Barriers.B6.Actuator.c_open needs Bridge.Barriers.B7.Open;
    requirement invariant .Bridge.Barriers.B6.Actuator.c_open needs Bridge.Barriers.B2B7Open1Timer.Finished;
  end
  group Requirement10:
    requirement invariant .Bridge.LTSS.MainLaneActuator.c_off needs Bridge.Barriers.Open;
    requirement invariant .Bridge.LTSS.SwitchLaneActuator.c_off needs Bridge.Barriers.Open;
    requirement invariant .Bridge.Barriers.LightSignals.c_off needs Bridge.Barriers.Open;
  end
  group Requirement11:
    requirement invariant .Bridge.LTAS.NearActuator.c_off needs Bridge.LTSS.Off;
    requirement invariant .Bridge.LTAS.NearActuator.c_off needs Bridge.LTSS.Off60Timer.Finished;
  end
  group Requirement12:
    requirement invariant .Bridge.LTAS.FarActuator.c_off needs Bridge.LTAS.NearOff;
    requirement invariant .Bridge.LTAS.FarActuator.c_off needs Bridge.LTAS.NearOff60Timer.Finished;
  end
  group Requirement13:
    requirement invariant .Bridge.Barriers.B1.Actuator.c_close needs Bridge.CloseRequest.Off;
    requirement invariant .Bridge.Barriers.B2.Actuator.c_close needs Bridge.CloseRequest.Off;
    requirement invariant .Bridge.Barriers.B3.Actuator.c_close needs Bridge.CloseRequest.Off;
    requirement invariant .Bridge.Barriers.B4.Actuator.c_close needs Bridge.CloseRequest.Off;
    requirement invariant .Bridge.Barriers.B5.Actuator.c_close needs Bridge.CloseRequest.Off;
    requirement invariant .Bridge.Barriers.B6.Actuator.c_close needs Bridge.CloseRequest.Off;
    requirement invariant .Bridge.Barriers.B7.Actuator.c_close needs Bridge.CloseRequest.Off;
    requirement invariant .Bridge.Barriers.B8.Actuator.c_close needs Bridge.CloseRequest.Off;
    requirement invariant .Bridge.Deck.Actuator.c_open needs Bridge.CloseRequest.Off;
  end
  group Requirement14and16:
    group Barriers:
      group Barrier1:
        requirement invariant .Bridge.Barriers.B1.Actuator.c_emrgStop needs Bridge.UI.Barrier1.Stop or Bridge.EmergencyStop.Activated;
        requirement invariant .Bridge.Barriers.B1.Actuator.c_open needs Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B1.Actuator.c_close needs Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B1.Actuator.c_open needs Bridge.UI.Barrier1.Open;
        requirement invariant .Bridge.Barriers.B1.Actuator.c_close needs Bridge.UI.Barrier1.Close;
      end
      group Barrier2:
        requirement invariant .Bridge.Barriers.B2.Actuator.c_emrgStop needs Bridge.UI.Barrier27.Stop or Bridge.EmergencyStop.Activated;
        requirement invariant .Bridge.Barriers.B2.Actuator.c_open needs Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B2.Actuator.c_close needs Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B2.Actuator.c_open needs Bridge.UI.Barrier27.Open;
        requirement invariant .Bridge.Barriers.B2.Actuator.c_close needs Bridge.UI.Barrier27.Close;
      end
      group Barrier3:
        requirement invariant .Bridge.Barriers.B3.Actuator.c_emrgStop needs Bridge.UI.Barrier36.Stop or Bridge.EmergencyStop.Activated;
        requirement invariant .Bridge.Barriers.B3.Actuator.c_open needs Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B3.Actuator.c_close needs Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B3.Actuator.c_open needs Bridge.UI.Barrier36.Open;
        requirement invariant .Bridge.Barriers.B3.Actuator.c_close needs Bridge.UI.Barrier36.Close;
      end
      group Barrier4:
        requirement invariant .Bridge.Barriers.B4.Actuator.c_emrgStop needs Bridge.UI.Barrier48.Stop or Bridge.EmergencyStop.Activated;
        requirement invariant .Bridge.Barriers.B4.Actuator.c_open needs Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B4.Actuator.c_close needs Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B4.Actuator.c_open needs Bridge.UI.Barrier48.Open;
        requirement invariant .Bridge.Barriers.B4.Actuator.c_close needs Bridge.UI.Barrier48.Close;
      end
      group Barrier5:
        requirement invariant .Bridge.Barriers.B5.Actuator.c_emrgStop needs Bridge.UI.Barrier5.Stop or Bridge.EmergencyStop.Activated;
        requirement invariant .Bridge.Barriers.B5.Actuator.c_open needs Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B5.Actuator.c_close needs Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B5.Actuator.c_open needs Bridge.UI.Barrier5.Open;
        requirement invariant .Bridge.Barriers.B5.Actuator.c_close needs Bridge.UI.Barrier5.Close;
      end
      group Barrier6:
        requirement invariant .Bridge.Barriers.B6.Actuator.c_emrgStop needs Bridge.UI.Barrier36.Stop or Bridge.EmergencyStop.Activated;
        requirement invariant .Bridge.Barriers.B6.Actuator.c_open needs Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B6.Actuator.c_close needs Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B6.Actuator.c_open needs Bridge.UI.Barrier36.Open;
        requirement invariant .Bridge.Barriers.B6.Actuator.c_close needs Bridge.UI.Barrier36.Close;
      end
      group Barrier7:
        requirement invariant .Bridge.Barriers.B7.Actuator.c_emrgStop needs Bridge.UI.Barrier27.Stop or Bridge.EmergencyStop.Activated;
        requirement invariant .Bridge.Barriers.B7.Actuator.c_open needs Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B7.Actuator.c_close needs Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B7.Actuator.c_open needs Bridge.UI.Barrier27.Open;
        requirement invariant .Bridge.Barriers.B7.Actuator.c_close needs Bridge.UI.Barrier27.Close;
      end
      group Barrier8:
        requirement invariant .Bridge.Barriers.B8.Actuator.c_emrgStop needs Bridge.UI.Barrier48.Stop or Bridge.EmergencyStop.Activated;
        requirement invariant .Bridge.Barriers.B8.Actuator.c_open needs Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B8.Actuator.c_close needs Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B8.Actuator.c_open needs Bridge.UI.Barrier48.Open;
        requirement invariant .Bridge.Barriers.B8.Actuator.c_close needs Bridge.UI.Barrier48.Close;
      end
    end
    group BridgeDeck:
      requirement invariant .Bridge.Deck.Actuator.c_emrgStop needs Bridge.UI.Deck.Stop or Bridge.EmergencyStop.Activated;
      requirement invariant .Bridge.Deck.Actuator.c_open needs Bridge.EmergencyStop.Deactivated;
      requirement invariant .Bridge.Deck.Actuator.c_close needs Bridge.EmergencyStop.Deactivated;
      requirement invariant .Bridge.Deck.Actuator.c_open needs Bridge.UI.Deck.Open;
      requirement invariant .Bridge.Deck.Actuator.c_close needs Bridge.UI.Deck.Close;
    end
    requirement invariant .Bridge.LTAS.NearActuator.c_on needs Bridge.UI.LT.Activated;
    requirement invariant .Bridge.LTAS.FarActuator.c_on needs Bridge.UI.LT.Activated;
    requirement invariant .Bridge.LTSS.MainLaneActuator.c_on needs Bridge.UI.LT.Activated;
    requirement invariant .Bridge.LTSS.SwitchLaneActuator.c_on needs Bridge.UI.LT.Activated;
    requirement invariant .Bridge.Barriers.LightSignals.c_on needs Bridge.UI.LT.Activated;
    requirement invariant .Bridge.Barriers.SoundSignals.c_on needs Bridge.UI.LT.Activated;
    requirement invariant .Bridge.LTAS.NearActuator.c_off needs Bridge.UI.LT.Deactivated;
    requirement invariant .Bridge.LTAS.FarActuator.c_off needs Bridge.UI.LT.Deactivated;
    requirement invariant .Bridge.LTSS.MainLaneActuator.c_off needs Bridge.UI.LT.Deactivated;
    requirement invariant .Bridge.LTSS.SwitchLaneActuator.c_off needs Bridge.UI.LT.Deactivated;
    requirement invariant .Bridge.Barriers.LightSignals.c_off needs Bridge.UI.LT.Deactivated;
  end
  group requirement15:
  end
  group Bridge:
    group UI:
      plant automaton LT:
        location Deactivated:
          initial;
          marked;
          edge .Bridge.UI.LT.u_activate goto Activated;
          edge .Bridge.UI.LT.u_stop goto Stopped;
        location Activated:
          edge .Bridge.UI.LT.u_deactivate goto Deactivated;
          edge .Bridge.UI.LT.u_stop goto Stopped;
        location Stopped:
          edge .Bridge.UI.LT.u_activate goto Activated;
          edge .Bridge.UI.LT.u_deactivate goto Deactivated;
      end
      plant automaton Barrier1:
        alg bool InitialOpen = true;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Bridge.UI.Barrier1.u_close goto Close;
          edge .Bridge.UI.Barrier1.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Bridge.UI.Barrier1.u_open goto Open;
          edge .Bridge.UI.Barrier1.u_stop goto Stop;
        location Stop:
          edge .Bridge.UI.Barrier1.u_close goto Close;
          edge .Bridge.UI.Barrier1.u_open goto Open;
      end
      plant automaton Barrier27:
        alg bool InitialOpen = true;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Bridge.UI.Barrier27.u_close goto Close;
          edge .Bridge.UI.Barrier27.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Bridge.UI.Barrier27.u_open goto Open;
          edge .Bridge.UI.Barrier27.u_stop goto Stop;
        location Stop:
          edge .Bridge.UI.Barrier27.u_close goto Close;
          edge .Bridge.UI.Barrier27.u_open goto Open;
      end
      plant automaton Barrier36:
        alg bool InitialOpen = true;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Bridge.UI.Barrier36.u_close goto Close;
          edge .Bridge.UI.Barrier36.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Bridge.UI.Barrier36.u_open goto Open;
          edge .Bridge.UI.Barrier36.u_stop goto Stop;
        location Stop:
          edge .Bridge.UI.Barrier36.u_close goto Close;
          edge .Bridge.UI.Barrier36.u_open goto Open;
      end
      plant automaton Barrier48:
        alg bool InitialOpen = true;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Bridge.UI.Barrier48.u_close goto Close;
          edge .Bridge.UI.Barrier48.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Bridge.UI.Barrier48.u_open goto Open;
          edge .Bridge.UI.Barrier48.u_stop goto Stop;
        location Stop:
          edge .Bridge.UI.Barrier48.u_close goto Close;
          edge .Bridge.UI.Barrier48.u_open goto Open;
      end
      plant automaton Barrier5:
        alg bool InitialOpen = true;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Bridge.UI.Barrier5.u_close goto Close;
          edge .Bridge.UI.Barrier5.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Bridge.UI.Barrier5.u_open goto Open;
          edge .Bridge.UI.Barrier5.u_stop goto Stop;
        location Stop:
          edge .Bridge.UI.Barrier5.u_close goto Close;
          edge .Bridge.UI.Barrier5.u_open goto Open;
      end
      plant automaton Deck:
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Bridge.UI.Deck.u_close goto Close;
          edge .Bridge.UI.Deck.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Bridge.UI.Deck.u_open goto Open;
          edge .Bridge.UI.Deck.u_stop goto Stop;
        location Stop:
          edge .Bridge.UI.Deck.u_close goto Close;
          edge .Bridge.UI.Deck.u_open goto Open;
      end
    end
    plant automaton EmergencyStop:
      location Deactivated:
        initial;
        marked;
        edge .Bridge.EmergencyStop.u_activate goto Activated;
      location Activated:
        edge .Bridge.EmergencyStop.u_reset goto Deactivated;
    end
    group LTAS:
      alg bool FarOn = ApproachSign1.On and ApproachSign2.On and FarActuator.On;
      alg bool NearOn = ApproachSign3.On and ApproachSign4.On and ApproachSign5.On and NearActuator.On;
      alg bool On = FarOn and NearOn;
      alg bool NearOff = ApproachSign3.Off and ApproachSign4.Off and ApproachSign5.Off and NearActuator.Off;
      alg bool On15TimeOk = On15Timer.Finished and On;
      alg bool On20TimeOk = On20Timer.Finished and On;
      alg bool OffNear60TimeOk = NearOff60Timer.Finished and NearOff;
      plant automaton FarActuator:
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          marked not InitialLocationOn;
          edge .Bridge.LTAS.FarActuator.c_on goto On;
        location On:
          initial InitialLocationOn;
          marked InitialLocationOn;
          edge .Bridge.LTAS.FarActuator.c_off goto Off;
      end
      plant automaton NearActuator:
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          marked not InitialLocationOn;
          edge .Bridge.LTAS.NearActuator.c_on goto On;
        location On:
          initial InitialLocationOn;
          marked InitialLocationOn;
          edge .Bridge.LTAS.NearActuator.c_off goto Off;
      end
      group ApproachSign1:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTAS.ApproachSign1.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTAS.ApproachSign1.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = FarActuator.On;
          alg bool Off = FarActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTAS.ApproachSign1.Sensor.u_on when On;
            edge .Bridge.LTAS.ApproachSign1.Sensor.u_off when Off;
        end
      end
      group ApproachSign2:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTAS.ApproachSign2.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTAS.ApproachSign2.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = FarActuator.On;
          alg bool Off = FarActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTAS.ApproachSign2.Sensor.u_on when On;
            edge .Bridge.LTAS.ApproachSign2.Sensor.u_off when Off;
        end
      end
      group ApproachSign3:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTAS.ApproachSign3.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTAS.ApproachSign3.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = NearActuator.On;
          alg bool Off = NearActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTAS.ApproachSign3.Sensor.u_on when On;
            edge .Bridge.LTAS.ApproachSign3.Sensor.u_off when Off;
        end
      end
      group ApproachSign4:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTAS.ApproachSign4.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTAS.ApproachSign4.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = NearActuator.On;
          alg bool Off = NearActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTAS.ApproachSign4.Sensor.u_on when On;
            edge .Bridge.LTAS.ApproachSign4.Sensor.u_off when Off;
        end
      end
      group ApproachSign5:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTAS.ApproachSign5.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTAS.ApproachSign5.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = NearActuator.On;
          alg bool Off = NearActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTAS.ApproachSign5.Sensor.u_on when On;
            edge .Bridge.LTAS.ApproachSign5.Sensor.u_off when Off;
        end
      end
      plant automaton On15Timer:
        alg bool EnablementGuard = On;
        alg bool DisablementGuard = not On;
        location Off:
          initial;
          marked;
          edge .Bridge.LTAS.On15Timer.c_on when EnablementGuard goto Running;
        location Running:
          edge .Bridge.LTAS.On15Timer.c_reset when DisablementGuard goto Off;
          edge .Bridge.LTAS.On15Timer.u_timeout goto Finished;
        location Finished:
          marked;
          edge .Bridge.LTAS.On15Timer.c_reset when DisablementGuard goto Off;
      end
      plant automaton On20Timer:
        alg bool EnablementGuard = On;
        alg bool DisablementGuard = not On;
        location Off:
          initial;
          marked;
          edge .Bridge.LTAS.On20Timer.c_on when EnablementGuard goto Running;
        location Running:
          edge .Bridge.LTAS.On20Timer.c_reset when DisablementGuard goto Off;
          edge .Bridge.LTAS.On20Timer.u_timeout goto Finished;
        location Finished:
          marked;
          edge .Bridge.LTAS.On20Timer.c_reset when DisablementGuard goto Off;
      end
      plant automaton NearOff60Timer:
        alg bool EnablementGuard = NearOff;
        alg bool DisablementGuard = not NearOff;
        location Off:
          initial;
          marked;
          edge .Bridge.LTAS.NearOff60Timer.c_on when EnablementGuard goto Running;
        location Running:
          edge .Bridge.LTAS.NearOff60Timer.c_reset when DisablementGuard goto Off;
          edge .Bridge.LTAS.NearOff60Timer.u_timeout goto Finished;
        location Finished:
          marked;
          edge .Bridge.LTAS.NearOff60Timer.c_reset when DisablementGuard goto Off;
      end
    end
    group LTSS:
      alg bool On = StopSign1.On and StopSign2.On and StopSign3.On and StopSign4.On and StopSign5.On and StopSign6.On and StopSign7.On and StopSign8.On and StopSign9.On and StopSign10.On and StopSign11.On and StopSign12.On and MainLaneActuator.On and SwitchLaneActuator.On;
      alg bool Off = StopSign1.Off and StopSign2.Off and StopSign3.Off and StopSign4.Off and StopSign5.Off and StopSign6.Off and StopSign7.Off and StopSign8.Off and StopSign9.Off and StopSign10.Off and StopSign11.Off and StopSign12.Off and MainLaneActuator.Off and SwitchLaneActuator.Off;
      alg bool On15TimeOk = On15Timer.Finished and On;
      alg bool Off60TimeOk = Off60Timer.Finished and Off;
      plant automaton MainLaneActuator:
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          marked not InitialLocationOn;
          edge .Bridge.LTSS.MainLaneActuator.c_on goto On;
        location On:
          initial InitialLocationOn;
          marked InitialLocationOn;
          edge .Bridge.LTSS.MainLaneActuator.c_off goto Off;
      end
      plant automaton SwitchLaneActuator:
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          marked not InitialLocationOn;
          edge .Bridge.LTSS.SwitchLaneActuator.c_on goto On;
        location On:
          initial InitialLocationOn;
          marked InitialLocationOn;
          edge .Bridge.LTSS.SwitchLaneActuator.c_off goto Off;
      end
      group StopSign1:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTSS.StopSign1.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTSS.StopSign1.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = SwitchLaneActuator.On;
          alg bool Off = SwitchLaneActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTSS.StopSign1.Sensor.u_on when On;
            edge .Bridge.LTSS.StopSign1.Sensor.u_off when Off;
        end
      end
      group StopSign2:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTSS.StopSign2.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTSS.StopSign2.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = SwitchLaneActuator.On;
          alg bool Off = SwitchLaneActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTSS.StopSign2.Sensor.u_on when On;
            edge .Bridge.LTSS.StopSign2.Sensor.u_off when Off;
        end
      end
      group StopSign3:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTSS.StopSign3.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTSS.StopSign3.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = SwitchLaneActuator.On;
          alg bool Off = SwitchLaneActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTSS.StopSign3.Sensor.u_on when On;
            edge .Bridge.LTSS.StopSign3.Sensor.u_off when Off;
        end
      end
      group StopSign4:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTSS.StopSign4.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTSS.StopSign4.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = SwitchLaneActuator.On;
          alg bool Off = SwitchLaneActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTSS.StopSign4.Sensor.u_on when On;
            edge .Bridge.LTSS.StopSign4.Sensor.u_off when Off;
        end
      end
      group StopSign5:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTSS.StopSign5.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTSS.StopSign5.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = MainLaneActuator.On;
          alg bool Off = MainLaneActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTSS.StopSign5.Sensor.u_on when On;
            edge .Bridge.LTSS.StopSign5.Sensor.u_off when Off;
        end
      end
      group StopSign6:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTSS.StopSign6.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTSS.StopSign6.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = MainLaneActuator.On;
          alg bool Off = MainLaneActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTSS.StopSign6.Sensor.u_on when On;
            edge .Bridge.LTSS.StopSign6.Sensor.u_off when Off;
        end
      end
      group StopSign7:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTSS.StopSign7.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTSS.StopSign7.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = MainLaneActuator.On;
          alg bool Off = MainLaneActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTSS.StopSign7.Sensor.u_on when On;
            edge .Bridge.LTSS.StopSign7.Sensor.u_off when Off;
        end
      end
      group StopSign8:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTSS.StopSign8.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTSS.StopSign8.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = MainLaneActuator.On;
          alg bool Off = MainLaneActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTSS.StopSign8.Sensor.u_on when On;
            edge .Bridge.LTSS.StopSign8.Sensor.u_off when Off;
        end
      end
      group StopSign9:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTSS.StopSign9.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTSS.StopSign9.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = MainLaneActuator.On;
          alg bool Off = MainLaneActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTSS.StopSign9.Sensor.u_on when On;
            edge .Bridge.LTSS.StopSign9.Sensor.u_off when Off;
        end
      end
      group StopSign10:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTSS.StopSign10.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTSS.StopSign10.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = MainLaneActuator.On;
          alg bool Off = MainLaneActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTSS.StopSign10.Sensor.u_on when On;
            edge .Bridge.LTSS.StopSign10.Sensor.u_off when Off;
        end
      end
      group StopSign11:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTSS.StopSign11.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTSS.StopSign11.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = MainLaneActuator.On;
          alg bool Off = MainLaneActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTSS.StopSign11.Sensor.u_on when On;
            edge .Bridge.LTSS.StopSign11.Sensor.u_off when Off;
        end
      end
      group StopSign12:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTSS.StopSign12.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTSS.StopSign12.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = MainLaneActuator.On;
          alg bool Off = MainLaneActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTSS.StopSign12.Sensor.u_on when On;
            edge .Bridge.LTSS.StopSign12.Sensor.u_off when Off;
        end
      end
      plant automaton On15Timer:
        alg bool EnablementGuard = On;
        alg bool DisablementGuard = not On;
        location Off:
          initial;
          marked;
          edge .Bridge.LTSS.On15Timer.c_on when EnablementGuard goto Running;
        location Running:
          edge .Bridge.LTSS.On15Timer.c_reset when DisablementGuard goto Off;
          edge .Bridge.LTSS.On15Timer.u_timeout goto Finished;
        location Finished:
          marked;
          edge .Bridge.LTSS.On15Timer.c_reset when DisablementGuard goto Off;
      end
      plant automaton Off60Timer:
        alg bool EnablementGuard = .sup.Bridge.LTSS.Off;
        alg bool DisablementGuard = not .sup.Bridge.LTSS.Off;
        location Off:
          initial;
          marked;
          edge .Bridge.LTSS.Off60Timer.c_on when EnablementGuard goto Running;
        location Running:
          edge .Bridge.LTSS.Off60Timer.c_reset when DisablementGuard goto Off;
          edge .Bridge.LTSS.Off60Timer.u_timeout goto Finished;
        location Finished:
          marked;
          edge .Bridge.LTSS.Off60Timer.c_reset when DisablementGuard goto Off;
      end
    end
    group Barriers:
      alg bool EnteringClosed = B3.Closed and B6.Closed;
      alg bool LeavingClosed = B2.Closed and B7.Closed;
      alg bool LeavingOpen = B2.Open and B7.Open;
      alg bool SlowClosed = B4.Closed and B8.Closed;
      alg bool Closed = B1.Closed and B2.Closed and B3.Closed and B4.Closed and B5.Closed and B6.Closed and B7.Closed and B8.Closed;
      alg bool Open = B1.Open and B2.Open and B3.Open and B4.Open and B5.Open and B6.Open and B7.Open and B8.Open;
      alg bool B3B6Closed1TimeOk = B3B6Closed1Timer.Finished and EnteringClosed;
      alg bool B2B7Open1TimeOk = B2B7Open1Timer.Finished and LeavingOpen;
      alg bool SoundOn6TimeOk = SoundOn6Timer.Finished and SoundSignals.On;
      group B1:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = false;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Bridge.Barriers.B1.Actuator.c_open goto Opening;
            edge .Bridge.Barriers.B1.Actuator.c_close goto Closing;
          location Opening:
            edge .Bridge.Barriers.B1.Actuator.c_emrgStop, .Bridge.Barriers.B1.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Bridge.Barriers.B1.Actuator.c_emrgStop, .Bridge.Barriers.B1.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Bridge.Barriers.B1.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Bridge.Barriers.B1.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Bridge.Barriers.B1.Sensor.u_closed_on goto Closed;
            edge .Bridge.Barriers.B1.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Bridge.Barriers.B1.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Bridge.Barriers.B1.Sensor.u_open_on, .Bridge.Barriers.B1.Sensor.u_closed_off when Actuator.Opening;
            edge .Bridge.Barriers.B1.Sensor.u_closed_on, .Bridge.Barriers.B1.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Bridge.Barriers.B1.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Bridge.Barriers.B1.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Bridge.Barriers.B1.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Bridge.Barriers.B1.Actuator.c_close needs not Sensor.Closed;
      end
      group B2:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = false;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Bridge.Barriers.B2.Actuator.c_open goto Opening;
            edge .Bridge.Barriers.B2.Actuator.c_close goto Closing;
          location Opening:
            edge .Bridge.Barriers.B2.Actuator.c_emrgStop, .Bridge.Barriers.B2.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Bridge.Barriers.B2.Actuator.c_emrgStop, .Bridge.Barriers.B2.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Bridge.Barriers.B2.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Bridge.Barriers.B2.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Bridge.Barriers.B2.Sensor.u_closed_on goto Closed;
            edge .Bridge.Barriers.B2.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Bridge.Barriers.B2.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Bridge.Barriers.B2.Sensor.u_open_on, .Bridge.Barriers.B2.Sensor.u_closed_off when Actuator.Opening;
            edge .Bridge.Barriers.B2.Sensor.u_closed_on, .Bridge.Barriers.B2.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Bridge.Barriers.B2.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Bridge.Barriers.B2.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Bridge.Barriers.B2.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Bridge.Barriers.B2.Actuator.c_close needs not Sensor.Closed;
      end
      group B3:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = false;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Bridge.Barriers.B3.Actuator.c_open goto Opening;
            edge .Bridge.Barriers.B3.Actuator.c_close goto Closing;
          location Opening:
            edge .Bridge.Barriers.B3.Actuator.c_emrgStop, .Bridge.Barriers.B3.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Bridge.Barriers.B3.Actuator.c_emrgStop, .Bridge.Barriers.B3.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Bridge.Barriers.B3.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Bridge.Barriers.B3.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Bridge.Barriers.B3.Sensor.u_closed_on goto Closed;
            edge .Bridge.Barriers.B3.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Bridge.Barriers.B3.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Bridge.Barriers.B3.Sensor.u_open_on, .Bridge.Barriers.B3.Sensor.u_closed_off when Actuator.Opening;
            edge .Bridge.Barriers.B3.Sensor.u_closed_on, .Bridge.Barriers.B3.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Bridge.Barriers.B3.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Bridge.Barriers.B3.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Bridge.Barriers.B3.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Bridge.Barriers.B3.Actuator.c_close needs not Sensor.Closed;
      end
      group B4:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = false;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Bridge.Barriers.B4.Actuator.c_open goto Opening;
            edge .Bridge.Barriers.B4.Actuator.c_close goto Closing;
          location Opening:
            edge .Bridge.Barriers.B4.Actuator.c_emrgStop, .Bridge.Barriers.B4.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Bridge.Barriers.B4.Actuator.c_emrgStop, .Bridge.Barriers.B4.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Bridge.Barriers.B4.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Bridge.Barriers.B4.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Bridge.Barriers.B4.Sensor.u_closed_on goto Closed;
            edge .Bridge.Barriers.B4.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Bridge.Barriers.B4.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Bridge.Barriers.B4.Sensor.u_open_on, .Bridge.Barriers.B4.Sensor.u_closed_off when Actuator.Opening;
            edge .Bridge.Barriers.B4.Sensor.u_closed_on, .Bridge.Barriers.B4.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Bridge.Barriers.B4.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Bridge.Barriers.B4.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Bridge.Barriers.B4.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Bridge.Barriers.B4.Actuator.c_close needs not Sensor.Closed;
      end
      group B5:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = false;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Bridge.Barriers.B5.Actuator.c_open goto Opening;
            edge .Bridge.Barriers.B5.Actuator.c_close goto Closing;
          location Opening:
            edge .Bridge.Barriers.B5.Actuator.c_emrgStop, .Bridge.Barriers.B5.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Bridge.Barriers.B5.Actuator.c_emrgStop, .Bridge.Barriers.B5.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Bridge.Barriers.B5.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Bridge.Barriers.B5.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Bridge.Barriers.B5.Sensor.u_closed_on goto Closed;
            edge .Bridge.Barriers.B5.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Bridge.Barriers.B5.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Bridge.Barriers.B5.Sensor.u_open_on, .Bridge.Barriers.B5.Sensor.u_closed_off when Actuator.Opening;
            edge .Bridge.Barriers.B5.Sensor.u_closed_on, .Bridge.Barriers.B5.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Bridge.Barriers.B5.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Bridge.Barriers.B5.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Bridge.Barriers.B5.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Bridge.Barriers.B5.Actuator.c_close needs not Sensor.Closed;
      end
      group B6:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = false;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Bridge.Barriers.B6.Actuator.c_open goto Opening;
            edge .Bridge.Barriers.B6.Actuator.c_close goto Closing;
          location Opening:
            edge .Bridge.Barriers.B6.Actuator.c_emrgStop, .Bridge.Barriers.B6.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Bridge.Barriers.B6.Actuator.c_emrgStop, .Bridge.Barriers.B6.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Bridge.Barriers.B6.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Bridge.Barriers.B6.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Bridge.Barriers.B6.Sensor.u_closed_on goto Closed;
            edge .Bridge.Barriers.B6.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Bridge.Barriers.B6.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Bridge.Barriers.B6.Sensor.u_open_on, .Bridge.Barriers.B6.Sensor.u_closed_off when Actuator.Opening;
            edge .Bridge.Barriers.B6.Sensor.u_closed_on, .Bridge.Barriers.B6.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Bridge.Barriers.B6.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Bridge.Barriers.B6.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Bridge.Barriers.B6.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Bridge.Barriers.B6.Actuator.c_close needs not Sensor.Closed;
      end
      group B7:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = false;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Bridge.Barriers.B7.Actuator.c_open goto Opening;
            edge .Bridge.Barriers.B7.Actuator.c_close goto Closing;
          location Opening:
            edge .Bridge.Barriers.B7.Actuator.c_emrgStop, .Bridge.Barriers.B7.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Bridge.Barriers.B7.Actuator.c_emrgStop, .Bridge.Barriers.B7.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Bridge.Barriers.B7.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Bridge.Barriers.B7.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Bridge.Barriers.B7.Sensor.u_closed_on goto Closed;
            edge .Bridge.Barriers.B7.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Bridge.Barriers.B7.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Bridge.Barriers.B7.Sensor.u_open_on, .Bridge.Barriers.B7.Sensor.u_closed_off when Actuator.Opening;
            edge .Bridge.Barriers.B7.Sensor.u_closed_on, .Bridge.Barriers.B7.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Bridge.Barriers.B7.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Bridge.Barriers.B7.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Bridge.Barriers.B7.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Bridge.Barriers.B7.Actuator.c_close needs not Sensor.Closed;
      end
      group B8:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = false;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Bridge.Barriers.B8.Actuator.c_open goto Opening;
            edge .Bridge.Barriers.B8.Actuator.c_close goto Closing;
          location Opening:
            edge .Bridge.Barriers.B8.Actuator.c_emrgStop, .Bridge.Barriers.B8.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Bridge.Barriers.B8.Actuator.c_emrgStop, .Bridge.Barriers.B8.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Bridge.Barriers.B8.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Bridge.Barriers.B8.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Bridge.Barriers.B8.Sensor.u_closed_on goto Closed;
            edge .Bridge.Barriers.B8.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Bridge.Barriers.B8.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Bridge.Barriers.B8.Sensor.u_open_on, .Bridge.Barriers.B8.Sensor.u_closed_off when Actuator.Opening;
            edge .Bridge.Barriers.B8.Sensor.u_closed_on, .Bridge.Barriers.B8.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Bridge.Barriers.B8.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Bridge.Barriers.B8.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Bridge.Barriers.B8.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Bridge.Barriers.B8.Actuator.c_close needs not Sensor.Closed;
      end
      plant automaton LightSignals:
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          marked not InitialLocationOn;
          edge .Bridge.Barriers.LightSignals.c_on goto On;
        location On:
          initial InitialLocationOn;
          marked InitialLocationOn;
          edge .Bridge.Barriers.LightSignals.c_off goto Off;
      end
      plant automaton SoundSignals:
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          marked not InitialLocationOn;
          edge .Bridge.Barriers.SoundSignals.c_on goto On;
        location On:
          initial InitialLocationOn;
          marked InitialLocationOn;
          edge .Bridge.Barriers.SoundSignals.c_off goto Off;
      end
      plant automaton B3B6Closed1Timer:
        alg bool EnablementGuard = EnteringClosed;
        alg bool DisablementGuard = not EnteringClosed;
        location Off:
          initial;
          marked;
          edge .Bridge.Barriers.B3B6Closed1Timer.c_on when EnablementGuard goto Running;
        location Running:
          edge .Bridge.Barriers.B3B6Closed1Timer.c_reset when DisablementGuard goto Off;
          edge .Bridge.Barriers.B3B6Closed1Timer.u_timeout goto Finished;
        location Finished:
          marked;
          edge .Bridge.Barriers.B3B6Closed1Timer.c_reset when DisablementGuard goto Off;
      end
      plant automaton B2B7Open1Timer:
        alg bool EnablementGuard = LeavingOpen;
        alg bool DisablementGuard = not LeavingOpen;
        location Off:
          initial;
          marked;
          edge .Bridge.Barriers.B2B7Open1Timer.c_on when EnablementGuard goto Running;
        location Running:
          edge .Bridge.Barriers.B2B7Open1Timer.c_reset when DisablementGuard goto Off;
          edge .Bridge.Barriers.B2B7Open1Timer.u_timeout goto Finished;
        location Finished:
          marked;
          edge .Bridge.Barriers.B2B7Open1Timer.c_reset when DisablementGuard goto Off;
      end
      plant automaton SoundOn6Timer:
        alg bool EnablementGuard = SoundSignals.On;
        alg bool DisablementGuard = SoundSignals.Off;
        location Off:
          initial;
          marked;
          edge .Bridge.Barriers.SoundOn6Timer.c_on when EnablementGuard goto Running;
        location Running:
          edge .Bridge.Barriers.SoundOn6Timer.c_reset when DisablementGuard goto Off;
          edge .Bridge.Barriers.SoundOn6Timer.u_timeout goto Finished;
        location Finished:
          marked;
          edge .Bridge.Barriers.SoundOn6Timer.c_reset when DisablementGuard goto Off;
      end
    end
    group Deck:
      alg bool Moving = not Actuator.Rest;
      alg bool Closed = Actuator.Rest and Sensor.Closed;
      alg bool Open = Actuator.Rest and Sensor.Open;
      alg bool InitialLocationClosed = true;
      plant automaton Actuator:
        location Rest:
          initial;
          marked;
          edge .Bridge.Deck.Actuator.c_open goto Opening;
          edge .Bridge.Deck.Actuator.c_close goto Closing;
        location Opening:
          edge .Bridge.Deck.Actuator.c_emrgStop, .Bridge.Deck.Actuator.c_endStopOpening goto Rest;
        location Closing:
          edge .Bridge.Deck.Actuator.c_emrgStop, .Bridge.Deck.Actuator.c_endStopClosing goto Rest;
      end
      plant automaton Sensor:
        alg bool InitialLocationClosed = .sup.Bridge.Deck.InitialLocationClosed;
        location Closed:
          initial InitialLocationClosed;
          marked InitialLocationClosed;
          edge .Bridge.Deck.Sensor.u_closed_off goto Intermediate;
        location Intermediate:
          edge .Bridge.Deck.Sensor.u_closed_on goto Closed;
          edge .Bridge.Deck.Sensor.u_open_on goto Open;
        location Open:
          initial not InitialLocationClosed;
          marked not InitialLocationClosed;
          edge .Bridge.Deck.Sensor.u_open_off goto Intermediate;
      end
      plant automaton Dynamics:
        location:
          initial;
          marked;
          edge .Bridge.Deck.Sensor.u_open_on, .Bridge.Deck.Sensor.u_closed_off when Actuator.Opening;
          edge .Bridge.Deck.Sensor.u_closed_on, .Bridge.Deck.Sensor.u_open_off when Actuator.Closing;
      end
      requirement invariant .Bridge.Deck.Actuator.c_endStopOpening needs Sensor.Open;
      requirement invariant .Bridge.Deck.Actuator.c_endStopClosing needs Sensor.Closed;
      requirement invariant .Bridge.Deck.Actuator.c_open needs not Sensor.Open;
      requirement invariant .Bridge.Deck.Actuator.c_close needs not Sensor.Closed;
    end
    plant automaton CloseRequest:
      alg bool InitialLocationOn = false;
      location Off:
        initial not InitialLocationOn;
        marked not InitialLocationOn;
        edge .Bridge.CloseRequest.u_on goto On;
      location On:
        initial InitialLocationOn;
        marked InitialLocationOn;
        edge .Bridge.CloseRequest.u_off goto Off;
    end
  end
  supervisor automaton sup:
    alphabet .Bridge.LTAS.FarActuator.c_on, .Bridge.LTAS.FarActuator.c_off, .Bridge.LTAS.NearActuator.c_on, .Bridge.LTAS.NearActuator.c_off, .Bridge.LTAS.On15Timer.c_on, .Bridge.LTAS.On15Timer.c_reset, .Bridge.LTAS.On20Timer.c_on, .Bridge.LTAS.On20Timer.c_reset, .Bridge.LTAS.NearOff60Timer.c_on, .Bridge.LTAS.NearOff60Timer.c_reset, .Bridge.LTSS.MainLaneActuator.c_on, .Bridge.LTSS.MainLaneActuator.c_off, .Bridge.LTSS.SwitchLaneActuator.c_on, .Bridge.LTSS.SwitchLaneActuator.c_off, .Bridge.LTSS.On15Timer.c_on, .Bridge.LTSS.On15Timer.c_reset, .Bridge.LTSS.Off60Timer.c_on, .Bridge.LTSS.Off60Timer.c_reset, .Bridge.Barriers.B1.Actuator.c_open, .Bridge.Barriers.B1.Actuator.c_close, .Bridge.Barriers.B1.Actuator.c_emrgStop, .Bridge.Barriers.B1.Actuator.c_endStopOpening, .Bridge.Barriers.B1.Actuator.c_endStopClosing, .Bridge.Barriers.B2.Actuator.c_open, .Bridge.Barriers.B2.Actuator.c_close, .Bridge.Barriers.B2.Actuator.c_emrgStop, .Bridge.Barriers.B2.Actuator.c_endStopOpening, .Bridge.Barriers.B2.Actuator.c_endStopClosing, .Bridge.Barriers.B3.Actuator.c_open, .Bridge.Barriers.B3.Actuator.c_close, .Bridge.Barriers.B3.Actuator.c_emrgStop, .Bridge.Barriers.B3.Actuator.c_endStopOpening, .Bridge.Barriers.B3.Actuator.c_endStopClosing, .Bridge.Barriers.B4.Actuator.c_open, .Bridge.Barriers.B4.Actuator.c_close, .Bridge.Barriers.B4.Actuator.c_emrgStop, .Bridge.Barriers.B4.Actuator.c_endStopOpening, .Bridge.Barriers.B4.Actuator.c_endStopClosing, .Bridge.Barriers.B5.Actuator.c_open, .Bridge.Barriers.B5.Actuator.c_close, .Bridge.Barriers.B5.Actuator.c_emrgStop, .Bridge.Barriers.B5.Actuator.c_endStopOpening, .Bridge.Barriers.B5.Actuator.c_endStopClosing, .Bridge.Barriers.B6.Actuator.c_open, .Bridge.Barriers.B6.Actuator.c_close, .Bridge.Barriers.B6.Actuator.c_emrgStop, .Bridge.Barriers.B6.Actuator.c_endStopOpening, .Bridge.Barriers.B6.Actuator.c_endStopClosing, .Bridge.Barriers.B7.Actuator.c_open, .Bridge.Barriers.B7.Actuator.c_close, .Bridge.Barriers.B7.Actuator.c_emrgStop, .Bridge.Barriers.B7.Actuator.c_endStopOpening, .Bridge.Barriers.B7.Actuator.c_endStopClosing, .Bridge.Barriers.B8.Actuator.c_open, .Bridge.Barriers.B8.Actuator.c_close, .Bridge.Barriers.B8.Actuator.c_emrgStop, .Bridge.Barriers.B8.Actuator.c_endStopOpening, .Bridge.Barriers.B8.Actuator.c_endStopClosing, .Bridge.Barriers.LightSignals.c_on, .Bridge.Barriers.LightSignals.c_off, .Bridge.Barriers.SoundSignals.c_on, .Bridge.Barriers.SoundSignals.c_off, .Bridge.Barriers.B3B6Closed1Timer.c_on, .Bridge.Barriers.B3B6Closed1Timer.c_reset, .Bridge.Barriers.B2B7Open1Timer.c_on, .Bridge.Barriers.B2B7Open1Timer.c_reset, .Bridge.Barriers.SoundOn6Timer.c_on, .Bridge.Barriers.SoundOn6Timer.c_reset, .Bridge.Deck.Actuator.c_open, .Bridge.Deck.Actuator.c_close, .Bridge.Deck.Actuator.c_emrgStop, .Bridge.Deck.Actuator.c_endStopOpening, .Bridge.Deck.Actuator.c_endStopClosing;
    location:
      initial;
      marked;
      edge .Bridge.Barriers.B1.Actuator.c_close when true;
      edge .Bridge.Barriers.B1.Actuator.c_emrgStop when true;
      edge .Bridge.Barriers.B1.Actuator.c_endStopClosing when true;
      edge .Bridge.Barriers.B1.Actuator.c_endStopOpening when true;
      edge .Bridge.Barriers.B1.Actuator.c_open when true;
      edge .Bridge.Barriers.B2.Actuator.c_close when true;
      edge .Bridge.Barriers.B2.Actuator.c_emrgStop when true;
      edge .Bridge.Barriers.B2.Actuator.c_endStopClosing when true;
      edge .Bridge.Barriers.B2.Actuator.c_endStopOpening when true;
      edge .Bridge.Barriers.B2.Actuator.c_open when true;
      edge .Bridge.Barriers.B2B7Open1Timer.c_on when true;
      edge .Bridge.Barriers.B2B7Open1Timer.c_reset when true;
      edge .Bridge.Barriers.B3.Actuator.c_close when true;
      edge .Bridge.Barriers.B3.Actuator.c_emrgStop when true;
      edge .Bridge.Barriers.B3.Actuator.c_endStopClosing when true;
      edge .Bridge.Barriers.B3.Actuator.c_endStopOpening when true;
      edge .Bridge.Barriers.B3.Actuator.c_open when true;
      edge .Bridge.Barriers.B3B6Closed1Timer.c_on when true;
      edge .Bridge.Barriers.B3B6Closed1Timer.c_reset when true;
      edge .Bridge.Barriers.B4.Actuator.c_close when true;
      edge .Bridge.Barriers.B4.Actuator.c_emrgStop when true;
      edge .Bridge.Barriers.B4.Actuator.c_endStopClosing when true;
      edge .Bridge.Barriers.B4.Actuator.c_endStopOpening when true;
      edge .Bridge.Barriers.B4.Actuator.c_open when true;
      edge .Bridge.Barriers.B5.Actuator.c_close when true;
      edge .Bridge.Barriers.B5.Actuator.c_emrgStop when true;
      edge .Bridge.Barriers.B5.Actuator.c_endStopClosing when true;
      edge .Bridge.Barriers.B5.Actuator.c_endStopOpening when true;
      edge .Bridge.Barriers.B5.Actuator.c_open when true;
      edge .Bridge.Barriers.B6.Actuator.c_close when true;
      edge .Bridge.Barriers.B6.Actuator.c_emrgStop when true;
      edge .Bridge.Barriers.B6.Actuator.c_endStopClosing when true;
      edge .Bridge.Barriers.B6.Actuator.c_endStopOpening when true;
      edge .Bridge.Barriers.B6.Actuator.c_open when true;
      edge .Bridge.Barriers.B7.Actuator.c_close when true;
      edge .Bridge.Barriers.B7.Actuator.c_emrgStop when true;
      edge .Bridge.Barriers.B7.Actuator.c_endStopClosing when true;
      edge .Bridge.Barriers.B7.Actuator.c_endStopOpening when true;
      edge .Bridge.Barriers.B7.Actuator.c_open when true;
      edge .Bridge.Barriers.B8.Actuator.c_close when true;
      edge .Bridge.Barriers.B8.Actuator.c_emrgStop when true;
      edge .Bridge.Barriers.B8.Actuator.c_endStopClosing when true;
      edge .Bridge.Barriers.B8.Actuator.c_endStopOpening when true;
      edge .Bridge.Barriers.B8.Actuator.c_open when true;
      edge .Bridge.Barriers.LightSignals.c_off when true;
      edge .Bridge.Barriers.LightSignals.c_on when true;
      edge .Bridge.Barriers.SoundOn6Timer.c_on when true;
      edge .Bridge.Barriers.SoundOn6Timer.c_reset when true;
      edge .Bridge.Barriers.SoundSignals.c_off when true;
      edge .Bridge.Barriers.SoundSignals.c_on when true;
      edge .Bridge.Deck.Actuator.c_close when true;
      edge .Bridge.Deck.Actuator.c_emrgStop when true;
      edge .Bridge.Deck.Actuator.c_endStopClosing when true;
      edge .Bridge.Deck.Actuator.c_endStopOpening when true;
      edge .Bridge.Deck.Actuator.c_open when true;
      edge .Bridge.LTAS.FarActuator.c_off when true;
      edge .Bridge.LTAS.FarActuator.c_on when true;
      edge .Bridge.LTAS.NearActuator.c_off when true;
      edge .Bridge.LTAS.NearActuator.c_on when true;
      edge .Bridge.LTAS.NearOff60Timer.c_on when true;
      edge .Bridge.LTAS.NearOff60Timer.c_reset when true;
      edge .Bridge.LTAS.On15Timer.c_on when true;
      edge .Bridge.LTAS.On15Timer.c_reset when true;
      edge .Bridge.LTAS.On20Timer.c_on when true;
      edge .Bridge.LTAS.On20Timer.c_reset when true;
      edge .Bridge.LTSS.MainLaneActuator.c_off when true;
      edge .Bridge.LTSS.MainLaneActuator.c_on when true;
      edge .Bridge.LTSS.Off60Timer.c_on when true;
      edge .Bridge.LTSS.Off60Timer.c_reset when true;
      edge .Bridge.LTSS.On15Timer.c_on when true;
      edge .Bridge.LTSS.On15Timer.c_reset when true;
      edge .Bridge.LTSS.SwitchLaneActuator.c_off when true;
      edge .Bridge.LTSS.SwitchLaneActuator.c_on when true;
  end
end
