group Bridge:
  group UI:
    group LT:
      uncontrollable u_activate;
      uncontrollable u_deactivate;
      uncontrollable u_stop;
    end
    group Barrier1:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group Barrier27:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group Barrier36:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group Barrier48:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group Barrier5:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group Deck:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
  end
  group EmergencyStop:
    uncontrollable u_activate;
    uncontrollable u_reset;
  end
  group LTAS:
    group FarActuator:
      controllable c_on;
      controllable c_off;
    end
    group NearActuator:
      controllable c_on;
      controllable c_off;
    end
    group ApproachSign1:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group ApproachSign2:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group ApproachSign3:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group ApproachSign4:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group ApproachSign5:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group Enabled15Timer:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
    end
    group Enabled20Timer:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
    end
    group NearDisabledTimer:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
    end
  end
  group LTSS:
    group MainLaneActuator:
      controllable c_on;
      controllable c_off;
    end
    group SwitchLaneActuator:
      controllable c_on;
      controllable c_off;
    end
    group StopSign1:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group StopSign2:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group StopSign3:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group StopSign4:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group StopSign5:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group StopSign6:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group StopSign7:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group StopSign8:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group StopSign9:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group StopSign10:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group StopSign11:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group StopSign12:
      group Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group EnabledTimer:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
    end
    group DisabledTimer:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
    end
  end
  group Barriers:
    group B1:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group B2:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group B3:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group B4:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group B5:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group B6:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group B7:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group B8:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group LightSignals:
      controllable c_on;
      controllable c_off;
    end
    group LTSoundSignals:
      controllable c_on;
      controllable c_off;
    end
    group EnteringClosedTimer:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
    end
    group LeavingOpenTimer:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
    end
    group LTSoundSignalTimer:
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
    end
  end
  group Deck:
    group Actuator:
      controllable c_open;
      controllable c_close;
      controllable c_stop;
      controllable c_endStopClosing;
      controllable c_endStopOpening;
    end
    group Sensor:
      uncontrollable u_open_on;
      uncontrollable u_open_off;
      uncontrollable u_closed_on;
      uncontrollable u_closed_off;
    end
  end
  group CloseRequest:
    uncontrollable u_on;
    uncontrollable u_off;
  end
end
group sup:
  group FunctionalRequirements:
    group LT_FReq:
      requirement invariant .Bridge.LTAS.NearActuator.c_on needs Bridge.UI.LT.Activated;
      requirement invariant .Bridge.LTAS.FarActuator.c_on needs Bridge.UI.LT.Activated;
      requirement invariant .Bridge.LTSS.MainLaneActuator.c_on needs Bridge.UI.LT.Activated;
      requirement invariant .Bridge.LTSS.SwitchLaneActuator.c_on needs Bridge.UI.LT.Activated;
      requirement invariant .Bridge.Barriers.LightSignals.c_on needs Bridge.UI.LT.Activated;
      requirement invariant .Bridge.LTAS.NearActuator.c_off needs Bridge.UI.LT.Deactivated;
      requirement invariant .Bridge.LTAS.FarActuator.c_off needs Bridge.UI.LT.Deactivated;
      requirement invariant .Bridge.LTSS.MainLaneActuator.c_off needs Bridge.UI.LT.Deactivated;
      requirement invariant .Bridge.LTSS.SwitchLaneActuator.c_off needs Bridge.UI.LT.Deactivated;
      requirement invariant .Bridge.Barriers.LightSignals.c_off needs Bridge.UI.LT.Deactivated;
    end
    group Barriers_FReq:
      group Barrier1UI:
        requirement invariant .Bridge.Barriers.B1.Actuator.c_open needs Bridge.UI.Barrier1.Open and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B1.Actuator.c_close needs Bridge.UI.Barrier1.Close and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B1.Actuator.c_stop needs Bridge.UI.Barrier1.Stop or Bridge.EmergencyStop.Activated;
      end
      group Barrier2UI:
        requirement invariant .Bridge.Barriers.B2.Actuator.c_open needs Bridge.UI.Barrier27.Open and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B2.Actuator.c_close needs Bridge.UI.Barrier27.Close and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B2.Actuator.c_stop needs Bridge.UI.Barrier27.Stop or Bridge.EmergencyStop.Activated;
      end
      group Barrier3UI:
        requirement invariant .Bridge.Barriers.B3.Actuator.c_open needs Bridge.UI.Barrier36.Open and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B3.Actuator.c_close needs Bridge.UI.Barrier36.Close and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B3.Actuator.c_stop needs Bridge.UI.Barrier36.Stop or Bridge.EmergencyStop.Activated;
      end
      group Barrier4UI:
        requirement invariant .Bridge.Barriers.B4.Actuator.c_open needs Bridge.UI.Barrier48.Open and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B4.Actuator.c_close needs Bridge.UI.Barrier48.Close and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B4.Actuator.c_stop needs Bridge.UI.Barrier48.Stop or Bridge.EmergencyStop.Activated;
      end
      group Barrier5UI:
        requirement invariant .Bridge.Barriers.B5.Actuator.c_open needs Bridge.UI.Barrier5.Open and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B5.Actuator.c_close needs Bridge.UI.Barrier5.Close and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B5.Actuator.c_stop needs Bridge.UI.Barrier5.Stop or Bridge.EmergencyStop.Activated;
      end
      group Barrier6UI:
        requirement invariant .Bridge.Barriers.B6.Actuator.c_open needs Bridge.UI.Barrier36.Open and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B6.Actuator.c_close needs Bridge.UI.Barrier36.Close and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B6.Actuator.c_stop needs Bridge.UI.Barrier36.Stop or Bridge.EmergencyStop.Activated;
      end
      group Barrier7UI:
        requirement invariant .Bridge.Barriers.B7.Actuator.c_open needs Bridge.UI.Barrier27.Open and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B7.Actuator.c_close needs Bridge.UI.Barrier27.Close and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B7.Actuator.c_stop needs Bridge.UI.Barrier27.Stop or Bridge.EmergencyStop.Activated;
      end
      group Barrier8UI:
        requirement invariant .Bridge.Barriers.B8.Actuator.c_open needs Bridge.UI.Barrier48.Open and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B8.Actuator.c_close needs Bridge.UI.Barrier48.Close and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B8.Actuator.c_stop needs Bridge.UI.Barrier48.Stop or Bridge.EmergencyStop.Activated;
      end
    end
    group Deck_FReq:
      requirement invariant .Bridge.Deck.Actuator.c_open needs Bridge.UI.Deck.Open and Bridge.EmergencyStop.Deactivated;
      requirement invariant .Bridge.Deck.Actuator.c_close needs Bridge.UI.Deck.Close and Bridge.EmergencyStop.Deactivated;
      requirement invariant .Bridge.Deck.Actuator.c_stop needs Bridge.UI.Deck.Stop or Bridge.EmergencyStop.Activated;
    end
  end
  group SafetyRequirements:
    group Requirement_I:
      requirement invariant .Bridge.LTSS.MainLaneActuator.c_on needs Bridge.LTAS.Enabled15Timer.Finished;
      requirement invariant .Bridge.LTSS.MainLaneActuator.c_on needs Bridge.LTAS.Enabled;
      requirement invariant .Bridge.LTSS.SwitchLaneActuator.c_on needs Bridge.LTAS.Enabled15Timer.Finished;
      requirement invariant .Bridge.LTSS.SwitchLaneActuator.c_on needs Bridge.LTAS.Enabled;
      requirement invariant .Bridge.Barriers.LightSignals.c_on needs Bridge.LTAS.Enabled15Timer.Finished;
      requirement invariant .Bridge.Barriers.LightSignals.c_on needs Bridge.LTAS.Enabled;
    end
    group Requirement_II:
      requirement invariant .Bridge.Barriers.LTSoundSignals.c_on needs Bridge.LTAS.Enabled20TimeOk and Bridge.UI.LT.Activated;
      requirement invariant .Bridge.Barriers.LTSoundSignals.c_on needs not Bridge.Barriers.LTClosed;
      requirement invariant .Bridge.Barriers.LTSoundSignals.c_off needs Bridge.Barriers.LTClosed;
    end
    group Requirement_III:
      requirement invariant .Bridge.Barriers.B3.Actuator.c_close needs Bridge.LTSS.EnabledTimer.Finished;
      requirement invariant .Bridge.Barriers.B3.Actuator.c_close needs Bridge.LTSS.Enabled;
      requirement invariant .Bridge.Barriers.B6.Actuator.c_close needs Bridge.LTSS.EnabledTimer.Finished;
      requirement invariant .Bridge.Barriers.B6.Actuator.c_close needs Bridge.LTSS.Enabled;
    end
    group Requirement_IV:
      requirement invariant .Bridge.Barriers.B2.Actuator.c_close needs Bridge.Barriers.EnteringClosedTimer.Finished;
      requirement invariant .Bridge.Barriers.B2.Actuator.c_close needs Bridge.Barriers.EnteringClosed;
      requirement invariant .Bridge.Barriers.B7.Actuator.c_close needs Bridge.Barriers.EnteringClosedTimer.Finished;
      requirement invariant .Bridge.Barriers.B7.Actuator.c_close needs Bridge.Barriers.EnteringClosed;
    end
    group Requirement_V:
      requirement invariant .Bridge.Barriers.B1.Actuator.c_close needs Bridge.Barriers.LeavingClosed;
      requirement invariant .Bridge.Barriers.B4.Actuator.c_close needs Bridge.Barriers.LeavingClosed;
      requirement invariant .Bridge.Barriers.B5.Actuator.c_close needs Bridge.Barriers.LeavingClosed;
      requirement invariant .Bridge.Barriers.B8.Actuator.c_close needs Bridge.Barriers.LeavingClosed;
    end
    group Requirement_VI:
      requirement invariant .Bridge.Barriers.B4.Actuator.c_close needs Bridge.Barriers.LTSoundSignalTimeOk;
      requirement invariant .Bridge.Barriers.B8.Actuator.c_close needs Bridge.Barriers.LTSoundSignalTimeOk;
    end
    group Requirement_VII:
      requirement invariant .Bridge.Deck.Actuator.c_open needs Bridge.Barriers.AllClosed;
    end
    group Requirement_VIII:
      requirement invariant .Bridge.Barriers.B1.Actuator.c_open needs Bridge.Deck.Closed;
      requirement invariant .Bridge.Barriers.B2.Actuator.c_open needs Bridge.Deck.Closed;
      requirement invariant .Bridge.Barriers.B3.Actuator.c_open needs Bridge.Deck.Closed;
      requirement invariant .Bridge.Barriers.B4.Actuator.c_open needs Bridge.Deck.Closed;
      requirement invariant .Bridge.Barriers.B5.Actuator.c_open needs Bridge.Deck.Closed;
      requirement invariant .Bridge.Barriers.B6.Actuator.c_open needs Bridge.Deck.Closed;
      requirement invariant .Bridge.Barriers.B7.Actuator.c_open needs Bridge.Deck.Closed;
      requirement invariant .Bridge.Barriers.B8.Actuator.c_open needs Bridge.Deck.Closed;
    end
    group Requirement_IX:
      requirement invariant .Bridge.Barriers.B3.Actuator.c_open needs Bridge.Barriers.LeavingOpenTimer.Finished;
      requirement invariant .Bridge.Barriers.B3.Actuator.c_open needs Bridge.Barriers.LeavingOpen;
      requirement invariant .Bridge.Barriers.B6.Actuator.c_open needs Bridge.Barriers.LeavingOpenTimer.Finished;
      requirement invariant .Bridge.Barriers.B6.Actuator.c_open needs Bridge.Barriers.LeavingOpen;
    end
    group Requirement_X:
      requirement invariant .Bridge.LTSS.MainLaneActuator.c_off needs Bridge.Barriers.AllOpen;
      requirement invariant .Bridge.LTSS.SwitchLaneActuator.c_off needs Bridge.Barriers.AllOpen;
      requirement invariant .Bridge.Barriers.LightSignals.c_off needs Bridge.Barriers.AllOpen;
    end
    group Requirement_XI:
      requirement invariant .Bridge.LTAS.NearActuator.c_off needs Bridge.LTSS.DisabledTimer.Finished;
      requirement invariant .Bridge.LTAS.NearActuator.c_off needs Bridge.LTSS.Disabled;
    end
    group Requirement_XII:
      requirement invariant .Bridge.LTAS.FarActuator.c_off needs Bridge.LTAS.NearDisabledTimer.Finished;
      requirement invariant .Bridge.LTAS.FarActuator.c_off needs Bridge.LTAS.NearDisabled;
    end
    group Requirement_XIII:
      requirement invariant Bridge.CloseRequest.On disables .Bridge.Barriers.B1.Actuator.c_close;
      requirement invariant Bridge.CloseRequest.On disables .Bridge.Barriers.B2.Actuator.c_close;
      requirement invariant Bridge.CloseRequest.On disables .Bridge.Barriers.B3.Actuator.c_close;
      requirement invariant Bridge.CloseRequest.On disables .Bridge.Barriers.B4.Actuator.c_close;
      requirement invariant Bridge.CloseRequest.On disables .Bridge.Barriers.B5.Actuator.c_close;
      requirement invariant Bridge.CloseRequest.On disables .Bridge.Barriers.B6.Actuator.c_close;
      requirement invariant Bridge.CloseRequest.On disables .Bridge.Barriers.B7.Actuator.c_close;
      requirement invariant Bridge.CloseRequest.On disables .Bridge.Barriers.B8.Actuator.c_close;
      requirement invariant Bridge.CloseRequest.On disables .Bridge.Deck.Actuator.c_open;
    end
  end
  group Bridge:
    group UI:
      plant automaton LT:
        monitor;
        location Deactivated:
          initial;
          marked;
          edge .Bridge.UI.LT.u_activate goto Activated;
          edge .Bridge.UI.LT.u_stop goto Stopped;
        location Activated:
          edge .Bridge.UI.LT.u_deactivate goto Deactivated;
          edge .Bridge.UI.LT.u_stop goto Stopped;
        location Stopped:
          edge .Bridge.UI.LT.u_activate goto Activated;
          edge .Bridge.UI.LT.u_deactivate goto Deactivated;
      end
      plant automaton Barrier1:
        monitor;
        alg bool InitialOpen = true;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Bridge.UI.Barrier1.u_close goto Close;
          edge .Bridge.UI.Barrier1.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Bridge.UI.Barrier1.u_open goto Open;
          edge .Bridge.UI.Barrier1.u_stop goto Stop;
        location Stop:
          edge .Bridge.UI.Barrier1.u_close goto Close;
          edge .Bridge.UI.Barrier1.u_open goto Open;
      end
      plant automaton Barrier27:
        monitor;
        alg bool InitialOpen = true;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Bridge.UI.Barrier27.u_close goto Close;
          edge .Bridge.UI.Barrier27.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Bridge.UI.Barrier27.u_open goto Open;
          edge .Bridge.UI.Barrier27.u_stop goto Stop;
        location Stop:
          edge .Bridge.UI.Barrier27.u_close goto Close;
          edge .Bridge.UI.Barrier27.u_open goto Open;
      end
      plant automaton Barrier36:
        monitor;
        alg bool InitialOpen = true;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Bridge.UI.Barrier36.u_close goto Close;
          edge .Bridge.UI.Barrier36.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Bridge.UI.Barrier36.u_open goto Open;
          edge .Bridge.UI.Barrier36.u_stop goto Stop;
        location Stop:
          edge .Bridge.UI.Barrier36.u_close goto Close;
          edge .Bridge.UI.Barrier36.u_open goto Open;
      end
      plant automaton Barrier48:
        monitor;
        alg bool InitialOpen = true;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Bridge.UI.Barrier48.u_close goto Close;
          edge .Bridge.UI.Barrier48.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Bridge.UI.Barrier48.u_open goto Open;
          edge .Bridge.UI.Barrier48.u_stop goto Stop;
        location Stop:
          edge .Bridge.UI.Barrier48.u_close goto Close;
          edge .Bridge.UI.Barrier48.u_open goto Open;
      end
      plant automaton Barrier5:
        monitor;
        alg bool InitialOpen = true;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Bridge.UI.Barrier5.u_close goto Close;
          edge .Bridge.UI.Barrier5.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Bridge.UI.Barrier5.u_open goto Open;
          edge .Bridge.UI.Barrier5.u_stop goto Stop;
        location Stop:
          edge .Bridge.UI.Barrier5.u_close goto Close;
          edge .Bridge.UI.Barrier5.u_open goto Open;
      end
      plant automaton Deck:
        monitor;
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Bridge.UI.Deck.u_close goto Close;
          edge .Bridge.UI.Deck.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Bridge.UI.Deck.u_open goto Open;
          edge .Bridge.UI.Deck.u_stop goto Stop;
        location Stop:
          edge .Bridge.UI.Deck.u_close goto Close;
          edge .Bridge.UI.Deck.u_open goto Open;
      end
    end
    plant automaton EmergencyStop:
      location Deactivated:
        initial;
        marked;
        edge .Bridge.EmergencyStop.u_activate goto Activated;
      location Activated:
        edge .Bridge.EmergencyStop.u_reset goto Deactivated;
    end
    group LTAS:
      alg bool FarEnabled = ApproachSign1.On and ApproachSign2.On and FarActuator.On;
      alg bool NearEnabled = ApproachSign3.On and ApproachSign4.On and ApproachSign5.On and NearActuator.On;
      alg bool Enabled = FarEnabled and NearEnabled;
      alg bool NearDisabled = ApproachSign3.Off and ApproachSign4.Off and ApproachSign5.Off and NearActuator.Off;
      alg bool Enabled15TimeOk = Enabled15Timer.Finished and Enabled;
      alg bool Enabled20TimeOk = Enabled20Timer.Finished and Enabled;
      alg bool NearDisabledTimeOk = NearDisabledTimer.Finished and NearDisabled;
      plant automaton FarActuator:
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          marked not InitialLocationOn;
          edge .Bridge.LTAS.FarActuator.c_on goto On;
        location On:
          initial InitialLocationOn;
          marked InitialLocationOn;
          edge .Bridge.LTAS.FarActuator.c_off goto Off;
      end
      plant automaton NearActuator:
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          marked not InitialLocationOn;
          edge .Bridge.LTAS.NearActuator.c_on goto On;
        location On:
          initial InitialLocationOn;
          marked InitialLocationOn;
          edge .Bridge.LTAS.NearActuator.c_off goto Off;
      end
      group ApproachSign1:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTAS.ApproachSign1.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTAS.ApproachSign1.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = FarActuator.On;
          alg bool Off = FarActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTAS.ApproachSign1.Sensor.u_on when On;
            edge .Bridge.LTAS.ApproachSign1.Sensor.u_off when Off;
        end
      end
      group ApproachSign2:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTAS.ApproachSign2.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTAS.ApproachSign2.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = FarActuator.On;
          alg bool Off = FarActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTAS.ApproachSign2.Sensor.u_on when On;
            edge .Bridge.LTAS.ApproachSign2.Sensor.u_off when Off;
        end
      end
      group ApproachSign3:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTAS.ApproachSign3.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTAS.ApproachSign3.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = NearActuator.On;
          alg bool Off = NearActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTAS.ApproachSign3.Sensor.u_on when On;
            edge .Bridge.LTAS.ApproachSign3.Sensor.u_off when Off;
        end
      end
      group ApproachSign4:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTAS.ApproachSign4.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTAS.ApproachSign4.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = NearActuator.On;
          alg bool Off = NearActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTAS.ApproachSign4.Sensor.u_on when On;
            edge .Bridge.LTAS.ApproachSign4.Sensor.u_off when Off;
        end
      end
      group ApproachSign5:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTAS.ApproachSign5.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTAS.ApproachSign5.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = NearActuator.On;
          alg bool Off = NearActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTAS.ApproachSign5.Sensor.u_on when On;
            edge .Bridge.LTAS.ApproachSign5.Sensor.u_off when Off;
        end
      end
      plant automaton Enabled15Timer:
        alg bool EnablementGuard = Enabled;
        alg bool DisablementGuard = not Enabled;
        location Off:
          initial;
          marked;
          edge .Bridge.LTAS.Enabled15Timer.c_on when EnablementGuard goto On;
        location On:
          edge .Bridge.LTAS.Enabled15Timer.c_reset when DisablementGuard goto Off;
          edge .Bridge.LTAS.Enabled15Timer.u_timeout goto Finished;
        location Finished:
          marked;
          edge .Bridge.LTAS.Enabled15Timer.c_reset when DisablementGuard goto Off;
      end
      plant automaton Enabled20Timer:
        alg bool EnablementGuard = Enabled;
        alg bool DisablementGuard = not Enabled;
        location Off:
          initial;
          marked;
          edge .Bridge.LTAS.Enabled20Timer.c_on when EnablementGuard goto On;
        location On:
          edge .Bridge.LTAS.Enabled20Timer.c_reset when DisablementGuard goto Off;
          edge .Bridge.LTAS.Enabled20Timer.u_timeout goto Finished;
        location Finished:
          marked;
          edge .Bridge.LTAS.Enabled20Timer.c_reset when DisablementGuard goto Off;
      end
      plant automaton NearDisabledTimer:
        alg bool EnablementGuard = NearDisabled;
        alg bool DisablementGuard = not NearDisabled;
        location Off:
          initial;
          marked;
          edge .Bridge.LTAS.NearDisabledTimer.c_on when EnablementGuard goto On;
        location On:
          edge .Bridge.LTAS.NearDisabledTimer.c_reset when DisablementGuard goto Off;
          edge .Bridge.LTAS.NearDisabledTimer.u_timeout goto Finished;
        location Finished:
          marked;
          edge .Bridge.LTAS.NearDisabledTimer.c_reset when DisablementGuard goto Off;
      end
    end
    group LTSS:
      alg bool Enabled = StopSign1.On and StopSign2.On and StopSign3.On and StopSign4.On and StopSign5.On and StopSign6.On and StopSign7.On and StopSign8.On and StopSign9.On and StopSign10.On and StopSign11.On and StopSign12.On and MainLaneActuator.On and SwitchLaneActuator.On;
      alg bool Disabled = StopSign1.Off and StopSign2.Off and StopSign3.Off and StopSign4.Off and StopSign5.Off and StopSign6.Off and StopSign7.Off and StopSign8.Off and StopSign9.Off and StopSign10.Off and StopSign11.Off and StopSign12.Off and MainLaneActuator.Off and SwitchLaneActuator.Off;
      alg bool EnabledTimeOk = EnabledTimer.Finished and Enabled;
      alg bool DisabledTimeOk = DisabledTimer.Finished and Disabled;
      plant automaton MainLaneActuator:
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          marked not InitialLocationOn;
          edge .Bridge.LTSS.MainLaneActuator.c_on goto On;
        location On:
          initial InitialLocationOn;
          marked InitialLocationOn;
          edge .Bridge.LTSS.MainLaneActuator.c_off goto Off;
      end
      plant automaton SwitchLaneActuator:
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          marked not InitialLocationOn;
          edge .Bridge.LTSS.SwitchLaneActuator.c_on goto On;
        location On:
          initial InitialLocationOn;
          marked InitialLocationOn;
          edge .Bridge.LTSS.SwitchLaneActuator.c_off goto Off;
      end
      group StopSign1:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTSS.StopSign1.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTSS.StopSign1.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = SwitchLaneActuator.On;
          alg bool Off = SwitchLaneActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTSS.StopSign1.Sensor.u_on when On;
            edge .Bridge.LTSS.StopSign1.Sensor.u_off when Off;
        end
      end
      group StopSign2:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTSS.StopSign2.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTSS.StopSign2.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = SwitchLaneActuator.On;
          alg bool Off = SwitchLaneActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTSS.StopSign2.Sensor.u_on when On;
            edge .Bridge.LTSS.StopSign2.Sensor.u_off when Off;
        end
      end
      group StopSign3:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTSS.StopSign3.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTSS.StopSign3.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = SwitchLaneActuator.On;
          alg bool Off = SwitchLaneActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTSS.StopSign3.Sensor.u_on when On;
            edge .Bridge.LTSS.StopSign3.Sensor.u_off when Off;
        end
      end
      group StopSign4:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTSS.StopSign4.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTSS.StopSign4.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = SwitchLaneActuator.On;
          alg bool Off = SwitchLaneActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTSS.StopSign4.Sensor.u_on when On;
            edge .Bridge.LTSS.StopSign4.Sensor.u_off when Off;
        end
      end
      group StopSign5:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTSS.StopSign5.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTSS.StopSign5.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = MainLaneActuator.On;
          alg bool Off = MainLaneActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTSS.StopSign5.Sensor.u_on when On;
            edge .Bridge.LTSS.StopSign5.Sensor.u_off when Off;
        end
      end
      group StopSign6:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTSS.StopSign6.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTSS.StopSign6.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = MainLaneActuator.On;
          alg bool Off = MainLaneActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTSS.StopSign6.Sensor.u_on when On;
            edge .Bridge.LTSS.StopSign6.Sensor.u_off when Off;
        end
      end
      group StopSign7:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTSS.StopSign7.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTSS.StopSign7.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = MainLaneActuator.On;
          alg bool Off = MainLaneActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTSS.StopSign7.Sensor.u_on when On;
            edge .Bridge.LTSS.StopSign7.Sensor.u_off when Off;
        end
      end
      group StopSign8:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTSS.StopSign8.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTSS.StopSign8.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = MainLaneActuator.On;
          alg bool Off = MainLaneActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTSS.StopSign8.Sensor.u_on when On;
            edge .Bridge.LTSS.StopSign8.Sensor.u_off when Off;
        end
      end
      group StopSign9:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTSS.StopSign9.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTSS.StopSign9.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = MainLaneActuator.On;
          alg bool Off = MainLaneActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTSS.StopSign9.Sensor.u_on when On;
            edge .Bridge.LTSS.StopSign9.Sensor.u_off when Off;
        end
      end
      group StopSign10:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTSS.StopSign10.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTSS.StopSign10.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = MainLaneActuator.On;
          alg bool Off = MainLaneActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTSS.StopSign10.Sensor.u_on when On;
            edge .Bridge.LTSS.StopSign10.Sensor.u_off when Off;
        end
      end
      group StopSign11:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTSS.StopSign11.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTSS.StopSign11.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = MainLaneActuator.On;
          alg bool Off = MainLaneActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTSS.StopSign11.Sensor.u_on when On;
            edge .Bridge.LTSS.StopSign11.Sensor.u_off when Off;
        end
      end
      group StopSign12:
        alg bool On = Sensor.On;
        alg bool Off = Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTSS.StopSign12.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTSS.StopSign12.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = MainLaneActuator.On;
          alg bool Off = MainLaneActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTSS.StopSign12.Sensor.u_on when On;
            edge .Bridge.LTSS.StopSign12.Sensor.u_off when Off;
        end
      end
      plant automaton EnabledTimer:
        alg bool EnablementGuard = Enabled;
        alg bool DisablementGuard = not Enabled;
        location Off:
          initial;
          marked;
          edge .Bridge.LTSS.EnabledTimer.c_on when EnablementGuard goto On;
        location On:
          edge .Bridge.LTSS.EnabledTimer.c_reset when DisablementGuard goto Off;
          edge .Bridge.LTSS.EnabledTimer.u_timeout goto Finished;
        location Finished:
          marked;
          edge .Bridge.LTSS.EnabledTimer.c_reset when DisablementGuard goto Off;
      end
      plant automaton DisabledTimer:
        alg bool EnablementGuard = Disabled;
        alg bool DisablementGuard = not Disabled;
        location Off:
          initial;
          marked;
          edge .Bridge.LTSS.DisabledTimer.c_on when EnablementGuard goto On;
        location On:
          edge .Bridge.LTSS.DisabledTimer.c_reset when DisablementGuard goto Off;
          edge .Bridge.LTSS.DisabledTimer.u_timeout goto Finished;
        location Finished:
          marked;
          edge .Bridge.LTSS.DisabledTimer.c_reset when DisablementGuard goto Off;
      end
    end
    group Barriers:
      alg bool EnteringClosed = B3.Closed and B6.Closed;
      alg bool LeavingClosed = B2.Closed and B7.Closed;
      alg bool LeavingOpen = B2.Open and B7.Open;
      alg bool LTClosed = B4.Closed and B8.Closed;
      alg bool AllClosed = B1.Closed and B2.Closed and B3.Closed and B4.Closed and B5.Closed and B6.Closed and B7.Closed and B8.Closed;
      alg bool AllOpen = B1.Open and B2.Open and B3.Open and B4.Open and B5.Open and B6.Open and B7.Open and B8.Open;
      alg bool EnteringClosedTimeOk = EnteringClosedTimer.Finished and EnteringClosed;
      alg bool LeavingOpenTimeOk = LeavingOpenTimer.Finished and LeavingOpen;
      alg bool LTSoundSignalTimeOk = LTSoundSignalTimer.Finished and LTSoundSignals.On;
      group B1:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = false;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Bridge.Barriers.B1.Actuator.c_open goto Opening;
            edge .Bridge.Barriers.B1.Actuator.c_close goto Closing;
          location Opening:
            edge .Bridge.Barriers.B1.Actuator.c_stop, .Bridge.Barriers.B1.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Bridge.Barriers.B1.Actuator.c_stop, .Bridge.Barriers.B1.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Bridge.Barriers.B1.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Bridge.Barriers.B1.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Bridge.Barriers.B1.Sensor.u_closed_on goto Closed;
            edge .Bridge.Barriers.B1.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Bridge.Barriers.B1.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Bridge.Barriers.B1.Sensor.u_open_on, .Bridge.Barriers.B1.Sensor.u_closed_off when Actuator.Opening;
            edge .Bridge.Barriers.B1.Sensor.u_closed_on, .Bridge.Barriers.B1.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Bridge.Barriers.B1.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Bridge.Barriers.B1.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Bridge.Barriers.B1.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Bridge.Barriers.B1.Actuator.c_close needs not Sensor.Closed;
      end
      group B2:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = false;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Bridge.Barriers.B2.Actuator.c_open goto Opening;
            edge .Bridge.Barriers.B2.Actuator.c_close goto Closing;
          location Opening:
            edge .Bridge.Barriers.B2.Actuator.c_stop, .Bridge.Barriers.B2.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Bridge.Barriers.B2.Actuator.c_stop, .Bridge.Barriers.B2.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Bridge.Barriers.B2.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Bridge.Barriers.B2.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Bridge.Barriers.B2.Sensor.u_closed_on goto Closed;
            edge .Bridge.Barriers.B2.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Bridge.Barriers.B2.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Bridge.Barriers.B2.Sensor.u_open_on, .Bridge.Barriers.B2.Sensor.u_closed_off when Actuator.Opening;
            edge .Bridge.Barriers.B2.Sensor.u_closed_on, .Bridge.Barriers.B2.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Bridge.Barriers.B2.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Bridge.Barriers.B2.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Bridge.Barriers.B2.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Bridge.Barriers.B2.Actuator.c_close needs not Sensor.Closed;
      end
      group B3:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = false;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Bridge.Barriers.B3.Actuator.c_open goto Opening;
            edge .Bridge.Barriers.B3.Actuator.c_close goto Closing;
          location Opening:
            edge .Bridge.Barriers.B3.Actuator.c_stop, .Bridge.Barriers.B3.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Bridge.Barriers.B3.Actuator.c_stop, .Bridge.Barriers.B3.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Bridge.Barriers.B3.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Bridge.Barriers.B3.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Bridge.Barriers.B3.Sensor.u_closed_on goto Closed;
            edge .Bridge.Barriers.B3.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Bridge.Barriers.B3.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Bridge.Barriers.B3.Sensor.u_open_on, .Bridge.Barriers.B3.Sensor.u_closed_off when Actuator.Opening;
            edge .Bridge.Barriers.B3.Sensor.u_closed_on, .Bridge.Barriers.B3.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Bridge.Barriers.B3.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Bridge.Barriers.B3.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Bridge.Barriers.B3.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Bridge.Barriers.B3.Actuator.c_close needs not Sensor.Closed;
      end
      group B4:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = false;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Bridge.Barriers.B4.Actuator.c_open goto Opening;
            edge .Bridge.Barriers.B4.Actuator.c_close goto Closing;
          location Opening:
            edge .Bridge.Barriers.B4.Actuator.c_stop, .Bridge.Barriers.B4.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Bridge.Barriers.B4.Actuator.c_stop, .Bridge.Barriers.B4.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Bridge.Barriers.B4.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Bridge.Barriers.B4.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Bridge.Barriers.B4.Sensor.u_closed_on goto Closed;
            edge .Bridge.Barriers.B4.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Bridge.Barriers.B4.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Bridge.Barriers.B4.Sensor.u_open_on, .Bridge.Barriers.B4.Sensor.u_closed_off when Actuator.Opening;
            edge .Bridge.Barriers.B4.Sensor.u_closed_on, .Bridge.Barriers.B4.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Bridge.Barriers.B4.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Bridge.Barriers.B4.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Bridge.Barriers.B4.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Bridge.Barriers.B4.Actuator.c_close needs not Sensor.Closed;
      end
      group B5:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = false;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Bridge.Barriers.B5.Actuator.c_open goto Opening;
            edge .Bridge.Barriers.B5.Actuator.c_close goto Closing;
          location Opening:
            edge .Bridge.Barriers.B5.Actuator.c_stop, .Bridge.Barriers.B5.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Bridge.Barriers.B5.Actuator.c_stop, .Bridge.Barriers.B5.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Bridge.Barriers.B5.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Bridge.Barriers.B5.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Bridge.Barriers.B5.Sensor.u_closed_on goto Closed;
            edge .Bridge.Barriers.B5.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Bridge.Barriers.B5.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Bridge.Barriers.B5.Sensor.u_open_on, .Bridge.Barriers.B5.Sensor.u_closed_off when Actuator.Opening;
            edge .Bridge.Barriers.B5.Sensor.u_closed_on, .Bridge.Barriers.B5.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Bridge.Barriers.B5.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Bridge.Barriers.B5.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Bridge.Barriers.B5.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Bridge.Barriers.B5.Actuator.c_close needs not Sensor.Closed;
      end
      group B6:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = false;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Bridge.Barriers.B6.Actuator.c_open goto Opening;
            edge .Bridge.Barriers.B6.Actuator.c_close goto Closing;
          location Opening:
            edge .Bridge.Barriers.B6.Actuator.c_stop, .Bridge.Barriers.B6.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Bridge.Barriers.B6.Actuator.c_stop, .Bridge.Barriers.B6.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Bridge.Barriers.B6.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Bridge.Barriers.B6.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Bridge.Barriers.B6.Sensor.u_closed_on goto Closed;
            edge .Bridge.Barriers.B6.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Bridge.Barriers.B6.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Bridge.Barriers.B6.Sensor.u_open_on, .Bridge.Barriers.B6.Sensor.u_closed_off when Actuator.Opening;
            edge .Bridge.Barriers.B6.Sensor.u_closed_on, .Bridge.Barriers.B6.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Bridge.Barriers.B6.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Bridge.Barriers.B6.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Bridge.Barriers.B6.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Bridge.Barriers.B6.Actuator.c_close needs not Sensor.Closed;
      end
      group B7:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = false;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Bridge.Barriers.B7.Actuator.c_open goto Opening;
            edge .Bridge.Barriers.B7.Actuator.c_close goto Closing;
          location Opening:
            edge .Bridge.Barriers.B7.Actuator.c_stop, .Bridge.Barriers.B7.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Bridge.Barriers.B7.Actuator.c_stop, .Bridge.Barriers.B7.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Bridge.Barriers.B7.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Bridge.Barriers.B7.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Bridge.Barriers.B7.Sensor.u_closed_on goto Closed;
            edge .Bridge.Barriers.B7.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Bridge.Barriers.B7.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Bridge.Barriers.B7.Sensor.u_open_on, .Bridge.Barriers.B7.Sensor.u_closed_off when Actuator.Opening;
            edge .Bridge.Barriers.B7.Sensor.u_closed_on, .Bridge.Barriers.B7.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Bridge.Barriers.B7.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Bridge.Barriers.B7.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Bridge.Barriers.B7.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Bridge.Barriers.B7.Actuator.c_close needs not Sensor.Closed;
      end
      group B8:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = false;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Bridge.Barriers.B8.Actuator.c_open goto Opening;
            edge .Bridge.Barriers.B8.Actuator.c_close goto Closing;
          location Opening:
            edge .Bridge.Barriers.B8.Actuator.c_stop, .Bridge.Barriers.B8.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Bridge.Barriers.B8.Actuator.c_stop, .Bridge.Barriers.B8.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Bridge.Barriers.B8.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Bridge.Barriers.B8.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Bridge.Barriers.B8.Sensor.u_closed_on goto Closed;
            edge .Bridge.Barriers.B8.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Bridge.Barriers.B8.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Bridge.Barriers.B8.Sensor.u_open_on, .Bridge.Barriers.B8.Sensor.u_closed_off when Actuator.Opening;
            edge .Bridge.Barriers.B8.Sensor.u_closed_on, .Bridge.Barriers.B8.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Bridge.Barriers.B8.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Bridge.Barriers.B8.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Bridge.Barriers.B8.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Bridge.Barriers.B8.Actuator.c_close needs not Sensor.Closed;
      end
      plant automaton LightSignals:
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          marked not InitialLocationOn;
          edge .Bridge.Barriers.LightSignals.c_on goto On;
        location On:
          initial InitialLocationOn;
          marked InitialLocationOn;
          edge .Bridge.Barriers.LightSignals.c_off goto Off;
      end
      plant automaton LTSoundSignals:
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          marked not InitialLocationOn;
          edge .Bridge.Barriers.LTSoundSignals.c_on goto On;
        location On:
          initial InitialLocationOn;
          marked InitialLocationOn;
          edge .Bridge.Barriers.LTSoundSignals.c_off goto Off;
      end
      plant automaton EnteringClosedTimer:
        alg bool EnablementGuard = EnteringClosed;
        alg bool DisablementGuard = not EnteringClosed;
        location Off:
          initial;
          marked;
          edge .Bridge.Barriers.EnteringClosedTimer.c_on when EnablementGuard goto On;
        location On:
          edge .Bridge.Barriers.EnteringClosedTimer.c_reset when DisablementGuard goto Off;
          edge .Bridge.Barriers.EnteringClosedTimer.u_timeout goto Finished;
        location Finished:
          marked;
          edge .Bridge.Barriers.EnteringClosedTimer.c_reset when DisablementGuard goto Off;
      end
      plant automaton LeavingOpenTimer:
        alg bool EnablementGuard = LeavingOpen;
        alg bool DisablementGuard = not LeavingOpen;
        location Off:
          initial;
          marked;
          edge .Bridge.Barriers.LeavingOpenTimer.c_on when EnablementGuard goto On;
        location On:
          edge .Bridge.Barriers.LeavingOpenTimer.c_reset when DisablementGuard goto Off;
          edge .Bridge.Barriers.LeavingOpenTimer.u_timeout goto Finished;
        location Finished:
          marked;
          edge .Bridge.Barriers.LeavingOpenTimer.c_reset when DisablementGuard goto Off;
      end
      plant automaton LTSoundSignalTimer:
        alg bool EnablementGuard = LTSoundSignals.On;
        alg bool DisablementGuard = LTSoundSignals.Off;
        location Off:
          initial;
          marked;
          edge .Bridge.Barriers.LTSoundSignalTimer.c_on when EnablementGuard goto On;
        location On:
          edge .Bridge.Barriers.LTSoundSignalTimer.c_reset when DisablementGuard goto Off;
          edge .Bridge.Barriers.LTSoundSignalTimer.u_timeout goto Finished;
        location Finished:
          marked;
          edge .Bridge.Barriers.LTSoundSignalTimer.c_reset when DisablementGuard goto Off;
      end
    end
    group Deck:
      alg bool Moving = not Actuator.Rest;
      alg bool Closed = Actuator.Rest and Sensor.Closed;
      alg bool Open = Actuator.Rest and Sensor.Open;
      alg bool InitialLocationClosed = true;
      plant automaton Actuator:
        location Rest:
          initial;
          marked;
          edge .Bridge.Deck.Actuator.c_open goto Opening;
          edge .Bridge.Deck.Actuator.c_close goto Closing;
        location Opening:
          edge .Bridge.Deck.Actuator.c_stop, .Bridge.Deck.Actuator.c_endStopOpening goto Rest;
        location Closing:
          edge .Bridge.Deck.Actuator.c_stop, .Bridge.Deck.Actuator.c_endStopClosing goto Rest;
      end
      plant automaton Sensor:
        alg bool InitialLocationClosed = .sup.Bridge.Deck.InitialLocationClosed;
        location Closed:
          initial InitialLocationClosed;
          marked InitialLocationClosed;
          edge .Bridge.Deck.Sensor.u_closed_off goto Intermediate;
        location Intermediate:
          edge .Bridge.Deck.Sensor.u_closed_on goto Closed;
          edge .Bridge.Deck.Sensor.u_open_on goto Open;
        location Open:
          initial not InitialLocationClosed;
          marked not InitialLocationClosed;
          edge .Bridge.Deck.Sensor.u_open_off goto Intermediate;
      end
      plant automaton Dynamics:
        location:
          initial;
          marked;
          edge .Bridge.Deck.Sensor.u_open_on, .Bridge.Deck.Sensor.u_closed_off when Actuator.Opening;
          edge .Bridge.Deck.Sensor.u_closed_on, .Bridge.Deck.Sensor.u_open_off when Actuator.Closing;
      end
      requirement invariant .Bridge.Deck.Actuator.c_endStopOpening needs Sensor.Open;
      requirement invariant .Bridge.Deck.Actuator.c_endStopClosing needs Sensor.Closed;
      requirement invariant .Bridge.Deck.Actuator.c_open needs not Sensor.Open;
      requirement invariant .Bridge.Deck.Actuator.c_close needs not Sensor.Closed;
    end
    plant automaton CloseRequest:
      alg bool InitialLocationOn = false;
      location Off:
        initial not InitialLocationOn;
        marked not InitialLocationOn;
        edge .Bridge.CloseRequest.u_on goto On;
      location On:
        initial InitialLocationOn;
        marked InitialLocationOn;
        edge .Bridge.CloseRequest.u_off goto Off;
    end
  end
  supervisor automaton sup:
    alphabet .Bridge.LTAS.FarActuator.c_on, .Bridge.LTAS.FarActuator.c_off, .Bridge.LTAS.NearActuator.c_on, .Bridge.LTAS.NearActuator.c_off, .Bridge.LTAS.Enabled15Timer.c_on, .Bridge.LTAS.Enabled15Timer.c_reset, .Bridge.LTAS.Enabled20Timer.c_on, .Bridge.LTAS.Enabled20Timer.c_reset, .Bridge.LTAS.NearDisabledTimer.c_on, .Bridge.LTAS.NearDisabledTimer.c_reset, .Bridge.LTSS.MainLaneActuator.c_on, .Bridge.LTSS.MainLaneActuator.c_off, .Bridge.LTSS.SwitchLaneActuator.c_on, .Bridge.LTSS.SwitchLaneActuator.c_off, .Bridge.LTSS.EnabledTimer.c_on, .Bridge.LTSS.EnabledTimer.c_reset, .Bridge.LTSS.DisabledTimer.c_on, .Bridge.LTSS.DisabledTimer.c_reset, .Bridge.Barriers.B1.Actuator.c_open, .Bridge.Barriers.B1.Actuator.c_close, .Bridge.Barriers.B1.Actuator.c_stop, .Bridge.Barriers.B1.Actuator.c_endStopOpening, .Bridge.Barriers.B1.Actuator.c_endStopClosing, .Bridge.Barriers.B2.Actuator.c_open, .Bridge.Barriers.B2.Actuator.c_close, .Bridge.Barriers.B2.Actuator.c_stop, .Bridge.Barriers.B2.Actuator.c_endStopOpening, .Bridge.Barriers.B2.Actuator.c_endStopClosing, .Bridge.Barriers.B3.Actuator.c_open, .Bridge.Barriers.B3.Actuator.c_close, .Bridge.Barriers.B3.Actuator.c_stop, .Bridge.Barriers.B3.Actuator.c_endStopOpening, .Bridge.Barriers.B3.Actuator.c_endStopClosing, .Bridge.Barriers.B4.Actuator.c_open, .Bridge.Barriers.B4.Actuator.c_close, .Bridge.Barriers.B4.Actuator.c_stop, .Bridge.Barriers.B4.Actuator.c_endStopOpening, .Bridge.Barriers.B4.Actuator.c_endStopClosing, .Bridge.Barriers.B5.Actuator.c_open, .Bridge.Barriers.B5.Actuator.c_close, .Bridge.Barriers.B5.Actuator.c_stop, .Bridge.Barriers.B5.Actuator.c_endStopOpening, .Bridge.Barriers.B5.Actuator.c_endStopClosing, .Bridge.Barriers.B6.Actuator.c_open, .Bridge.Barriers.B6.Actuator.c_close, .Bridge.Barriers.B6.Actuator.c_stop, .Bridge.Barriers.B6.Actuator.c_endStopOpening, .Bridge.Barriers.B6.Actuator.c_endStopClosing, .Bridge.Barriers.B7.Actuator.c_open, .Bridge.Barriers.B7.Actuator.c_close, .Bridge.Barriers.B7.Actuator.c_stop, .Bridge.Barriers.B7.Actuator.c_endStopOpening, .Bridge.Barriers.B7.Actuator.c_endStopClosing, .Bridge.Barriers.B8.Actuator.c_open, .Bridge.Barriers.B8.Actuator.c_close, .Bridge.Barriers.B8.Actuator.c_stop, .Bridge.Barriers.B8.Actuator.c_endStopOpening, .Bridge.Barriers.B8.Actuator.c_endStopClosing, .Bridge.Barriers.LightSignals.c_on, .Bridge.Barriers.LightSignals.c_off, .Bridge.Barriers.LTSoundSignals.c_on, .Bridge.Barriers.LTSoundSignals.c_off, .Bridge.Barriers.EnteringClosedTimer.c_on, .Bridge.Barriers.EnteringClosedTimer.c_reset, .Bridge.Barriers.LeavingOpenTimer.c_on, .Bridge.Barriers.LeavingOpenTimer.c_reset, .Bridge.Barriers.LTSoundSignalTimer.c_on, .Bridge.Barriers.LTSoundSignalTimer.c_reset, .Bridge.Deck.Actuator.c_open, .Bridge.Deck.Actuator.c_close, .Bridge.Deck.Actuator.c_stop, .Bridge.Deck.Actuator.c_endStopOpening, .Bridge.Deck.Actuator.c_endStopClosing;
    location:
      initial;
      marked;
      edge .Bridge.Barriers.B1.Actuator.c_close when true;
      edge .Bridge.Barriers.B1.Actuator.c_endStopClosing when true;
      edge .Bridge.Barriers.B1.Actuator.c_endStopOpening when true;
      edge .Bridge.Barriers.B1.Actuator.c_open when true;
      edge .Bridge.Barriers.B1.Actuator.c_stop when true;
      edge .Bridge.Barriers.B2.Actuator.c_close when true;
      edge .Bridge.Barriers.B2.Actuator.c_endStopClosing when true;
      edge .Bridge.Barriers.B2.Actuator.c_endStopOpening when true;
      edge .Bridge.Barriers.B2.Actuator.c_open when true;
      edge .Bridge.Barriers.B2.Actuator.c_stop when true;
      edge .Bridge.Barriers.B3.Actuator.c_close when true;
      edge .Bridge.Barriers.B3.Actuator.c_endStopClosing when true;
      edge .Bridge.Barriers.B3.Actuator.c_endStopOpening when true;
      edge .Bridge.Barriers.B3.Actuator.c_open when true;
      edge .Bridge.Barriers.B3.Actuator.c_stop when true;
      edge .Bridge.Barriers.B4.Actuator.c_close when true;
      edge .Bridge.Barriers.B4.Actuator.c_endStopClosing when true;
      edge .Bridge.Barriers.B4.Actuator.c_endStopOpening when true;
      edge .Bridge.Barriers.B4.Actuator.c_open when true;
      edge .Bridge.Barriers.B4.Actuator.c_stop when true;
      edge .Bridge.Barriers.B5.Actuator.c_close when true;
      edge .Bridge.Barriers.B5.Actuator.c_endStopClosing when true;
      edge .Bridge.Barriers.B5.Actuator.c_endStopOpening when true;
      edge .Bridge.Barriers.B5.Actuator.c_open when true;
      edge .Bridge.Barriers.B5.Actuator.c_stop when true;
      edge .Bridge.Barriers.B6.Actuator.c_close when true;
      edge .Bridge.Barriers.B6.Actuator.c_endStopClosing when true;
      edge .Bridge.Barriers.B6.Actuator.c_endStopOpening when true;
      edge .Bridge.Barriers.B6.Actuator.c_open when true;
      edge .Bridge.Barriers.B6.Actuator.c_stop when true;
      edge .Bridge.Barriers.B7.Actuator.c_close when true;
      edge .Bridge.Barriers.B7.Actuator.c_endStopClosing when true;
      edge .Bridge.Barriers.B7.Actuator.c_endStopOpening when true;
      edge .Bridge.Barriers.B7.Actuator.c_open when true;
      edge .Bridge.Barriers.B7.Actuator.c_stop when true;
      edge .Bridge.Barriers.B8.Actuator.c_close when true;
      edge .Bridge.Barriers.B8.Actuator.c_endStopClosing when true;
      edge .Bridge.Barriers.B8.Actuator.c_endStopOpening when true;
      edge .Bridge.Barriers.B8.Actuator.c_open when true;
      edge .Bridge.Barriers.B8.Actuator.c_stop when true;
      edge .Bridge.Barriers.EnteringClosedTimer.c_on when true;
      edge .Bridge.Barriers.EnteringClosedTimer.c_reset when true;
      edge .Bridge.Barriers.LeavingOpenTimer.c_on when true;
      edge .Bridge.Barriers.LeavingOpenTimer.c_reset when true;
      edge .Bridge.Barriers.LightSignals.c_off when true;
      edge .Bridge.Barriers.LightSignals.c_on when true;
      edge .Bridge.Barriers.LTSoundSignals.c_off when true;
      edge .Bridge.Barriers.LTSoundSignals.c_on when true;
      edge .Bridge.Barriers.LTSoundSignalTimer.c_on when true;
      edge .Bridge.Barriers.LTSoundSignalTimer.c_reset when true;
      edge .Bridge.Deck.Actuator.c_close when true;
      edge .Bridge.Deck.Actuator.c_endStopClosing when true;
      edge .Bridge.Deck.Actuator.c_endStopOpening when true;
      edge .Bridge.Deck.Actuator.c_open when true;
      edge .Bridge.Deck.Actuator.c_stop when true;
      edge .Bridge.LTAS.Enabled15Timer.c_on when true;
      edge .Bridge.LTAS.Enabled15Timer.c_reset when true;
      edge .Bridge.LTAS.Enabled20Timer.c_on when true;
      edge .Bridge.LTAS.Enabled20Timer.c_reset when true;
      edge .Bridge.LTAS.FarActuator.c_off when true;
      edge .Bridge.LTAS.FarActuator.c_on when true;
      edge .Bridge.LTAS.NearActuator.c_off when true;
      edge .Bridge.LTAS.NearActuator.c_on when true;
      edge .Bridge.LTAS.NearDisabledTimer.c_on when true;
      edge .Bridge.LTAS.NearDisabledTimer.c_reset when true;
      edge .Bridge.LTSS.DisabledTimer.c_on when true;
      edge .Bridge.LTSS.DisabledTimer.c_reset when true;
      edge .Bridge.LTSS.EnabledTimer.c_on when true;
      edge .Bridge.LTSS.EnabledTimer.c_reset when true;
      edge .Bridge.LTSS.MainLaneActuator.c_off when true;
      edge .Bridge.LTSS.MainLaneActuator.c_on when true;
      edge .Bridge.LTSS.SwitchLaneActuator.c_off when true;
      edge .Bridge.LTSS.SwitchLaneActuator.c_on when true;
  end
end
