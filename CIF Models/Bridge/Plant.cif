import "../Templates/Plant.cif";

group Bridge:
    //User-interface plants for Land Traffic, barriers, and bridge deck
    group UI:
        LT        : LandTrafficCommands();
        Barrier1  : MovableComponentsCommands(true);
        Barrier27 : MovableComponentsCommands(true);
        Barrier36 : MovableComponentsCommands(true);
        Barrier48 : MovableComponentsCommands(true);
        Barrier5  : MovableComponentsCommands(true);

        Deck      : MovableComponentsCommands(false);
    end

    //Emergency Stop at the bridge or from the control UI
    EmergencyStop : EmergencyStopCommand();

    //Land Traffic Approach Signs
    //#FarOn           - True if the far approach sign actuator and sensors are On.
    //#NearOn          - True if the near approach sign actuator and sensors are On.
    //#On              - True if the far and near approach sign actuators and sensors are On.
    //#NearOff         - True if the near approach sign actuator and sensors are Off.
    //#On15TimeOk      - True if the approach signs are On for 15 seconds.
    //#On20TimeOk      - True if the approach signs are On for 20 seconds.
    //#NearOff60TimeOk - True if the near approach signs are Off for 60 seconds.
    group LTAS:
        FarActuator   : SingleOutputActuator(false);
        NearActuator  : SingleOutputActuator(false);
        ApproachSign1 : SingleLampSign(FarActuator);
        ApproachSign2 : SingleLampSign(FarActuator);
        ApproachSign3 : SingleLampSign(NearActuator);
        ApproachSign4 : SingleLampSign(NearActuator);
        ApproachSign5 : SingleLampSign(NearActuator);

        alg bool FarOn   = ApproachSign1.On and ApproachSign2.On and FarActuator.On;
        alg bool NearOn  = ApproachSign3.On and ApproachSign4.On and ApproachSign5.On and NearActuator.On;
        alg bool On      = FarOn and NearOn;
        alg bool NearOff = ApproachSign3.Off and ApproachSign4.Off and ApproachSign5.Off and NearActuator.Off;

        On15Timer      : Timer(On,      not On);
        On20Timer      : Timer(On,      not On);
        NearOff60Timer : Timer(NearOff, not NearOff);

        alg bool On15TimeOk      = On15Timer.Finished      and On;
        alg bool On20TimeOk      = On20Timer.Finished      and On;
        alg bool OffNear60TimeOk = NearOff60Timer.Finished and NearOff;
    end

    //Land Traffic Stop Signs
    //#On           - True if all stop sign actuators and sensors are On.
    //#Off          - True if all the stop sign actuators and sensors are Off.
    //#On15TimeOk   - True if the stop signs are On for 15 seconds.
    //#Off60TimeOk  - True if the stop signs are Off for 60 seconds.
    group LTSS:
        MainLaneActuator   : SingleOutputActuator(false);
        SwitchLaneActuator : SingleOutputActuator(false);

        StopSign1  : SingleLampSign(SwitchLaneActuator); StopSign2  : SingleLampSign(SwitchLaneActuator);
        StopSign3  : SingleLampSign(SwitchLaneActuator); StopSign4  : SingleLampSign(SwitchLaneActuator);
        StopSign5  : SingleLampSign(MainLaneActuator);   StopSign6  : SingleLampSign(MainLaneActuator);
        StopSign7  : SingleLampSign(MainLaneActuator);   StopSign8  : SingleLampSign(MainLaneActuator);
        StopSign9  : SingleLampSign(MainLaneActuator);   StopSign10 : SingleLampSign(MainLaneActuator);
        StopSign11 : SingleLampSign(MainLaneActuator);   StopSign12 : SingleLampSign(MainLaneActuator);

        alg bool On  = StopSign1.On  and StopSign2.On   and StopSign3.On   and StopSign4.On  and
                       StopSign5.On  and StopSign6.On   and StopSign7.On   and StopSign8.On  and
                       StopSign9.On  and StopSign10.On  and StopSign11.On  and StopSign12.On and
                       MainLaneActuator.On and SwitchLaneActuator.On;

        alg bool Off = StopSign1.Off and StopSign2.Off  and StopSign3.Off  and StopSign4.Off  and
                       StopSign5.Off and StopSign6.Off  and StopSign7.Off  and StopSign8.Off  and
                       StopSign9.Off and StopSign10.Off and StopSign11.Off and StopSign12.Off and
                       MainLaneActuator.Off and SwitchLaneActuator.Off;

        On15Timer  : Timer(On,  not On);
        Off60Timer : Timer(Off, not Off);
        alg bool On15TimeOk  = On15Timer.Finished  and On;
        alg bool Off60TimeOk = Off60Timer.Finished and Off;
    end

    //Bridge Barriers
    //#EnteringClosed   - True if the entering barriers (3 & 6) are Closed.
    //#LeavingClosed    - True if the leaving  barriers (2 & 7) are Closed.
    //#LeavingClosed    - True if the leaving  barriers (2 & 7) are Open.
    //#SlowClosed       - True if the slow-traffic barriers (4 & 8) are Closed.
    //#Closed           - True if all barriers (1, ..., 8) are Closed.
    //#Open             - True if all barriers (1, ..., 8) are Open.
    //#B3B6ClosedTimeOk - True if the entering barriers are Closed for 1 second.
    //#B2B7Open1TimeOk  - True if the leaving  barriers are Open for 1 second.
    //#LTSoundSignalTimeOk  - True if the sound signal is On for X seconds.
    group Barriers:
        B1 : DoubleInputDoubleOutput(false); B2 : DoubleInputDoubleOutput(false); B3 : DoubleInputDoubleOutput(false);
        B4 : DoubleInputDoubleOutput(false); B5 : DoubleInputDoubleOutput(false); B6 :DoubleInputDoubleOutput(false);
        B7 : DoubleInputDoubleOutput(false); B8 : DoubleInputDoubleOutput(false);
        LightSignals   : SingleOutputActuator(false);
        SoundSignals : SingleOutputActuator(false);

        alg bool EnteringClosed = B3.Closed and B6.Closed;
        alg bool LeavingClosed  = B2.Closed and B7.Closed;
        alg bool LeavingOpen    = B2.Open   and B7.Open;
        alg bool SlowClosed     = B4.Closed and B8.Closed;
        alg bool Closed         = B1.Closed and B2.Closed and B3.Closed and B4.Closed and
                                  B5.Closed and B6.Closed and B7.Closed and B8.Closed;
        alg bool Open           = B1.Open   and B2.Open   and B3.Open   and B4.Open   and
                                  B5.Open   and B6.Open   and B7.Open   and B8.Open;
        B3B6Closed1Timer    : Timer(EnteringClosed, not EnteringClosed);
        B2B7Open1Timer      : Timer(LeavingOpen,    not LeavingOpen);
        SoundOn6Timer       : Timer(SoundSignals.On, SoundSignals.Off);

        alg bool B3B6Closed1TimeOk  = B3B6Closed1Timer.Finished and EnteringClosed;
        alg bool B2B7Open1TimeOk    = B2B7Open1Timer.Finished   and LeavingOpen;
        alg bool SoundOn6TimeOk     = SoundOn6Timer.Finished    and SoundSignals.On;
    end

    //Bridge Deck
    Deck : DoubleInputDoubleOutput(true);

    //Close request from the emergency center
    CloseRequest : SingleInputSensor(false);
end
