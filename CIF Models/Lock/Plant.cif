import "../Templates/Plant.cif";

group Lock:
    group UI:
        UEbbGate            : MovableComponentsCommands(false);
        UFloodGate          : MovableComponentsCommands(false);
        DEbbGate            : MovableComponentsCommands(false);
        DFloodGate          : MovableComponentsCommands(false);
        DStormFloodGate     : MovableComponentsCommands(false);

        UEbbPaddle           : MovableComponentsCommands(false);
        UFloodPaddle        : MovableComponentsCommands(false);
        DEbbPaddle          : MovableComponentsCommands(false);
        DFloodPaddle        : MovableComponentsCommands(false);
        DStormFloodPaddle   : MovableComponentsCommands(false);

        DLockTrafficLight   : LockTrafficLightCommands();
        ULockTrafficLight   : LockTrafficLightCommands();

        DBridgeTraffigLight : BridgeTrafficLightCommands();
    end

    //Emergency Stop at the lock.
    EmergencyStop : EmergencyStopCommand();

    //Lock traffic lights
    //@DRed    - True when both downstream traffic lights display a red aspect.
    //@DRedRed - True when both downstream traffic lights display a double red aspect.
    //@URed    - True when both upstream   traffic lights display a red aspect.
    //@URedRed - True when both upstream   traffic lights display a double red aspect.
    group LTL:
        DE : LockTrafficLight(); DW : LockTrafficLight();
        UE : LockTrafficLight(); UW : LockTrafficLight();
        alg bool DRed    = (DE.Red    and DW.Red);
        alg bool DRedRed = (DE.RedRed and DW.RedRed);
        alg bool URed    = (UE.Red    and UW.Red);
        alg bool URedRed = (UE.RedRed and UW.RedRed);
    end

    //Bridge traffic lights
    //@Red = True when both traffic lights display a red aspect.
    group BTL:
        DE : BridgeTrafficLight(); DW : BridgeTrafficLight();
        alg bool DRed = DE.Red and DW.Red;
    end

    //Sets of 2 gates and 2 paddles
    UpstreamEbb          : GatePaddleSet();
    UpstreamFlood        : GatePaddleSet();
    DownstreamEbb        : GatePaddleSet();
    DownstreamFlood      : GatePaddleSet();
    DownstreamStormFlood : GatePaddleSet();

    //Equal water sensors
    EqualWaterUpstream   : SingleInputSensor(false);
    EqualWaterDownstream : SingleInputSensor(true);
end
