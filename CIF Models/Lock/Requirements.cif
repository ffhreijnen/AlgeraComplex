import "Plant.cif";

group Requirement1: //The lock traffic light can only display a green sign aspect, when:
    //(a) the gates at that side are open
    requirement {Lock.LTL.DE.Actuator.c_g, Lock.LTL.DW.Actuator.c_g} needs
        Lock.DownstreamEbb.GatesOpen and Lock.DownstreamFlood.GatesOpen and
        Lock.DownstreamStormFlood.GatesOpen;

    requirement {Lock.LTL.UE.Actuator.c_g, Lock.LTL.UW.Actuator.c_g} needs
        Lock.UpstreamEbb.GatesOpen and Lock.UpstreamFlood.GatesOpen;

    //(b) the bridge traffic lights at that side display a red aspect (downstream only).
    requirement {Lock.LTL.DE.Actuator.c_g, Lock.LTL.DW.Actuator.c_g} needs
        Lock.BTL.DRed;
end

group Requirement2: //The bridge lights can only display a green aspect when:
    //(a) the gates at the downstream side are open
    requirement {Lock.BTL.DE.Actuator.c_g, Lock.BTL.DW.Actuator.c_g} needs
        Lock.DownstreamEbb.GatesOpen and Lock.DownstreamFlood.GatesOpen and
        Lock.DownstreamStormFlood.GatesOpen;

    //(b) the lock traffic lights at that side display a red or a double red aspect.
    requirement {Lock.BTL.DE.Actuator.c_g, Lock.BTL.DW.Actuator.c_g} needs
        Lock.LTL.DRed or Lock.LTL.DRedRed;
end

group Requirement3: //The gates can only close when:
    //(a) the lock traffic light at that side display a red or double red aspect.
    requirement {Lock.DownstreamEbb.EastGate.Actuator.c_close,
                 Lock.DownstreamEbb.WestGate.Actuator.c_close} needs
        Lock.LTL.DRed or Lock.LTL.DRedRed;

    requirement {Lock.DownstreamFlood.EastGate.Actuator.c_close,
                 Lock.DownstreamFlood.WestGate.Actuator.c_close} needs
        Lock.LTL.DRed or Lock.LTL.DRedRed;

    requirement {Lock.DownstreamStormFlood.EastGate.Actuator.c_close,
                 Lock.DownstreamStormFlood.WestGate.Actuator.c_close} needs
        Lock.LTL.DRed or Lock.LTL.DRedRed;

    requirement {Lock.UpstreamEbb.EastGate.Actuator.c_close,
                 Lock.UpstreamEbb.WestGate.Actuator.c_close} needs
        Lock.LTL.URed or Lock.LTL.URedRed;

    requirement {Lock.UpstreamFlood.EastGate.Actuator.c_close,
                 Lock.UpstreamFlood.WestGate.Actuator.c_close} needs
        Lock.LTL.URed or Lock.LTL.URedRed;

    //(b) the bridge traffic lights at that side display a red aspect (downstream only).
    requirement {Lock.DownstreamEbb.EastGate.Actuator.c_close,
                 Lock.DownstreamEbb.WestGate.Actuator.c_close} needs
        Lock.BTL.DRed;

    requirement {Lock.DownstreamFlood.EastGate.Actuator.c_close,
                 Lock.DownstreamFlood.WestGate.Actuator.c_close} needs
        Lock.BTL.DRed;

    requirement {Lock.DownstreamStormFlood.EastGate.Actuator.c_close,
                 Lock.DownstreamStormFlood.WestGate.Actuator.c_close} needs
        Lock.BTL.DRed;
end

group Requirement4: //The gates can only open when:
    //(a) at least one set of gates and its paddles at the other side is closed
    requirement {Lock.DownstreamEbb.EastGate.Actuator.c_open,
                 Lock.DownstreamEbb.WestGate.Actuator.c_open} needs
        Lock.UpstreamEbb.Closed or Lock.UpstreamFlood.Closed;

    requirement {Lock.DownstreamFlood.EastGate.Actuator.c_open,
                 Lock.DownstreamFlood.WestGate.Actuator.c_open} needs
        Lock.UpstreamEbb.Closed or Lock.UpstreamFlood.Closed;

    requirement {Lock.DownstreamStormFlood.EastGate.Actuator.c_open,
                 Lock.DownstreamStormFlood.WestGate.Actuator.c_open} needs
        Lock.UpstreamEbb.Closed or Lock.UpstreamFlood.Closed;

    requirement {Lock.UpstreamEbb.EastGate.Actuator.c_open,
                 Lock.UpstreamEbb.WestGate.Actuator.c_open} needs
        Lock.DownstreamEbb.Closed or Lock.DownstreamFlood.Closed or Lock.DownstreamStormFlood.Closed;

    requirement {Lock.UpstreamFlood.EastGate.Actuator.c_open,
                 Lock.UpstreamFlood.WestGate.Actuator.c_open} needs
        Lock.DownstreamEbb.Closed or Lock.DownstreamFlood.Closed or Lock.DownstreamStormFlood.Closed;

    //(b) there is equal water at that side.
    requirement {Lock.DownstreamEbb.EastGate.Actuator.c_open,
                 Lock.DownstreamEbb.WestGate.Actuator.c_open} needs
        Lock.EqualWaterDownstream.On;

    requirement {Lock.DownstreamFlood.EastGate.Actuator.c_open,
                 Lock.DownstreamFlood.WestGate.Actuator.c_open} needs
        Lock.EqualWaterDownstream.On;

    requirement {Lock.DownstreamStormFlood.EastGate.Actuator.c_open,
                 Lock.DownstreamStormFlood.WestGate.Actuator.c_open} needs
        Lock.EqualWaterDownstream.On;

    requirement {Lock.UpstreamEbb.EastGate.Actuator.c_open,
                 Lock.UpstreamEbb.WestGate.Actuator.c_open} needs
        Lock.EqualWaterUpstream.On;

    requirement {Lock.UpstreamFlood.EastGate.Actuator.c_open,
                 Lock.UpstreamFlood.WestGate.Actuator.c_open} needs
        Lock.EqualWaterUpstream.On;
end

group Requirement5: //The paddles can only open when at least one set of gates and its paddles at the other side is closed.
    requirement {Lock.DownstreamEbb.EastPaddle.Actuator.c_open,
                 Lock.DownstreamEbb.WestPaddle.Actuator.c_open} needs
        Lock.UpstreamEbb.Closed or Lock.UpstreamFlood.Closed;

    requirement {Lock.DownstreamFlood.EastPaddle.Actuator.c_open,
                 Lock.DownstreamFlood.WestPaddle.Actuator.c_open} needs
        Lock.UpstreamEbb.Closed or Lock.UpstreamFlood.Closed;

    requirement {Lock.DownstreamStormFlood.EastPaddle.Actuator.c_open,
                 Lock.DownstreamStormFlood.WestPaddle.Actuator.c_open} needs
        Lock.UpstreamEbb.Closed or Lock.UpstreamFlood.Closed;

    requirement {Lock.UpstreamEbb.EastPaddle.Actuator.c_open,
                 Lock.UpstreamEbb.WestPaddle.Actuator.c_open} needs
        Lock.DownstreamEbb.Closed or Lock.DownstreamFlood.Closed or Lock.DownstreamStormFlood.Closed;

    requirement {Lock.UpstreamFlood.EastPaddle.Actuator.c_open,
                 Lock.UpstreamFlood.WestPaddle.Actuator.c_open} needs
        Lock.DownstreamEbb.Closed or Lock.DownstreamFlood.Closed or Lock.DownstreamStormFlood.Closed;
end

group requirement6: //Whenever a gate is not closed, its paddles are open.
    requirement Lock.DownstreamEbb.EastGate.Closed        or Lock.DownstreamEbb.EastPaddle.Open;
    requirement Lock.DownstreamEbb.WestGate.Closed        or Lock.DownstreamEbb.WestPaddle.Open;
    requirement Lock.DownstreamFlood.EastGate.Closed      or Lock.DownstreamFlood.EastPaddle.Open;
    requirement Lock.DownstreamFlood.WestGate.Closed      or Lock.DownstreamFlood.WestPaddle.Open;
    requirement Lock.DownstreamStormFlood.EastGate.Closed or Lock.DownstreamStormFlood.EastPaddle.Open;
    requirement Lock.DownstreamStormFlood.WestGate.Closed or Lock.DownstreamStormFlood.WestPaddle.Open;
    requirement Lock.UpstreamEbb.EastGate.Closed          or Lock.UpstreamEbb.EastPaddle.Open;
    requirement Lock.UpstreamEbb.WestGate.Closed          or Lock.UpstreamEbb.WestPaddle.Open;
    requirement Lock.UpstreamFlood.EastGate.Closed        or Lock.UpstreamFlood.EastPaddle.Open;
    requirement Lock.UpstreamFlood.WestGate.Closed        or Lock.UpstreamFlood.WestPaddle.Open;
end

group requirement7: //When the emergency stop is active:
    group LTL:
        //(a) the red aspect has to be displayed
        requirement Lock.LTL.DE.Actuator.c_emrg needs
            Lock.EmergencyStop.Activated;

        requirement Lock.LTL.DW.Actuator.c_emrg needs
            Lock.EmergencyStop.Activated;

        requirement Lock.LTL.UE.Actuator.c_emrg needs
            Lock.EmergencyStop.Activated;

        requirement Lock.LTL.UW.Actuator.c_emrg needs
            Lock.EmergencyStop.Activated;

        //(b) no other aspects can be displayed.
        requirement {Lock.LTL.DE.Actuator.c_r, Lock.LTL.DE.Actuator.c_rg,
                     Lock.LTL.DE.Actuator.c_g, Lock.LTL.DE.Actuator.c_rr} needs
            Lock.EmergencyStop.Deactivated;

        requirement {Lock.LTL.DW.Actuator.c_r, Lock.LTL.DW.Actuator.c_rg,
                     Lock.LTL.DW.Actuator.c_g, Lock.LTL.DW.Actuator.c_rr} needs
            Lock.EmergencyStop.Deactivated;

        requirement {Lock.LTL.UE.Actuator.c_r, Lock.LTL.UE.Actuator.c_rg,
                     Lock.LTL.UE.Actuator.c_g, Lock.LTL.UE.Actuator.c_rr} needs
            Lock.EmergencyStop.Deactivated;

        requirement {Lock.LTL.UW.Actuator.c_r, Lock.LTL.UW.Actuator.c_rg,
                     Lock.LTL.UW.Actuator.c_g, Lock.LTL.UW.Actuator.c_rr} needs
            Lock.EmergencyStop.Deactivated;
    end
    group BTL:
        //(a) the red aspect has to be displayed
        requirement Lock.BTL.DE.Actuator.c_emrg needs
            Lock.EmergencyStop.Activated;

        requirement Lock.BTL.DW.Actuator.c_emrg needs
            Lock.EmergencyStop.Activated;

        //(b) no other aspects can be displayed.
        requirement {Lock.BTL.DE.Actuator.c_r, Lock.BTL.DE.Actuator.c_g} needs
            Lock.EmergencyStop.Deactivated;
        requirement {Lock.BTL.DW.Actuator.c_r, Lock.BTL.DW.Actuator.c_g} needs
            Lock.EmergencyStop.Deactivated;
    end
end

group requirement8and10: //Requirement 8 and 10 are initiated as a template for brevity.

    //Requirement 8 and 10
    //@c_open  - The open event.
    //@c_close - The close event.
    //@c_emrgStop  - the emergency stop event.
    //@MovableComponentsCommands - The template for the corresponding movable components commands.
    group def Req8and10(controllable c_open, c_close, c_emrgStop; MovableComponentsCommands Command):
        //8a When the emergency stop is active the moving components have to stop via the emergency stop.
        requirement c_emrgStop  needs
            Command.Stop  or  Lock.EmergencyStop.Activated;
        //8b When the emergency stop is active the moving components cannot start opening or closing.
        requirement {c_open, c_close}  needs
            Lock.EmergencyStop.Deactivated;

        //10 Actuators can only start when the operator gives the corresponding command.
        requirement c_open  needs
            Command.Open;
        requirement c_close needs
            Command.Close;
    end
    group Gates:
        UpstreamEbbGateEast          : Req8and10(Lock.UpstreamEbb.EastGate.Actuator.c_open,              Lock.UpstreamEbb.EastGate.Actuator.c_close,
                                                 Lock.UpstreamEbb.EastGate.Actuator.c_emrgStop,          Lock.UI.UEbbGate);
        UpstreamEbbGateWest          : Req8and10(Lock.UpstreamEbb.WestGate.Actuator.c_open,              Lock.UpstreamEbb.WestGate.Actuator.c_close,
                                                 Lock.UpstreamEbb.WestGate.Actuator.c_emrgStop,          Lock.UI.UEbbGate);
        UpstreamFloodGateEast        : Req8and10(Lock.UpstreamFlood.EastGate.Actuator.c_open,            Lock.UpstreamFlood.EastGate.Actuator.c_close,
                                                 Lock.UpstreamFlood.EastGate.Actuator.c_emrgStop,        Lock.UI.UFloodGate);
        UpstreamFloodGateWest        : Req8and10(Lock.UpstreamFlood.WestGate.Actuator.c_open,            Lock.UpstreamFlood.WestGate.Actuator.c_close,
                                                 Lock.UpstreamFlood.WestGate.Actuator.c_emrgStop,        Lock.UI.UFloodGate);
        DownstreamEbbGateEast        : Req8and10(Lock.DownstreamEbb.EastGate.Actuator.c_open,            Lock.DownstreamEbb.EastGate.Actuator.c_close,
                                                 Lock.DownstreamEbb.EastGate.Actuator.c_emrgStop,        Lock.UI.DEbbGate);
        DownstreamEbbGateWest        : Req8and10(Lock.DownstreamEbb.WestGate.Actuator.c_open,            Lock.DownstreamEbb.WestGate.Actuator.c_close,
                                                 Lock.DownstreamEbb.WestGate.Actuator.c_emrgStop,        Lock.UI.DEbbGate);
        DownstreamFloodGateEast      : Req8and10(Lock.DownstreamFlood.EastGate.Actuator.c_open,          Lock.DownstreamFlood.EastGate.Actuator.c_close,
                                                 Lock.DownstreamFlood.EastGate.Actuator.c_emrgStop,      Lock.UI.DFloodGate);
        DownstreamFloodGateWest      : Req8and10(Lock.DownstreamFlood.WestGate.Actuator.c_open,          Lock.DownstreamFlood.WestGate.Actuator.c_close,
                                                 Lock.DownstreamFlood.WestGate.Actuator.c_emrgStop,      Lock.UI.DFloodGate);
        DownstreamStormFloodGateEast : Req8and10(Lock.DownstreamStormFlood.EastGate.Actuator.c_open,     Lock.DownstreamStormFlood.EastGate.Actuator.c_close,
                                                 Lock.DownstreamStormFlood.EastGate.Actuator.c_emrgStop, Lock.UI.DStormFloodGate);
        DownstreamStormFloodGateWest : Req8and10(Lock.DownstreamStormFlood.WestGate.Actuator.c_open,     Lock.DownstreamStormFlood.WestGate.Actuator.c_close,
                                                 Lock.DownstreamStormFlood.WestGate.Actuator.c_emrgStop, Lock.UI.DStormFloodGate);
    end
    group Paddles:
        UpstreamEbbPaddleEast          : Req8and10(Lock.UpstreamEbb.EastPaddle.Actuator.c_open,              Lock.UpstreamEbb.EastPaddle.Actuator.c_close,
                                                   Lock.UpstreamEbb.EastPaddle.Actuator.c_emrgStop,          Lock.UI.UEbbPaddle);
        UpstreamEbbPaddleWest          : Req8and10(Lock.UpstreamEbb.WestPaddle.Actuator.c_open,              Lock.UpstreamEbb.WestPaddle.Actuator.c_close,
                                                   Lock.UpstreamEbb.WestPaddle.Actuator.c_emrgStop,          Lock.UI.UEbbPaddle);
        UpstreamFloodPaddleEast        : Req8and10(Lock.UpstreamFlood.EastPaddle.Actuator.c_open,            Lock.UpstreamFlood.EastPaddle.Actuator.c_close,
                                                   Lock.UpstreamFlood.EastPaddle.Actuator.c_emrgStop,        Lock.UI.UFloodPaddle);
        UpstreamFloodPaddleWest        : Req8and10(Lock.UpstreamFlood.WestPaddle.Actuator.c_open,            Lock.UpstreamFlood.WestPaddle.Actuator.c_close,
                                                   Lock.UpstreamFlood.WestPaddle.Actuator.c_emrgStop,        Lock.UI.UFloodPaddle);
        DownstreamEbbPaddleEast        : Req8and10(Lock.DownstreamEbb.EastPaddle.Actuator.c_open,            Lock.DownstreamEbb.EastPaddle.Actuator.c_close,
                                                   Lock.DownstreamEbb.EastPaddle.Actuator.c_emrgStop,        Lock.UI.DEbbPaddle);
        DownstreamEbbPaddleWest        : Req8and10(Lock.DownstreamEbb.WestPaddle.Actuator.c_open,            Lock.DownstreamEbb.WestPaddle.Actuator.c_close,
                                                   Lock.DownstreamEbb.WestPaddle.Actuator.c_emrgStop,        Lock.UI.DEbbPaddle);
        DownstreamFloodPaddleEast      : Req8and10(Lock.DownstreamFlood.EastPaddle.Actuator.c_open,          Lock.DownstreamFlood.EastPaddle.Actuator.c_close,
                                                   Lock.DownstreamFlood.EastPaddle.Actuator.c_emrgStop,      Lock.UI.DFloodPaddle);
        DownstreamFloodPaddleWest      : Req8and10(Lock.DownstreamFlood.WestPaddle.Actuator.c_open,          Lock.DownstreamFlood.WestPaddle.Actuator.c_close,
                                                   Lock.DownstreamFlood.WestPaddle.Actuator.c_emrgStop,      Lock.UI.DFloodPaddle);
        DownstreamStormFloodPaddleEast : Req8and10(Lock.DownstreamStormFlood.EastPaddle.Actuator.c_open,     Lock.DownstreamStormFlood.EastPaddle.Actuator.c_close,
                                                   Lock.DownstreamStormFlood.EastPaddle.Actuator.c_emrgStop, Lock.UI.DStormFloodPaddle);
        DownstreamStormFloodPaddleWest : Req8and10(Lock.DownstreamStormFlood.WestPaddle.Actuator.c_open,     Lock.DownstreamStormFlood.WestPaddle.Actuator.c_close,
                                                   Lock.DownstreamStormFlood.WestPaddle.Actuator.c_emrgStop, Lock.UI.DStormFloodPaddle);
    end
end

group requirement9: //Actuators have to stop when they reach their end position.
    //Requirement 9 is included in the DoubleInputDoubleOutput template for brevity.
end

group requirement11: //Aspects can only be displayed when the operator gives the corresponding command.
    //Requirement 11 is initiated as a template for brevity.

    //Requirement 11 for lock traffic lights.
    //@c_r  - The red aspect event.
    //@c_rg - The red green aspect event.
    //@c_g  - The green aspect event.
    //@c_rr - The double red aspect event.
    //@LockTrafficLightCommands - The template for the corresponding traffic light commands.
    group def LTLReq(controllable c_r, c_rg, c_g, c_rr; LockTrafficLightCommands Command):
        requirement c_r  needs
            Command.Red;
        requirement c_rg needs
            Command.RedGreen;
        requirement c_g  needs
            Command.Green;
        requirement c_rr needs
            Command.RedRed;
    end

    //Requirement 11 for bridge traffic lights.
    //@c_r  - The red aspect event.
    //@c_rg - The red green aspect event.
    //@c_g  - The green aspect event.
    //@BridgeTrafficLightCommands - The template for the corresponding traffic light commands.
    group def BTLReq(controllable c_r, c_g; BridgeTrafficLightCommands Command):
        requirement c_r  needs
            Command.Red;
        requirement c_g  needs
            Command.Green;
    end

    IncomingDE : LTLReq(Lock.LTL.DE.Actuator.c_r,  Lock.LTL.DE.Actuator.c_rg, Lock.LTL.DE.Actuator.c_g,
                        Lock.LTL.DE.Actuator.c_rr, Lock.UI.DLockTrafficLight);
    IncomingDW : LTLReq(Lock.LTL.DW.Actuator.c_r,  Lock.LTL.DW.Actuator.c_rg, Lock.LTL.DW.Actuator.c_g,
                        Lock.LTL.DW.Actuator.c_rr, Lock.UI.DLockTrafficLight);
    IncomingUE : LTLReq(Lock.LTL.UE.Actuator.c_r,  Lock.LTL.UE.Actuator.c_rg, Lock.LTL.UE.Actuator.c_g,
                        Lock.LTL.UE.Actuator.c_rr, Lock.UI.ULockTrafficLight);
    IncomingUW : LTLReq(Lock.LTL.UW.Actuator.c_r,  Lock.LTL.UW.Actuator.c_rg, Lock.LTL.UW.Actuator.c_g,
                        Lock.LTL.UW.Actuator.c_rr, Lock.UI.ULockTrafficLight);
    BridgeUE   : BTLReq(Lock.BTL.DE.Actuator.c_r,  Lock.BTL.DE.Actuator.c_g,
                        Lock.UI.DBridgeTraffigLight);
    BridgeUW   : BTLReq(Lock.BTL.DW.Actuator.c_r,  Lock.BTL.DW.Actuator.c_g,
                        Lock.UI.DBridgeTraffigLight);
end
