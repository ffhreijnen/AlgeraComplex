import "../Templates/Simulation.cif";

group Lock:
    group UI:
        UEbbGate            : MovableComponentsCommands(false);
        UFloodGate          : MovableComponentsCommands(false);
        DEbbGate            : MovableComponentsCommands(false);
        DFloodGate          : MovableComponentsCommands(false);
        DStormFloodGate     : MovableComponentsCommands(false);

        UEbbPaddle          : MovableComponentsCommands(false);
        UFloodPaddle        : MovableComponentsCommands(false);
        DEbbPaddle          : MovableComponentsCommands(false);
        DFloodPaddle        : MovableComponentsCommands(false);
        DStormFloodPaddle   : MovableComponentsCommands(false);

        DLockTrafficLight   : LockTrafficLightCommands();
        ULockTrafficLight   : LockTrafficLightCommands();

        DBridgeTraffigLight : BridgeTrafficLightCommands();
    end

    EmergencyStop : EmergencyStopDef();

    group LTL:
        DE : LockTrafficLight(); DW : LockTrafficLight();
        UE : LockTrafficLight(); UW : LockTrafficLight();
    end

    //Bridge traffic lights
    group BTL:
        DE : BridgeTrafficLight(); DW : BridgeTrafficLight();
    end

    UpstreamEbb          : GatePaddleSet();
    UpstreamFlood        : GatePaddleSet();
    DownstreamEbb        : GatePaddleSet();
    DownstreamFlood      : GatePaddleSet();
    DownstreamStormFlood : GatePaddleSet();

    EqualWaterUpstream   : SingleInputSensor(false);
    EqualWaterDownstream : SingleInputSensor(true);

    automaton Water:
        const real h_upstream = 10.0, h_downstream = 2.0;
        cont       h         = 2.0 der if UpstreamOpen   and h < h_upstream  : +1
                                     elif DownstreamOpen and h > h_downstream: -1
                                     else 0 end;
        alg bool DownstreamOpen = (DownstreamEbb.EastPaddle.Open        or DownstreamEbb.WestPaddle.Open   or
                                   DownstreamEbb.EastGate.Open          or DownstreamEbb.WestGate.Open)    and
                                  (DownstreamFlood.EastPaddle.Open      or DownstreamFlood.WestPaddle.Open or
                                   DownstreamFlood.EastGate.Open        or DownstreamFlood.WestGate.Open)  and
                                  (DownstreamStormFlood.EastPaddle.Open or DownstreamStormFlood.WestPaddle.Open or
                                   DownstreamStormFlood.EastGate.Open   or DownstreamStormFlood.WestGate.Open);

        alg bool UpstreamOpen   = (UpstreamEbb.EastPaddle.Open          or UpstreamEbb.WestPaddle.Open   or
                                   UpstreamEbb.EastGate.Open            or UpstreamEbb.WestGate.Open)    and
                                  (UpstreamFlood.EastPaddle.Open        or UpstreamFlood.WestPaddle.Open or
                                   UpstreamFlood.EastGate.Open          or UpstreamFlood.WestGate.Open);
        location Low:
            initial;
            edge when h > h_downstream  goto Middle;
            edge EqualWaterUpstream.u_off;
            edge EqualWaterDownstream.u_on;
        location Middle:
            edge when h <= h_downstream goto Low;
            edge when h >= h_upstream   goto High;
            edge EqualWaterUpstream.u_off;
            edge EqualWaterDownstream.u_off;
        location High:
            edge when h < h_upstream    goto Middle;
            edge EqualWaterUpstream.u_on;
            edge EqualWaterDownstream.u_off;
    end
end
