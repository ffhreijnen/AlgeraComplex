group Lock:
  group UI:
    group UEbGate:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group UFloodGate:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group DEbGate:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group DFloodGate:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group DStormFloodGate:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group UEbPaddle:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group UFloodPaddle:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group DEbPaddle:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group DFloodPaddle:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group DStormFloodPaddle:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group DLockTrafficLight:
      uncontrollable u_r;
      uncontrollable u_rr;
      uncontrollable u_rg;
      uncontrollable u_g;
    end
    group ULockTrafficLight:
      uncontrollable u_r;
      uncontrollable u_rr;
      uncontrollable u_rg;
      uncontrollable u_g;
    end
    group UBridgeTraffigLight:
      uncontrollable u_r;
      uncontrollable u_rg;
      uncontrollable u_g;
    end
  end
  group EmergencyStop:
    uncontrollable u_activate;
    uncontrollable u_reset;
  end
  group LTL:
    group DE:
      group Actuator:
        controllable c_r;
        controllable c_rr;
        controllable c_rg;
        controllable c_g;
      end
      group SensorR1:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group SensorG:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group SensorR2:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group DW:
      group Actuator:
        controllable c_r;
        controllable c_rr;
        controllable c_rg;
        controllable c_g;
      end
      group SensorR1:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group SensorG:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group SensorR2:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group UE:
      group Actuator:
        controllable c_r;
        controllable c_rr;
        controllable c_rg;
        controllable c_g;
      end
      group SensorR1:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group SensorG:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group SensorR2:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group UW:
      group Actuator:
        controllable c_r;
        controllable c_rr;
        controllable c_rg;
        controllable c_g;
      end
      group SensorR1:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group SensorG:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group SensorR2:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
  end
  group BTL:
    group UE:
      group Actuator:
        controllable c_r;
        controllable c_rg;
        controllable c_g;
      end
      group SensorR:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group SensorG:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group UW:
      group Actuator:
        controllable c_r;
        controllable c_rg;
        controllable c_g;
      end
      group SensorR:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group SensorG:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
  end
  group UpstreamEb:
    group EastGate:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group WestGate:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group EastPaddle:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group WestPaddle:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
  end
  group UpstreamFlood:
    group EastGate:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group WestGate:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group EastPaddle:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group WestPaddle:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
  end
  group DownstreamEb:
    group EastGate:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group WestGate:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group EastPaddle:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group WestPaddle:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
  end
  group DownstreamFlood:
    group EastGate:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group WestGate:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group EastPaddle:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group WestPaddle:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
  end
  group DownstreamStormFlood:
    group EastGate:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group WestGate:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group EastPaddle:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group WestPaddle:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
  end
  group EqualWaterUpstream:
    uncontrollable u_on;
    uncontrollable u_off;
  end
  group EqualWaterDownstream:
    uncontrollable u_on;
    uncontrollable u_off;
  end
end
group sup:
  group FunctionalRequirements:
    group Gates_FReq:
      group UpstreamEbGateEast:
        requirement invariant .Lock.UpstreamEb.EastGate.Actuator.c_open needs Lock.UI.UEbGate.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamEb.EastGate.Actuator.c_close needs Lock.UI.UEbGate.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamEb.EastGate.Actuator.c_stop needs Lock.UI.UEbGate.Stop or Lock.EmergencyStop.Activated;
      end
      group UpstreamEbGateWest:
        requirement invariant .Lock.UpstreamEb.WestGate.Actuator.c_open needs Lock.UI.UEbGate.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamEb.WestGate.Actuator.c_close needs Lock.UI.UEbGate.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamEb.WestGate.Actuator.c_stop needs Lock.UI.UEbGate.Stop or Lock.EmergencyStop.Activated;
      end
      group UpstreamFloodGateEast:
        requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_open needs Lock.UI.UFloodGate.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_close needs Lock.UI.UFloodGate.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_stop needs Lock.UI.UFloodGate.Stop or Lock.EmergencyStop.Activated;
      end
      group UpstreamFloodGateWest:
        requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_open needs Lock.UI.UFloodGate.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_close needs Lock.UI.UFloodGate.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_stop needs Lock.UI.UFloodGate.Stop or Lock.EmergencyStop.Activated;
      end
      group DownstreamEbGateEast:
        requirement invariant .Lock.DownstreamEb.EastGate.Actuator.c_open needs Lock.UI.DEbGate.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamEb.EastGate.Actuator.c_close needs Lock.UI.DEbGate.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamEb.EastGate.Actuator.c_stop needs Lock.UI.DEbGate.Stop or Lock.EmergencyStop.Activated;
      end
      group DownstreamEbGateWest:
        requirement invariant .Lock.DownstreamEb.WestGate.Actuator.c_open needs Lock.UI.DEbGate.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamEb.WestGate.Actuator.c_close needs Lock.UI.DEbGate.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamEb.WestGate.Actuator.c_stop needs Lock.UI.DEbGate.Stop or Lock.EmergencyStop.Activated;
      end
      group DownstreamFloodGateEast:
        requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_open needs Lock.UI.DFloodGate.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_close needs Lock.UI.DFloodGate.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_stop needs Lock.UI.DFloodGate.Stop or Lock.EmergencyStop.Activated;
      end
      group DownstreamFloodGateWest:
        requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_open needs Lock.UI.DFloodGate.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_close needs Lock.UI.DFloodGate.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_stop needs Lock.UI.DFloodGate.Stop or Lock.EmergencyStop.Activated;
      end
      group DownstreamStormFloodGateEast:
        requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_open needs Lock.UI.DStormFloodGate.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_close needs Lock.UI.DStormFloodGate.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_stop needs Lock.UI.DStormFloodGate.Stop or Lock.EmergencyStop.Activated;
      end
      group DownstreamStormFloodGateWest:
        requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_open needs Lock.UI.DStormFloodGate.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_close needs Lock.UI.DStormFloodGate.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_stop needs Lock.UI.DStormFloodGate.Stop or Lock.EmergencyStop.Activated;
      end
    end
    group Paddles_FReq:
      group UpstreamEbPaddleEast:
        requirement invariant .Lock.UpstreamEb.EastPaddle.Actuator.c_open needs Lock.UI.UEbPaddle.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamEb.EastPaddle.Actuator.c_close needs Lock.UI.UEbPaddle.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamEb.EastPaddle.Actuator.c_stop needs Lock.UI.UEbPaddle.Stop or Lock.EmergencyStop.Activated;
      end
      group UpstreamEbPaddleWest:
        requirement invariant .Lock.UpstreamEb.WestPaddle.Actuator.c_open needs Lock.UI.UEbPaddle.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamEb.WestPaddle.Actuator.c_close needs Lock.UI.UEbPaddle.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamEb.WestPaddle.Actuator.c_stop needs Lock.UI.UEbPaddle.Stop or Lock.EmergencyStop.Activated;
      end
      group UpstreamFloodPaddleEast:
        requirement invariant .Lock.UpstreamFlood.EastPaddle.Actuator.c_open needs Lock.UI.UFloodPaddle.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamFlood.EastPaddle.Actuator.c_close needs Lock.UI.UFloodPaddle.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamFlood.EastPaddle.Actuator.c_stop needs Lock.UI.UFloodPaddle.Stop or Lock.EmergencyStop.Activated;
      end
      group UpstreamFloodPaddleWest:
        requirement invariant .Lock.UpstreamFlood.WestPaddle.Actuator.c_open needs Lock.UI.UFloodPaddle.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamFlood.WestPaddle.Actuator.c_close needs Lock.UI.UFloodPaddle.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamFlood.WestPaddle.Actuator.c_stop needs Lock.UI.UFloodPaddle.Stop or Lock.EmergencyStop.Activated;
      end
      group DownstreamEbPaddleEast:
        requirement invariant .Lock.DownstreamEb.EastPaddle.Actuator.c_open needs Lock.UI.DEbPaddle.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamEb.EastPaddle.Actuator.c_close needs Lock.UI.DEbPaddle.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamEb.EastPaddle.Actuator.c_stop needs Lock.UI.DEbPaddle.Stop or Lock.EmergencyStop.Activated;
      end
      group DownstreamEbPaddleWest:
        requirement invariant .Lock.DownstreamEb.WestPaddle.Actuator.c_open needs Lock.UI.DEbPaddle.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamEb.WestPaddle.Actuator.c_close needs Lock.UI.DEbPaddle.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamEb.WestPaddle.Actuator.c_stop needs Lock.UI.DEbPaddle.Stop or Lock.EmergencyStop.Activated;
      end
      group DownstreamFloodPaddleEast:
        requirement invariant .Lock.DownstreamFlood.EastPaddle.Actuator.c_open needs Lock.UI.DFloodPaddle.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamFlood.EastPaddle.Actuator.c_close needs Lock.UI.DFloodPaddle.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamFlood.EastPaddle.Actuator.c_stop needs Lock.UI.DFloodPaddle.Stop or Lock.EmergencyStop.Activated;
      end
      group DownstreamFloodPaddleWest:
        requirement invariant .Lock.DownstreamFlood.WestPaddle.Actuator.c_open needs Lock.UI.DFloodPaddle.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamFlood.WestPaddle.Actuator.c_close needs Lock.UI.DFloodPaddle.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamFlood.WestPaddle.Actuator.c_stop needs Lock.UI.DFloodPaddle.Stop or Lock.EmergencyStop.Activated;
      end
      group DownstreamStormFloodPaddleEast:
        requirement invariant .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_open needs Lock.UI.DStormFloodPaddle.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_close needs Lock.UI.DStormFloodPaddle.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_stop needs Lock.UI.DStormFloodPaddle.Stop or Lock.EmergencyStop.Activated;
      end
      group DownstreamStormFloodPaddleWest:
        requirement invariant .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_open needs Lock.UI.DStormFloodPaddle.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_close needs Lock.UI.DStormFloodPaddle.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_stop needs Lock.UI.DStormFloodPaddle.Stop or Lock.EmergencyStop.Activated;
      end
    end
    group VTL_FReq:
      group IncomingDE:
        requirement invariant .Lock.LTL.DE.Actuator.c_r needs Lock.UI.DLockTrafficLight.Red or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.LTL.DE.Actuator.c_rg needs Lock.UI.DLockTrafficLight.RedGreen and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.LTL.DE.Actuator.c_g needs Lock.UI.DLockTrafficLight.Green and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.LTL.DE.Actuator.c_rr needs Lock.UI.DLockTrafficLight.RedRed and Lock.EmergencyStop.Deactivated;
      end
      group IncomingDW:
        requirement invariant .Lock.LTL.DW.Actuator.c_r needs Lock.UI.DLockTrafficLight.Red or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.LTL.DW.Actuator.c_rg needs Lock.UI.DLockTrafficLight.RedGreen and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.LTL.DW.Actuator.c_g needs Lock.UI.DLockTrafficLight.Green and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.LTL.DW.Actuator.c_rr needs Lock.UI.DLockTrafficLight.RedRed and Lock.EmergencyStop.Deactivated;
      end
      group IncomingUE:
        requirement invariant .Lock.LTL.UE.Actuator.c_r needs Lock.UI.ULockTrafficLight.Red or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.LTL.UE.Actuator.c_rg needs Lock.UI.ULockTrafficLight.RedGreen and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.LTL.UE.Actuator.c_g needs Lock.UI.ULockTrafficLight.Green and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.LTL.UE.Actuator.c_rr needs Lock.UI.ULockTrafficLight.RedRed and Lock.EmergencyStop.Deactivated;
      end
      group IncomingUW:
        requirement invariant .Lock.LTL.UW.Actuator.c_r needs Lock.UI.ULockTrafficLight.Red or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.LTL.UW.Actuator.c_rg needs Lock.UI.ULockTrafficLight.RedGreen and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.LTL.UW.Actuator.c_g needs Lock.UI.ULockTrafficLight.Green and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.LTL.UW.Actuator.c_rr needs Lock.UI.ULockTrafficLight.RedRed and Lock.EmergencyStop.Deactivated;
      end
      group BridgeUE:
        requirement invariant .Lock.BTL.UE.Actuator.c_r needs Lock.UI.UBridgeTraffigLight.Red or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.BTL.UE.Actuator.c_rg needs Lock.UI.UBridgeTraffigLight.RedGreen and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.BTL.UE.Actuator.c_g needs Lock.UI.UBridgeTraffigLight.Green and Lock.EmergencyStop.Deactivated;
      end
      group BridgeUW:
        requirement invariant .Lock.BTL.UW.Actuator.c_r needs Lock.UI.UBridgeTraffigLight.Red or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.BTL.UW.Actuator.c_rg needs Lock.UI.UBridgeTraffigLight.RedGreen and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.BTL.UW.Actuator.c_g needs Lock.UI.UBridgeTraffigLight.Green and Lock.EmergencyStop.Deactivated;
      end
    end
  end
  group SafetyRequirements:
    group Requirement_I:
      requirement invariant .Lock.LTL.DE.Actuator.c_g needs Lock.DownstreamEb.GatesOpen and Lock.DownstreamFlood.GatesOpen and Lock.DownstreamStormFlood.GatesOpen;
      requirement invariant .Lock.LTL.DW.Actuator.c_g needs Lock.DownstreamEb.GatesOpen and Lock.DownstreamFlood.GatesOpen and Lock.DownstreamStormFlood.GatesOpen;
      requirement invariant .Lock.LTL.UE.Actuator.c_g needs Lock.UpstreamEb.GatesOpen and Lock.UpstreamFlood.GatesOpen;
      requirement invariant .Lock.LTL.UW.Actuator.c_g needs Lock.UpstreamEb.GatesOpen and Lock.UpstreamFlood.GatesOpen;
    end
    group Requirement_II:
      requirement invariant .Lock.BTL.UE.Actuator.c_g needs Lock.DownstreamEb.GatesOpen and Lock.DownstreamFlood.GatesOpen and Lock.DownstreamStormFlood.GatesOpen;
      requirement invariant .Lock.BTL.UW.Actuator.c_g needs Lock.DownstreamEb.GatesOpen and Lock.DownstreamFlood.GatesOpen and Lock.DownstreamStormFlood.GatesOpen;
    end
    group Requirement_III:
      requirement invariant .Lock.DownstreamEb.EastGate.Actuator.c_close needs Lock.LTL.DRedOrRedRed;
      requirement invariant .Lock.DownstreamEb.WestGate.Actuator.c_close needs Lock.LTL.DRedOrRedRed;
      requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_close needs Lock.LTL.DRedOrRedRed;
      requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_close needs Lock.LTL.DRedOrRedRed;
      requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_close needs Lock.LTL.DRedOrRedRed;
      requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_close needs Lock.LTL.DRedOrRedRed;
      requirement invariant .Lock.UpstreamEb.EastGate.Actuator.c_close needs Lock.LTL.URedOrRedRed;
      requirement invariant .Lock.UpstreamEb.WestGate.Actuator.c_close needs Lock.LTL.URedOrRedRed;
      requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_close needs Lock.LTL.URedOrRedRed;
      requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_close needs Lock.LTL.URedOrRedRed;
    end
    group Requirement_IV:
      requirement invariant .Lock.DownstreamEb.EastGate.Actuator.c_close needs Lock.BTL.Red;
      requirement invariant .Lock.DownstreamEb.WestGate.Actuator.c_close needs Lock.BTL.Red;
      requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_close needs Lock.BTL.Red;
      requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_close needs Lock.BTL.Red;
      requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_close needs Lock.BTL.Red;
      requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_close needs Lock.BTL.Red;
    end
    group Requirement_V:
      requirement invariant .Lock.DownstreamEb.EastGate.Actuator.c_open needs Lock.UpstreamEb.Closed or Lock.UpstreamFlood.Closed;
      requirement invariant .Lock.DownstreamEb.WestGate.Actuator.c_open needs Lock.UpstreamEb.Closed or Lock.UpstreamFlood.Closed;
      requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_open needs Lock.UpstreamEb.Closed or Lock.UpstreamFlood.Closed;
      requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_open needs Lock.UpstreamEb.Closed or Lock.UpstreamFlood.Closed;
      requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_open needs Lock.UpstreamEb.Closed or Lock.UpstreamFlood.Closed;
      requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_open needs Lock.UpstreamEb.Closed or Lock.UpstreamFlood.Closed;
      requirement invariant .Lock.UpstreamEb.EastGate.Actuator.c_open needs Lock.DownstreamEb.Closed or Lock.DownstreamFlood.Closed or Lock.DownstreamStormFlood.Closed;
      requirement invariant .Lock.UpstreamEb.WestGate.Actuator.c_open needs Lock.DownstreamEb.Closed or Lock.DownstreamFlood.Closed or Lock.DownstreamStormFlood.Closed;
      requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_open needs Lock.DownstreamEb.Closed or Lock.DownstreamFlood.Closed or Lock.DownstreamStormFlood.Closed;
      requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_open needs Lock.DownstreamEb.Closed or Lock.DownstreamFlood.Closed or Lock.DownstreamStormFlood.Closed;
    end
    group Requirement_VI:
      requirement invariant .Lock.DownstreamEb.EastPaddle.Actuator.c_open needs Lock.UpstreamEb.Closed or Lock.UpstreamFlood.Closed;
      requirement invariant .Lock.DownstreamEb.WestPaddle.Actuator.c_open needs Lock.UpstreamEb.Closed or Lock.UpstreamFlood.Closed;
      requirement invariant .Lock.DownstreamFlood.EastPaddle.Actuator.c_open needs Lock.UpstreamEb.Closed or Lock.UpstreamFlood.Closed;
      requirement invariant .Lock.DownstreamFlood.WestPaddle.Actuator.c_open needs Lock.UpstreamEb.Closed or Lock.UpstreamFlood.Closed;
      requirement invariant .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_open needs Lock.UpstreamEb.Closed or Lock.UpstreamFlood.Closed;
      requirement invariant .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_open needs Lock.UpstreamEb.Closed or Lock.UpstreamFlood.Closed;
      requirement invariant .Lock.UpstreamEb.EastPaddle.Actuator.c_open needs Lock.DownstreamEb.Closed or Lock.DownstreamFlood.Closed or Lock.DownstreamStormFlood.Closed;
      requirement invariant .Lock.UpstreamEb.WestPaddle.Actuator.c_open needs Lock.DownstreamEb.Closed or Lock.DownstreamFlood.Closed or Lock.DownstreamStormFlood.Closed;
      requirement invariant .Lock.UpstreamFlood.EastPaddle.Actuator.c_open needs Lock.DownstreamEb.Closed or Lock.DownstreamFlood.Closed or Lock.DownstreamStormFlood.Closed;
      requirement invariant .Lock.UpstreamFlood.WestPaddle.Actuator.c_open needs Lock.DownstreamEb.Closed or Lock.DownstreamFlood.Closed or Lock.DownstreamStormFlood.Closed;
    end
    group Requirement_VII:
      requirement invariant .Lock.DownstreamEb.EastGate.Actuator.c_open needs Lock.EqualWaterDownstream.On;
      requirement invariant .Lock.DownstreamEb.WestGate.Actuator.c_open needs Lock.EqualWaterDownstream.On;
      requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_open needs Lock.EqualWaterDownstream.On;
      requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_open needs Lock.EqualWaterDownstream.On;
      requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_open needs Lock.EqualWaterDownstream.On;
      requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_open needs Lock.EqualWaterDownstream.On;
      requirement invariant .Lock.UpstreamEb.EastGate.Actuator.c_open needs Lock.EqualWaterUpstream.On;
      requirement invariant .Lock.UpstreamEb.WestGate.Actuator.c_open needs Lock.EqualWaterUpstream.On;
      requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_open needs Lock.EqualWaterUpstream.On;
      requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_open needs Lock.EqualWaterUpstream.On;
    end
    group requirement_VIII:
      requirement invariant Lock.DownstreamEb.EastGate.Closed or Lock.DownstreamEb.EastPaddle.Open;
      requirement invariant Lock.DownstreamEb.WestGate.Closed or Lock.DownstreamEb.WestPaddle.Open;
      requirement invariant Lock.DownstreamFlood.EastGate.Closed or Lock.DownstreamFlood.EastPaddle.Open;
      requirement invariant Lock.DownstreamFlood.WestGate.Closed or Lock.DownstreamFlood.WestPaddle.Open;
      requirement invariant Lock.DownstreamStormFlood.EastGate.Closed or Lock.DownstreamStormFlood.EastPaddle.Open;
      requirement invariant Lock.DownstreamStormFlood.WestGate.Closed or Lock.DownstreamStormFlood.WestPaddle.Open;
      requirement invariant Lock.UpstreamEb.EastGate.Closed or Lock.UpstreamEb.EastPaddle.Open;
      requirement invariant Lock.UpstreamEb.WestGate.Closed or Lock.UpstreamEb.WestPaddle.Open;
      requirement invariant Lock.UpstreamFlood.EastGate.Closed or Lock.UpstreamFlood.EastPaddle.Open;
      requirement invariant Lock.UpstreamFlood.WestGate.Closed or Lock.UpstreamFlood.WestPaddle.Open;
    end
    group Requirement_IX:
      requirement invariant .Lock.BTL.UE.Actuator.c_g needs Lock.LTL.DRedOrRedRed;
      requirement invariant .Lock.BTL.UW.Actuator.c_g needs Lock.LTL.DRedOrRedRed;
    end
    group Requirement_X:
      requirement invariant .Lock.LTL.DE.Actuator.c_g needs Lock.BTL.Red;
      requirement invariant .Lock.LTL.DW.Actuator.c_g needs Lock.BTL.Red;
    end
  end
  group Lock:
    group UI:
      plant automaton UEbGate:
        monitor;
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.UEbGate.u_close goto Close;
          edge .Lock.UI.UEbGate.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.UEbGate.u_open goto Open;
          edge .Lock.UI.UEbGate.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.UEbGate.u_close goto Close;
          edge .Lock.UI.UEbGate.u_open goto Open;
      end
      plant automaton UFloodGate:
        monitor;
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.UFloodGate.u_close goto Close;
          edge .Lock.UI.UFloodGate.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.UFloodGate.u_open goto Open;
          edge .Lock.UI.UFloodGate.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.UFloodGate.u_close goto Close;
          edge .Lock.UI.UFloodGate.u_open goto Open;
      end
      plant automaton DEbGate:
        monitor;
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.DEbGate.u_close goto Close;
          edge .Lock.UI.DEbGate.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.DEbGate.u_open goto Open;
          edge .Lock.UI.DEbGate.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.DEbGate.u_close goto Close;
          edge .Lock.UI.DEbGate.u_open goto Open;
      end
      plant automaton DFloodGate:
        monitor;
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.DFloodGate.u_close goto Close;
          edge .Lock.UI.DFloodGate.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.DFloodGate.u_open goto Open;
          edge .Lock.UI.DFloodGate.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.DFloodGate.u_close goto Close;
          edge .Lock.UI.DFloodGate.u_open goto Open;
      end
      plant automaton DStormFloodGate:
        monitor;
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.DStormFloodGate.u_close goto Close;
          edge .Lock.UI.DStormFloodGate.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.DStormFloodGate.u_open goto Open;
          edge .Lock.UI.DStormFloodGate.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.DStormFloodGate.u_close goto Close;
          edge .Lock.UI.DStormFloodGate.u_open goto Open;
      end
      plant automaton UEbPaddle:
        monitor;
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.UEbPaddle.u_close goto Close;
          edge .Lock.UI.UEbPaddle.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.UEbPaddle.u_open goto Open;
          edge .Lock.UI.UEbPaddle.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.UEbPaddle.u_close goto Close;
          edge .Lock.UI.UEbPaddle.u_open goto Open;
      end
      plant automaton UFloodPaddle:
        monitor;
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.UFloodPaddle.u_close goto Close;
          edge .Lock.UI.UFloodPaddle.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.UFloodPaddle.u_open goto Open;
          edge .Lock.UI.UFloodPaddle.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.UFloodPaddle.u_close goto Close;
          edge .Lock.UI.UFloodPaddle.u_open goto Open;
      end
      plant automaton DEbPaddle:
        monitor;
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.DEbPaddle.u_close goto Close;
          edge .Lock.UI.DEbPaddle.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.DEbPaddle.u_open goto Open;
          edge .Lock.UI.DEbPaddle.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.DEbPaddle.u_close goto Close;
          edge .Lock.UI.DEbPaddle.u_open goto Open;
      end
      plant automaton DFloodPaddle:
        monitor;
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.DFloodPaddle.u_close goto Close;
          edge .Lock.UI.DFloodPaddle.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.DFloodPaddle.u_open goto Open;
          edge .Lock.UI.DFloodPaddle.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.DFloodPaddle.u_close goto Close;
          edge .Lock.UI.DFloodPaddle.u_open goto Open;
      end
      plant automaton DStormFloodPaddle:
        monitor;
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.DStormFloodPaddle.u_close goto Close;
          edge .Lock.UI.DStormFloodPaddle.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.DStormFloodPaddle.u_open goto Open;
          edge .Lock.UI.DStormFloodPaddle.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.DStormFloodPaddle.u_close goto Close;
          edge .Lock.UI.DStormFloodPaddle.u_open goto Open;
      end
      plant automaton DLockTrafficLight:
        monitor;
        location RedRed:
          marked;
          edge .Lock.UI.DLockTrafficLight.u_r goto Red;
        location Red:
          initial;
          marked;
          edge .Lock.UI.DLockTrafficLight.u_rr goto RedRed;
          edge .Lock.UI.DLockTrafficLight.u_rg goto RedGreen;
        location RedGreen:
          edge .Lock.UI.DLockTrafficLight.u_r goto Red;
          edge .Lock.UI.DLockTrafficLight.u_g goto Green;
        location Green:
          edge .Lock.UI.DLockTrafficLight.u_r goto Red;
      end
      plant automaton ULockTrafficLight:
        monitor;
        location RedRed:
          marked;
          edge .Lock.UI.ULockTrafficLight.u_r goto Red;
        location Red:
          initial;
          marked;
          edge .Lock.UI.ULockTrafficLight.u_rr goto RedRed;
          edge .Lock.UI.ULockTrafficLight.u_rg goto RedGreen;
        location RedGreen:
          edge .Lock.UI.ULockTrafficLight.u_r goto Red;
          edge .Lock.UI.ULockTrafficLight.u_g goto Green;
        location Green:
          edge .Lock.UI.ULockTrafficLight.u_r goto Red;
      end
      plant automaton UBridgeTraffigLight:
        monitor;
        location Red:
          initial;
          marked;
          edge .Lock.UI.UBridgeTraffigLight.u_rg goto RedGreen;
        location RedGreen:
          edge .Lock.UI.UBridgeTraffigLight.u_g goto Green;
          edge .Lock.UI.UBridgeTraffigLight.u_r goto Red;
        location Green:
          edge .Lock.UI.UBridgeTraffigLight.u_r goto Red;
      end
    end
    plant automaton EmergencyStop:
      location Deactivated:
        initial;
        marked;
        edge .Lock.EmergencyStop.u_activate goto Activated;
      location Activated:
        edge .Lock.EmergencyStop.u_reset goto Deactivated;
    end
    group LTL:
      alg bool DRedOrRedRed = DE.Red and DW.Red or DE.RedRed and DW.RedRed;
      alg bool URedOrRedRed = UE.Red and UW.Red or UE.RedRed and UW.RedRed;
      group DE:
        alg bool RedRed = Actuator.RedRed and SensorR1.On and SensorG.Off and SensorR2.On;
        alg bool Red = Actuator.Red and SensorR1.On and SensorG.Off and SensorR2.Off;
        alg bool RedGreen = Actuator.RedGreen and SensorR1.On and SensorG.On and SensorR2.Off;
        alg bool Green = Actuator.Green and SensorR1.Off and SensorG.On and SensorR2.Off;
        plant automaton Actuator:
          location RedRed:
            marked;
            edge .Lock.LTL.DE.Actuator.c_r goto Red;
          location Red:
            initial;
            marked;
            edge .Lock.LTL.DE.Actuator.c_rr goto RedRed;
            edge .Lock.LTL.DE.Actuator.c_rg goto RedGreen;
          location RedGreen:
            edge .Lock.LTL.DE.Actuator.c_r goto Red;
            edge .Lock.LTL.DE.Actuator.c_g goto Green;
          location Green:
            edge .Lock.LTL.DE.Actuator.c_r goto Red;
        end
        plant automaton SensorR1:
          alg bool InitialLocationOn = true;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.LTL.DE.SensorR1.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.LTL.DE.SensorR1.u_off goto Off;
        end
        plant automaton SensorG:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.LTL.DE.SensorG.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.LTL.DE.SensorG.u_off goto Off;
        end
        plant automaton SensorR2:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.LTL.DE.SensorR2.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.LTL.DE.SensorR2.u_off goto Off;
        end
        plant automaton DynamicsR1:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge .Lock.LTL.DE.SensorR1.u_on when On;
            edge .Lock.LTL.DE.SensorR1.u_off when Off;
        end
        plant automaton DynamicsG:
          alg bool On = Actuator.Green or Actuator.RedGreen;
          alg bool Off = Actuator.Red or Actuator.RedRed;
          location:
            initial;
            marked;
            edge .Lock.LTL.DE.SensorG.u_on when On;
            edge .Lock.LTL.DE.SensorG.u_off when Off;
        end
        plant automaton DynamicsR2:
          alg bool On = Actuator.RedRed;
          alg bool Off = not Actuator.RedRed;
          location:
            initial;
            marked;
            edge .Lock.LTL.DE.SensorR2.u_on when On;
            edge .Lock.LTL.DE.SensorR2.u_off when Off;
        end
      end
      group DW:
        alg bool RedRed = Actuator.RedRed and SensorR1.On and SensorG.Off and SensorR2.On;
        alg bool Red = Actuator.Red and SensorR1.On and SensorG.Off and SensorR2.Off;
        alg bool RedGreen = Actuator.RedGreen and SensorR1.On and SensorG.On and SensorR2.Off;
        alg bool Green = Actuator.Green and SensorR1.Off and SensorG.On and SensorR2.Off;
        plant automaton Actuator:
          location RedRed:
            marked;
            edge .Lock.LTL.DW.Actuator.c_r goto Red;
          location Red:
            initial;
            marked;
            edge .Lock.LTL.DW.Actuator.c_rr goto RedRed;
            edge .Lock.LTL.DW.Actuator.c_rg goto RedGreen;
          location RedGreen:
            edge .Lock.LTL.DW.Actuator.c_r goto Red;
            edge .Lock.LTL.DW.Actuator.c_g goto Green;
          location Green:
            edge .Lock.LTL.DW.Actuator.c_r goto Red;
        end
        plant automaton SensorR1:
          alg bool InitialLocationOn = true;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.LTL.DW.SensorR1.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.LTL.DW.SensorR1.u_off goto Off;
        end
        plant automaton SensorG:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.LTL.DW.SensorG.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.LTL.DW.SensorG.u_off goto Off;
        end
        plant automaton SensorR2:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.LTL.DW.SensorR2.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.LTL.DW.SensorR2.u_off goto Off;
        end
        plant automaton DynamicsR1:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge .Lock.LTL.DW.SensorR1.u_on when On;
            edge .Lock.LTL.DW.SensorR1.u_off when Off;
        end
        plant automaton DynamicsG:
          alg bool On = Actuator.Green or Actuator.RedGreen;
          alg bool Off = Actuator.Red or Actuator.RedRed;
          location:
            initial;
            marked;
            edge .Lock.LTL.DW.SensorG.u_on when On;
            edge .Lock.LTL.DW.SensorG.u_off when Off;
        end
        plant automaton DynamicsR2:
          alg bool On = Actuator.RedRed;
          alg bool Off = not Actuator.RedRed;
          location:
            initial;
            marked;
            edge .Lock.LTL.DW.SensorR2.u_on when On;
            edge .Lock.LTL.DW.SensorR2.u_off when Off;
        end
      end
      group UE:
        alg bool RedRed = Actuator.RedRed and SensorR1.On and SensorG.Off and SensorR2.On;
        alg bool Red = Actuator.Red and SensorR1.On and SensorG.Off and SensorR2.Off;
        alg bool RedGreen = Actuator.RedGreen and SensorR1.On and SensorG.On and SensorR2.Off;
        alg bool Green = Actuator.Green and SensorR1.Off and SensorG.On and SensorR2.Off;
        plant automaton Actuator:
          location RedRed:
            marked;
            edge .Lock.LTL.UE.Actuator.c_r goto Red;
          location Red:
            initial;
            marked;
            edge .Lock.LTL.UE.Actuator.c_rr goto RedRed;
            edge .Lock.LTL.UE.Actuator.c_rg goto RedGreen;
          location RedGreen:
            edge .Lock.LTL.UE.Actuator.c_r goto Red;
            edge .Lock.LTL.UE.Actuator.c_g goto Green;
          location Green:
            edge .Lock.LTL.UE.Actuator.c_r goto Red;
        end
        plant automaton SensorR1:
          alg bool InitialLocationOn = true;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.LTL.UE.SensorR1.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.LTL.UE.SensorR1.u_off goto Off;
        end
        plant automaton SensorG:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.LTL.UE.SensorG.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.LTL.UE.SensorG.u_off goto Off;
        end
        plant automaton SensorR2:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.LTL.UE.SensorR2.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.LTL.UE.SensorR2.u_off goto Off;
        end
        plant automaton DynamicsR1:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge .Lock.LTL.UE.SensorR1.u_on when On;
            edge .Lock.LTL.UE.SensorR1.u_off when Off;
        end
        plant automaton DynamicsG:
          alg bool On = Actuator.Green or Actuator.RedGreen;
          alg bool Off = Actuator.Red or Actuator.RedRed;
          location:
            initial;
            marked;
            edge .Lock.LTL.UE.SensorG.u_on when On;
            edge .Lock.LTL.UE.SensorG.u_off when Off;
        end
        plant automaton DynamicsR2:
          alg bool On = Actuator.RedRed;
          alg bool Off = not Actuator.RedRed;
          location:
            initial;
            marked;
            edge .Lock.LTL.UE.SensorR2.u_on when On;
            edge .Lock.LTL.UE.SensorR2.u_off when Off;
        end
      end
      group UW:
        alg bool RedRed = Actuator.RedRed and SensorR1.On and SensorG.Off and SensorR2.On;
        alg bool Red = Actuator.Red and SensorR1.On and SensorG.Off and SensorR2.Off;
        alg bool RedGreen = Actuator.RedGreen and SensorR1.On and SensorG.On and SensorR2.Off;
        alg bool Green = Actuator.Green and SensorR1.Off and SensorG.On and SensorR2.Off;
        plant automaton Actuator:
          location RedRed:
            marked;
            edge .Lock.LTL.UW.Actuator.c_r goto Red;
          location Red:
            initial;
            marked;
            edge .Lock.LTL.UW.Actuator.c_rr goto RedRed;
            edge .Lock.LTL.UW.Actuator.c_rg goto RedGreen;
          location RedGreen:
            edge .Lock.LTL.UW.Actuator.c_r goto Red;
            edge .Lock.LTL.UW.Actuator.c_g goto Green;
          location Green:
            edge .Lock.LTL.UW.Actuator.c_r goto Red;
        end
        plant automaton SensorR1:
          alg bool InitialLocationOn = true;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.LTL.UW.SensorR1.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.LTL.UW.SensorR1.u_off goto Off;
        end
        plant automaton SensorG:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.LTL.UW.SensorG.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.LTL.UW.SensorG.u_off goto Off;
        end
        plant automaton SensorR2:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.LTL.UW.SensorR2.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.LTL.UW.SensorR2.u_off goto Off;
        end
        plant automaton DynamicsR1:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge .Lock.LTL.UW.SensorR1.u_on when On;
            edge .Lock.LTL.UW.SensorR1.u_off when Off;
        end
        plant automaton DynamicsG:
          alg bool On = Actuator.Green or Actuator.RedGreen;
          alg bool Off = Actuator.Red or Actuator.RedRed;
          location:
            initial;
            marked;
            edge .Lock.LTL.UW.SensorG.u_on when On;
            edge .Lock.LTL.UW.SensorG.u_off when Off;
        end
        plant automaton DynamicsR2:
          alg bool On = Actuator.RedRed;
          alg bool Off = not Actuator.RedRed;
          location:
            initial;
            marked;
            edge .Lock.LTL.UW.SensorR2.u_on when On;
            edge .Lock.LTL.UW.SensorR2.u_off when Off;
        end
      end
    end
    group BTL:
      alg bool Red = UE.Red and UW.Red;
      group UE:
        alg bool Red = Actuator.Red and SensorR.On and SensorG.Off;
        alg bool RedGreen = Actuator.RedGreen and SensorR.On and SensorG.On;
        alg bool Green = Actuator.Green and SensorR.Off and SensorG.On;
        plant automaton Actuator:
          location Red:
            initial;
            marked;
            edge .Lock.BTL.UE.Actuator.c_rg goto RedGreen;
          location RedGreen:
            edge .Lock.BTL.UE.Actuator.c_r goto Red;
            edge .Lock.BTL.UE.Actuator.c_g goto Green;
          location Green:
            edge .Lock.BTL.UE.Actuator.c_r goto Red;
        end
        plant automaton SensorR:
          alg bool InitialLocationOn = true;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.BTL.UE.SensorR.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.BTL.UE.SensorR.u_off goto Off;
        end
        plant automaton SensorG:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.BTL.UE.SensorG.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.BTL.UE.SensorG.u_off goto Off;
        end
        plant automaton DynamicsR:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge .Lock.BTL.UE.SensorR.u_on when On;
            edge .Lock.BTL.UE.SensorR.u_off when Off;
        end
        plant automaton DynamicsG:
          alg bool On = not Actuator.Red;
          alg bool Off = Actuator.Red;
          location:
            initial;
            marked;
            edge .Lock.BTL.UE.SensorG.u_on when On;
            edge .Lock.BTL.UE.SensorG.u_off when Off;
        end
      end
      group UW:
        alg bool Red = Actuator.Red and SensorR.On and SensorG.Off;
        alg bool RedGreen = Actuator.RedGreen and SensorR.On and SensorG.On;
        alg bool Green = Actuator.Green and SensorR.Off and SensorG.On;
        plant automaton Actuator:
          location Red:
            initial;
            marked;
            edge .Lock.BTL.UW.Actuator.c_rg goto RedGreen;
          location RedGreen:
            edge .Lock.BTL.UW.Actuator.c_r goto Red;
            edge .Lock.BTL.UW.Actuator.c_g goto Green;
          location Green:
            edge .Lock.BTL.UW.Actuator.c_r goto Red;
        end
        plant automaton SensorR:
          alg bool InitialLocationOn = true;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.BTL.UW.SensorR.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.BTL.UW.SensorR.u_off goto Off;
        end
        plant automaton SensorG:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.BTL.UW.SensorG.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.BTL.UW.SensorG.u_off goto Off;
        end
        plant automaton DynamicsR:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge .Lock.BTL.UW.SensorR.u_on when On;
            edge .Lock.BTL.UW.SensorR.u_off when Off;
        end
        plant automaton DynamicsG:
          alg bool On = not Actuator.Red;
          alg bool Off = Actuator.Red;
          location:
            initial;
            marked;
            edge .Lock.BTL.UW.SensorG.u_on when On;
            edge .Lock.BTL.UW.SensorG.u_off when Off;
        end
      end
    end
    group UpstreamEb:
      alg bool GatesOpen = EastGate.Open and WestGate.Open;
      alg bool GatesClosed = EastGate.Closed and WestGate.Closed;
      alg bool GatesMoving = EastGate.Moving or WestGate.Moving;
      alg bool PaddlesOpen = EastPaddle.Open and WestPaddle.Open;
      alg bool PaddlesClosed = EastPaddle.Closed and WestPaddle.Closed;
      alg bool PaddlesMoving = EastPaddle.Moving or WestPaddle.Moving;
      alg bool Closed = GatesClosed and PaddlesClosed;
      alg bool Moving = GatesMoving or PaddlesMoving;
      group EastGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.UpstreamEb.EastGate.Actuator.c_open goto Opening;
            edge .Lock.UpstreamEb.EastGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.UpstreamEb.EastGate.Actuator.c_stop, .Lock.UpstreamEb.EastGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.UpstreamEb.EastGate.Actuator.c_stop, .Lock.UpstreamEb.EastGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.UpstreamEb.EastGate.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.UpstreamEb.EastGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.UpstreamEb.EastGate.Sensor.u_closed_on goto Closed;
            edge .Lock.UpstreamEb.EastGate.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.UpstreamEb.EastGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.UpstreamEb.EastGate.Sensor.u_open_on, .Lock.UpstreamEb.EastGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.UpstreamEb.EastGate.Sensor.u_closed_on, .Lock.UpstreamEb.EastGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.UpstreamEb.EastGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.UpstreamEb.EastGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.UpstreamEb.EastGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.UpstreamEb.EastGate.Actuator.c_close needs not Sensor.Closed;
      end
      group WestGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.UpstreamEb.WestGate.Actuator.c_open goto Opening;
            edge .Lock.UpstreamEb.WestGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.UpstreamEb.WestGate.Actuator.c_stop, .Lock.UpstreamEb.WestGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.UpstreamEb.WestGate.Actuator.c_stop, .Lock.UpstreamEb.WestGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.UpstreamEb.WestGate.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.UpstreamEb.WestGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.UpstreamEb.WestGate.Sensor.u_closed_on goto Closed;
            edge .Lock.UpstreamEb.WestGate.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.UpstreamEb.WestGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.UpstreamEb.WestGate.Sensor.u_open_on, .Lock.UpstreamEb.WestGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.UpstreamEb.WestGate.Sensor.u_closed_on, .Lock.UpstreamEb.WestGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.UpstreamEb.WestGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.UpstreamEb.WestGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.UpstreamEb.WestGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.UpstreamEb.WestGate.Actuator.c_close needs not Sensor.Closed;
      end
      group EastPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.UpstreamEb.EastPaddle.Actuator.c_open goto Opening;
            edge .Lock.UpstreamEb.EastPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.UpstreamEb.EastPaddle.Actuator.c_stop, .Lock.UpstreamEb.EastPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.UpstreamEb.EastPaddle.Actuator.c_stop, .Lock.UpstreamEb.EastPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.UpstreamEb.EastPaddle.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.UpstreamEb.EastPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.UpstreamEb.EastPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.UpstreamEb.EastPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.UpstreamEb.EastPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.UpstreamEb.EastPaddle.Sensor.u_open_on, .Lock.UpstreamEb.EastPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.UpstreamEb.EastPaddle.Sensor.u_closed_on, .Lock.UpstreamEb.EastPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.UpstreamEb.EastPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.UpstreamEb.EastPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.UpstreamEb.EastPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.UpstreamEb.EastPaddle.Actuator.c_close needs not Sensor.Closed;
      end
      group WestPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.UpstreamEb.WestPaddle.Actuator.c_open goto Opening;
            edge .Lock.UpstreamEb.WestPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.UpstreamEb.WestPaddle.Actuator.c_stop, .Lock.UpstreamEb.WestPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.UpstreamEb.WestPaddle.Actuator.c_stop, .Lock.UpstreamEb.WestPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.UpstreamEb.WestPaddle.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.UpstreamEb.WestPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.UpstreamEb.WestPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.UpstreamEb.WestPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.UpstreamEb.WestPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.UpstreamEb.WestPaddle.Sensor.u_open_on, .Lock.UpstreamEb.WestPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.UpstreamEb.WestPaddle.Sensor.u_closed_on, .Lock.UpstreamEb.WestPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.UpstreamEb.WestPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.UpstreamEb.WestPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.UpstreamEb.WestPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.UpstreamEb.WestPaddle.Actuator.c_close needs not Sensor.Closed;
      end
    end
    group UpstreamFlood:
      alg bool GatesOpen = EastGate.Open and WestGate.Open;
      alg bool GatesClosed = EastGate.Closed and WestGate.Closed;
      alg bool GatesMoving = EastGate.Moving or WestGate.Moving;
      alg bool PaddlesOpen = EastPaddle.Open and WestPaddle.Open;
      alg bool PaddlesClosed = EastPaddle.Closed and WestPaddle.Closed;
      alg bool PaddlesMoving = EastPaddle.Moving or WestPaddle.Moving;
      alg bool Closed = GatesClosed and PaddlesClosed;
      alg bool Moving = GatesMoving or PaddlesMoving;
      group EastGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.UpstreamFlood.EastGate.Actuator.c_open goto Opening;
            edge .Lock.UpstreamFlood.EastGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.UpstreamFlood.EastGate.Actuator.c_stop, .Lock.UpstreamFlood.EastGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.UpstreamFlood.EastGate.Actuator.c_stop, .Lock.UpstreamFlood.EastGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.UpstreamFlood.EastGate.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.UpstreamFlood.EastGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.UpstreamFlood.EastGate.Sensor.u_closed_on goto Closed;
            edge .Lock.UpstreamFlood.EastGate.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.UpstreamFlood.EastGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.UpstreamFlood.EastGate.Sensor.u_open_on, .Lock.UpstreamFlood.EastGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.UpstreamFlood.EastGate.Sensor.u_closed_on, .Lock.UpstreamFlood.EastGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_close needs not Sensor.Closed;
      end
      group WestGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.UpstreamFlood.WestGate.Actuator.c_open goto Opening;
            edge .Lock.UpstreamFlood.WestGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.UpstreamFlood.WestGate.Actuator.c_stop, .Lock.UpstreamFlood.WestGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.UpstreamFlood.WestGate.Actuator.c_stop, .Lock.UpstreamFlood.WestGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.UpstreamFlood.WestGate.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.UpstreamFlood.WestGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.UpstreamFlood.WestGate.Sensor.u_closed_on goto Closed;
            edge .Lock.UpstreamFlood.WestGate.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.UpstreamFlood.WestGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.UpstreamFlood.WestGate.Sensor.u_open_on, .Lock.UpstreamFlood.WestGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.UpstreamFlood.WestGate.Sensor.u_closed_on, .Lock.UpstreamFlood.WestGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_close needs not Sensor.Closed;
      end
      group EastPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.UpstreamFlood.EastPaddle.Actuator.c_open goto Opening;
            edge .Lock.UpstreamFlood.EastPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.UpstreamFlood.EastPaddle.Actuator.c_stop, .Lock.UpstreamFlood.EastPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.UpstreamFlood.EastPaddle.Actuator.c_stop, .Lock.UpstreamFlood.EastPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.UpstreamFlood.EastPaddle.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.UpstreamFlood.EastPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.UpstreamFlood.EastPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.UpstreamFlood.EastPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.UpstreamFlood.EastPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.UpstreamFlood.EastPaddle.Sensor.u_open_on, .Lock.UpstreamFlood.EastPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.UpstreamFlood.EastPaddle.Sensor.u_closed_on, .Lock.UpstreamFlood.EastPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.UpstreamFlood.EastPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.UpstreamFlood.EastPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.UpstreamFlood.EastPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.UpstreamFlood.EastPaddle.Actuator.c_close needs not Sensor.Closed;
      end
      group WestPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.UpstreamFlood.WestPaddle.Actuator.c_open goto Opening;
            edge .Lock.UpstreamFlood.WestPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.UpstreamFlood.WestPaddle.Actuator.c_stop, .Lock.UpstreamFlood.WestPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.UpstreamFlood.WestPaddle.Actuator.c_stop, .Lock.UpstreamFlood.WestPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.UpstreamFlood.WestPaddle.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.UpstreamFlood.WestPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.UpstreamFlood.WestPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.UpstreamFlood.WestPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.UpstreamFlood.WestPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.UpstreamFlood.WestPaddle.Sensor.u_open_on, .Lock.UpstreamFlood.WestPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.UpstreamFlood.WestPaddle.Sensor.u_closed_on, .Lock.UpstreamFlood.WestPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.UpstreamFlood.WestPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.UpstreamFlood.WestPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.UpstreamFlood.WestPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.UpstreamFlood.WestPaddle.Actuator.c_close needs not Sensor.Closed;
      end
    end
    group DownstreamEb:
      alg bool GatesOpen = EastGate.Open and WestGate.Open;
      alg bool GatesClosed = EastGate.Closed and WestGate.Closed;
      alg bool GatesMoving = EastGate.Moving or WestGate.Moving;
      alg bool PaddlesOpen = EastPaddle.Open and WestPaddle.Open;
      alg bool PaddlesClosed = EastPaddle.Closed and WestPaddle.Closed;
      alg bool PaddlesMoving = EastPaddle.Moving or WestPaddle.Moving;
      alg bool Closed = GatesClosed and PaddlesClosed;
      alg bool Moving = GatesMoving or PaddlesMoving;
      group EastGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamEb.EastGate.Actuator.c_open goto Opening;
            edge .Lock.DownstreamEb.EastGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamEb.EastGate.Actuator.c_stop, .Lock.DownstreamEb.EastGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamEb.EastGate.Actuator.c_stop, .Lock.DownstreamEb.EastGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.DownstreamEb.EastGate.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamEb.EastGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamEb.EastGate.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamEb.EastGate.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.DownstreamEb.EastGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamEb.EastGate.Sensor.u_open_on, .Lock.DownstreamEb.EastGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamEb.EastGate.Sensor.u_closed_on, .Lock.DownstreamEb.EastGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamEb.EastGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamEb.EastGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamEb.EastGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamEb.EastGate.Actuator.c_close needs not Sensor.Closed;
      end
      group WestGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamEb.WestGate.Actuator.c_open goto Opening;
            edge .Lock.DownstreamEb.WestGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamEb.WestGate.Actuator.c_stop, .Lock.DownstreamEb.WestGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamEb.WestGate.Actuator.c_stop, .Lock.DownstreamEb.WestGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.DownstreamEb.WestGate.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamEb.WestGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamEb.WestGate.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamEb.WestGate.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.DownstreamEb.WestGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamEb.WestGate.Sensor.u_open_on, .Lock.DownstreamEb.WestGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamEb.WestGate.Sensor.u_closed_on, .Lock.DownstreamEb.WestGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamEb.WestGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamEb.WestGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamEb.WestGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamEb.WestGate.Actuator.c_close needs not Sensor.Closed;
      end
      group EastPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamEb.EastPaddle.Actuator.c_open goto Opening;
            edge .Lock.DownstreamEb.EastPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamEb.EastPaddle.Actuator.c_stop, .Lock.DownstreamEb.EastPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamEb.EastPaddle.Actuator.c_stop, .Lock.DownstreamEb.EastPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.DownstreamEb.EastPaddle.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamEb.EastPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamEb.EastPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamEb.EastPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.DownstreamEb.EastPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamEb.EastPaddle.Sensor.u_open_on, .Lock.DownstreamEb.EastPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamEb.EastPaddle.Sensor.u_closed_on, .Lock.DownstreamEb.EastPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamEb.EastPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamEb.EastPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamEb.EastPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamEb.EastPaddle.Actuator.c_close needs not Sensor.Closed;
      end
      group WestPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamEb.WestPaddle.Actuator.c_open goto Opening;
            edge .Lock.DownstreamEb.WestPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamEb.WestPaddle.Actuator.c_stop, .Lock.DownstreamEb.WestPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamEb.WestPaddle.Actuator.c_stop, .Lock.DownstreamEb.WestPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.DownstreamEb.WestPaddle.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamEb.WestPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamEb.WestPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamEb.WestPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.DownstreamEb.WestPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamEb.WestPaddle.Sensor.u_open_on, .Lock.DownstreamEb.WestPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamEb.WestPaddle.Sensor.u_closed_on, .Lock.DownstreamEb.WestPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamEb.WestPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamEb.WestPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamEb.WestPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamEb.WestPaddle.Actuator.c_close needs not Sensor.Closed;
      end
    end
    group DownstreamFlood:
      alg bool GatesOpen = EastGate.Open and WestGate.Open;
      alg bool GatesClosed = EastGate.Closed and WestGate.Closed;
      alg bool GatesMoving = EastGate.Moving or WestGate.Moving;
      alg bool PaddlesOpen = EastPaddle.Open and WestPaddle.Open;
      alg bool PaddlesClosed = EastPaddle.Closed and WestPaddle.Closed;
      alg bool PaddlesMoving = EastPaddle.Moving or WestPaddle.Moving;
      alg bool Closed = GatesClosed and PaddlesClosed;
      alg bool Moving = GatesMoving or PaddlesMoving;
      group EastGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamFlood.EastGate.Actuator.c_open goto Opening;
            edge .Lock.DownstreamFlood.EastGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamFlood.EastGate.Actuator.c_stop, .Lock.DownstreamFlood.EastGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamFlood.EastGate.Actuator.c_stop, .Lock.DownstreamFlood.EastGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.DownstreamFlood.EastGate.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamFlood.EastGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamFlood.EastGate.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamFlood.EastGate.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.DownstreamFlood.EastGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamFlood.EastGate.Sensor.u_open_on, .Lock.DownstreamFlood.EastGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamFlood.EastGate.Sensor.u_closed_on, .Lock.DownstreamFlood.EastGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_close needs not Sensor.Closed;
      end
      group WestGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamFlood.WestGate.Actuator.c_open goto Opening;
            edge .Lock.DownstreamFlood.WestGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamFlood.WestGate.Actuator.c_stop, .Lock.DownstreamFlood.WestGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamFlood.WestGate.Actuator.c_stop, .Lock.DownstreamFlood.WestGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.DownstreamFlood.WestGate.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamFlood.WestGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamFlood.WestGate.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamFlood.WestGate.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.DownstreamFlood.WestGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamFlood.WestGate.Sensor.u_open_on, .Lock.DownstreamFlood.WestGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamFlood.WestGate.Sensor.u_closed_on, .Lock.DownstreamFlood.WestGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_close needs not Sensor.Closed;
      end
      group EastPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamFlood.EastPaddle.Actuator.c_open goto Opening;
            edge .Lock.DownstreamFlood.EastPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamFlood.EastPaddle.Actuator.c_stop, .Lock.DownstreamFlood.EastPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamFlood.EastPaddle.Actuator.c_stop, .Lock.DownstreamFlood.EastPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.DownstreamFlood.EastPaddle.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamFlood.EastPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamFlood.EastPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamFlood.EastPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.DownstreamFlood.EastPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamFlood.EastPaddle.Sensor.u_open_on, .Lock.DownstreamFlood.EastPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamFlood.EastPaddle.Sensor.u_closed_on, .Lock.DownstreamFlood.EastPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamFlood.EastPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamFlood.EastPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamFlood.EastPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamFlood.EastPaddle.Actuator.c_close needs not Sensor.Closed;
      end
      group WestPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamFlood.WestPaddle.Actuator.c_open goto Opening;
            edge .Lock.DownstreamFlood.WestPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamFlood.WestPaddle.Actuator.c_stop, .Lock.DownstreamFlood.WestPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamFlood.WestPaddle.Actuator.c_stop, .Lock.DownstreamFlood.WestPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.DownstreamFlood.WestPaddle.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamFlood.WestPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamFlood.WestPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamFlood.WestPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.DownstreamFlood.WestPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamFlood.WestPaddle.Sensor.u_open_on, .Lock.DownstreamFlood.WestPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamFlood.WestPaddle.Sensor.u_closed_on, .Lock.DownstreamFlood.WestPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamFlood.WestPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamFlood.WestPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamFlood.WestPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamFlood.WestPaddle.Actuator.c_close needs not Sensor.Closed;
      end
    end
    group DownstreamStormFlood:
      alg bool GatesOpen = EastGate.Open and WestGate.Open;
      alg bool GatesClosed = EastGate.Closed and WestGate.Closed;
      alg bool GatesMoving = EastGate.Moving or WestGate.Moving;
      alg bool PaddlesOpen = EastPaddle.Open and WestPaddle.Open;
      alg bool PaddlesClosed = EastPaddle.Closed and WestPaddle.Closed;
      alg bool PaddlesMoving = EastPaddle.Moving or WestPaddle.Moving;
      alg bool Closed = GatesClosed and PaddlesClosed;
      alg bool Moving = GatesMoving or PaddlesMoving;
      group EastGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamStormFlood.EastGate.Actuator.c_open goto Opening;
            edge .Lock.DownstreamStormFlood.EastGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamStormFlood.EastGate.Actuator.c_stop, .Lock.DownstreamStormFlood.EastGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamStormFlood.EastGate.Actuator.c_stop, .Lock.DownstreamStormFlood.EastGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.DownstreamStormFlood.EastGate.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamStormFlood.EastGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamStormFlood.EastGate.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamStormFlood.EastGate.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.DownstreamStormFlood.EastGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamStormFlood.EastGate.Sensor.u_open_on, .Lock.DownstreamStormFlood.EastGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamStormFlood.EastGate.Sensor.u_closed_on, .Lock.DownstreamStormFlood.EastGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_close needs not Sensor.Closed;
      end
      group WestGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamStormFlood.WestGate.Actuator.c_open goto Opening;
            edge .Lock.DownstreamStormFlood.WestGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamStormFlood.WestGate.Actuator.c_stop, .Lock.DownstreamStormFlood.WestGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamStormFlood.WestGate.Actuator.c_stop, .Lock.DownstreamStormFlood.WestGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.DownstreamStormFlood.WestGate.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamStormFlood.WestGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamStormFlood.WestGate.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamStormFlood.WestGate.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.DownstreamStormFlood.WestGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamStormFlood.WestGate.Sensor.u_open_on, .Lock.DownstreamStormFlood.WestGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamStormFlood.WestGate.Sensor.u_closed_on, .Lock.DownstreamStormFlood.WestGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_close needs not Sensor.Closed;
      end
      group EastPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_open goto Opening;
            edge .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_stop, .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_stop, .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.DownstreamStormFlood.EastPaddle.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamStormFlood.EastPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamStormFlood.EastPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamStormFlood.EastPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.DownstreamStormFlood.EastPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamStormFlood.EastPaddle.Sensor.u_open_on, .Lock.DownstreamStormFlood.EastPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamStormFlood.EastPaddle.Sensor.u_closed_on, .Lock.DownstreamStormFlood.EastPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_close needs not Sensor.Closed;
      end
      group WestPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_open goto Opening;
            edge .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_stop, .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_stop, .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.DownstreamStormFlood.WestPaddle.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamStormFlood.WestPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamStormFlood.WestPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamStormFlood.WestPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.DownstreamStormFlood.WestPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamStormFlood.WestPaddle.Sensor.u_open_on, .Lock.DownstreamStormFlood.WestPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamStormFlood.WestPaddle.Sensor.u_closed_on, .Lock.DownstreamStormFlood.WestPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_close needs not Sensor.Closed;
      end
    end
    plant automaton EqualWaterUpstream:
      alg bool InitialLocationOn = false;
      location Off:
        initial not InitialLocationOn;
        marked not InitialLocationOn;
        edge .Lock.EqualWaterUpstream.u_on goto On;
      location On:
        initial InitialLocationOn;
        marked InitialLocationOn;
        edge .Lock.EqualWaterUpstream.u_off goto Off;
    end
    plant automaton EqualWaterDownstream:
      alg bool InitialLocationOn = true;
      location Off:
        initial not InitialLocationOn;
        marked not InitialLocationOn;
        edge .Lock.EqualWaterDownstream.u_on goto On;
      location On:
        initial InitialLocationOn;
        marked InitialLocationOn;
        edge .Lock.EqualWaterDownstream.u_off goto Off;
    end
  end
  supervisor automaton sup:
    alphabet .Lock.LTL.DE.Actuator.c_r, .Lock.LTL.DE.Actuator.c_rr, .Lock.LTL.DE.Actuator.c_rg, .Lock.LTL.DE.Actuator.c_g, .Lock.LTL.DW.Actuator.c_r, .Lock.LTL.DW.Actuator.c_rr, .Lock.LTL.DW.Actuator.c_rg, .Lock.LTL.DW.Actuator.c_g, .Lock.LTL.UE.Actuator.c_r, .Lock.LTL.UE.Actuator.c_rr, .Lock.LTL.UE.Actuator.c_rg, .Lock.LTL.UE.Actuator.c_g, .Lock.LTL.UW.Actuator.c_r, .Lock.LTL.UW.Actuator.c_rr, .Lock.LTL.UW.Actuator.c_rg, .Lock.LTL.UW.Actuator.c_g, .Lock.BTL.UE.Actuator.c_rg, .Lock.BTL.UE.Actuator.c_r, .Lock.BTL.UE.Actuator.c_g, .Lock.BTL.UW.Actuator.c_rg, .Lock.BTL.UW.Actuator.c_r, .Lock.BTL.UW.Actuator.c_g, .Lock.UpstreamEb.EastGate.Actuator.c_open, .Lock.UpstreamEb.EastGate.Actuator.c_close, .Lock.UpstreamEb.EastGate.Actuator.c_stop, .Lock.UpstreamEb.EastGate.Actuator.c_endStopOpening, .Lock.UpstreamEb.EastGate.Actuator.c_endStopClosing, .Lock.UpstreamEb.WestGate.Actuator.c_open, .Lock.UpstreamEb.WestGate.Actuator.c_close, .Lock.UpstreamEb.WestGate.Actuator.c_stop, .Lock.UpstreamEb.WestGate.Actuator.c_endStopOpening, .Lock.UpstreamEb.WestGate.Actuator.c_endStopClosing, .Lock.UpstreamEb.EastPaddle.Actuator.c_open, .Lock.UpstreamEb.EastPaddle.Actuator.c_close, .Lock.UpstreamEb.EastPaddle.Actuator.c_stop, .Lock.UpstreamEb.EastPaddle.Actuator.c_endStopOpening, .Lock.UpstreamEb.EastPaddle.Actuator.c_endStopClosing, .Lock.UpstreamEb.WestPaddle.Actuator.c_open, .Lock.UpstreamEb.WestPaddle.Actuator.c_close, .Lock.UpstreamEb.WestPaddle.Actuator.c_stop, .Lock.UpstreamEb.WestPaddle.Actuator.c_endStopOpening, .Lock.UpstreamEb.WestPaddle.Actuator.c_endStopClosing, .Lock.UpstreamFlood.EastGate.Actuator.c_open, .Lock.UpstreamFlood.EastGate.Actuator.c_close, .Lock.UpstreamFlood.EastGate.Actuator.c_stop, .Lock.UpstreamFlood.EastGate.Actuator.c_endStopOpening, .Lock.UpstreamFlood.EastGate.Actuator.c_endStopClosing, .Lock.UpstreamFlood.WestGate.Actuator.c_open, .Lock.UpstreamFlood.WestGate.Actuator.c_close, .Lock.UpstreamFlood.WestGate.Actuator.c_stop, .Lock.UpstreamFlood.WestGate.Actuator.c_endStopOpening, .Lock.UpstreamFlood.WestGate.Actuator.c_endStopClosing, .Lock.UpstreamFlood.EastPaddle.Actuator.c_open, .Lock.UpstreamFlood.EastPaddle.Actuator.c_close, .Lock.UpstreamFlood.EastPaddle.Actuator.c_stop, .Lock.UpstreamFlood.EastPaddle.Actuator.c_endStopOpening, .Lock.UpstreamFlood.EastPaddle.Actuator.c_endStopClosing, .Lock.UpstreamFlood.WestPaddle.Actuator.c_open, .Lock.UpstreamFlood.WestPaddle.Actuator.c_close, .Lock.UpstreamFlood.WestPaddle.Actuator.c_stop, .Lock.UpstreamFlood.WestPaddle.Actuator.c_endStopOpening, .Lock.UpstreamFlood.WestPaddle.Actuator.c_endStopClosing, .Lock.DownstreamEb.EastGate.Actuator.c_open, .Lock.DownstreamEb.EastGate.Actuator.c_close, .Lock.DownstreamEb.EastGate.Actuator.c_stop, .Lock.DownstreamEb.EastGate.Actuator.c_endStopOpening, .Lock.DownstreamEb.EastGate.Actuator.c_endStopClosing, .Lock.DownstreamEb.WestGate.Actuator.c_open, .Lock.DownstreamEb.WestGate.Actuator.c_close, .Lock.DownstreamEb.WestGate.Actuator.c_stop, .Lock.DownstreamEb.WestGate.Actuator.c_endStopOpening, .Lock.DownstreamEb.WestGate.Actuator.c_endStopClosing, .Lock.DownstreamEb.EastPaddle.Actuator.c_open, .Lock.DownstreamEb.EastPaddle.Actuator.c_close, .Lock.DownstreamEb.EastPaddle.Actuator.c_stop, .Lock.DownstreamEb.EastPaddle.Actuator.c_endStopOpening, .Lock.DownstreamEb.EastPaddle.Actuator.c_endStopClosing, .Lock.DownstreamEb.WestPaddle.Actuator.c_open, .Lock.DownstreamEb.WestPaddle.Actuator.c_close, .Lock.DownstreamEb.WestPaddle.Actuator.c_stop, .Lock.DownstreamEb.WestPaddle.Actuator.c_endStopOpening, .Lock.DownstreamEb.WestPaddle.Actuator.c_endStopClosing, .Lock.DownstreamFlood.EastGate.Actuator.c_open, .Lock.DownstreamFlood.EastGate.Actuator.c_close, .Lock.DownstreamFlood.EastGate.Actuator.c_stop, .Lock.DownstreamFlood.EastGate.Actuator.c_endStopOpening, .Lock.DownstreamFlood.EastGate.Actuator.c_endStopClosing, .Lock.DownstreamFlood.WestGate.Actuator.c_open, .Lock.DownstreamFlood.WestGate.Actuator.c_close, .Lock.DownstreamFlood.WestGate.Actuator.c_stop, .Lock.DownstreamFlood.WestGate.Actuator.c_endStopOpening, .Lock.DownstreamFlood.WestGate.Actuator.c_endStopClosing, .Lock.DownstreamFlood.EastPaddle.Actuator.c_open, .Lock.DownstreamFlood.EastPaddle.Actuator.c_close, .Lock.DownstreamFlood.EastPaddle.Actuator.c_stop, .Lock.DownstreamFlood.EastPaddle.Actuator.c_endStopOpening, .Lock.DownstreamFlood.EastPaddle.Actuator.c_endStopClosing, .Lock.DownstreamFlood.WestPaddle.Actuator.c_open, .Lock.DownstreamFlood.WestPaddle.Actuator.c_close, .Lock.DownstreamFlood.WestPaddle.Actuator.c_stop, .Lock.DownstreamFlood.WestPaddle.Actuator.c_endStopOpening, .Lock.DownstreamFlood.WestPaddle.Actuator.c_endStopClosing, .Lock.DownstreamStormFlood.EastGate.Actuator.c_open, .Lock.DownstreamStormFlood.EastGate.Actuator.c_close, .Lock.DownstreamStormFlood.EastGate.Actuator.c_stop, .Lock.DownstreamStormFlood.EastGate.Actuator.c_endStopOpening, .Lock.DownstreamStormFlood.EastGate.Actuator.c_endStopClosing, .Lock.DownstreamStormFlood.WestGate.Actuator.c_open, .Lock.DownstreamStormFlood.WestGate.Actuator.c_close, .Lock.DownstreamStormFlood.WestGate.Actuator.c_stop, .Lock.DownstreamStormFlood.WestGate.Actuator.c_endStopOpening, .Lock.DownstreamStormFlood.WestGate.Actuator.c_endStopClosing, .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_open, .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_close, .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_stop, .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_endStopOpening, .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_endStopClosing, .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_open, .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_close, .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_stop, .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_endStopOpening, .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_endStopClosing;
    location:
      initial;
      marked;
      edge .Lock.BTL.UE.Actuator.c_g when true;
      edge .Lock.BTL.UE.Actuator.c_r when true;
      edge .Lock.BTL.UE.Actuator.c_rg when true;
      edge .Lock.BTL.UW.Actuator.c_g when true;
      edge .Lock.BTL.UW.Actuator.c_r when true;
      edge .Lock.BTL.UW.Actuator.c_rg when true;
      edge .Lock.DownstreamEb.EastGate.Actuator.c_close when true;
      edge .Lock.DownstreamEb.EastGate.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamEb.EastGate.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamEb.EastGate.Actuator.c_open when Lock.DownstreamEb.EastPaddle.Actuator.Rest and Lock.DownstreamEb.EastPaddle.Sensor.Open;
      edge .Lock.DownstreamEb.EastGate.Actuator.c_stop when true;
      edge .Lock.DownstreamEb.EastPaddle.Actuator.c_close when not Lock.DownstreamEb.EastPaddle.Sensor.Intermediate and (Lock.DownstreamEb.EastGate.Actuator.Rest and Lock.DownstreamEb.EastGate.Sensor.Closed) or Lock.DownstreamEb.EastPaddle.Sensor.Intermediate;
      edge .Lock.DownstreamEb.EastPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamEb.EastPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamEb.EastPaddle.Actuator.c_open when true;
      edge .Lock.DownstreamEb.EastPaddle.Actuator.c_stop when true;
      edge .Lock.DownstreamEb.WestGate.Actuator.c_close when true;
      edge .Lock.DownstreamEb.WestGate.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamEb.WestGate.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamEb.WestGate.Actuator.c_open when Lock.DownstreamEb.WestPaddle.Actuator.Rest and Lock.DownstreamEb.WestPaddle.Sensor.Open;
      edge .Lock.DownstreamEb.WestGate.Actuator.c_stop when true;
      edge .Lock.DownstreamEb.WestPaddle.Actuator.c_close when Lock.DownstreamEb.WestGate.Actuator.Rest and Lock.DownstreamEb.WestGate.Sensor.Closed;
      edge .Lock.DownstreamEb.WestPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamEb.WestPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamEb.WestPaddle.Actuator.c_open when true;
      edge .Lock.DownstreamEb.WestPaddle.Actuator.c_stop when true;
      edge .Lock.DownstreamFlood.EastGate.Actuator.c_close when true;
      edge .Lock.DownstreamFlood.EastGate.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamFlood.EastGate.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamFlood.EastGate.Actuator.c_open when Lock.DownstreamFlood.EastPaddle.Actuator.Rest and Lock.DownstreamFlood.EastPaddle.Sensor.Open;
      edge .Lock.DownstreamFlood.EastGate.Actuator.c_stop when true;
      edge .Lock.DownstreamFlood.EastPaddle.Actuator.c_close when Lock.DownstreamFlood.EastGate.Actuator.Rest and Lock.DownstreamFlood.EastGate.Sensor.Closed;
      edge .Lock.DownstreamFlood.EastPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamFlood.EastPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamFlood.EastPaddle.Actuator.c_open when true;
      edge .Lock.DownstreamFlood.EastPaddle.Actuator.c_stop when true;
      edge .Lock.DownstreamFlood.WestGate.Actuator.c_close when true;
      edge .Lock.DownstreamFlood.WestGate.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamFlood.WestGate.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamFlood.WestGate.Actuator.c_open when Lock.DownstreamFlood.WestPaddle.Actuator.Rest and Lock.DownstreamFlood.WestPaddle.Sensor.Open;
      edge .Lock.DownstreamFlood.WestGate.Actuator.c_stop when true;
      edge .Lock.DownstreamFlood.WestPaddle.Actuator.c_close when Lock.DownstreamFlood.WestGate.Actuator.Rest and Lock.DownstreamFlood.WestGate.Sensor.Closed;
      edge .Lock.DownstreamFlood.WestPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamFlood.WestPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamFlood.WestPaddle.Actuator.c_open when true;
      edge .Lock.DownstreamFlood.WestPaddle.Actuator.c_stop when true;
      edge .Lock.DownstreamStormFlood.EastGate.Actuator.c_close when true;
      edge .Lock.DownstreamStormFlood.EastGate.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamStormFlood.EastGate.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamStormFlood.EastGate.Actuator.c_open when Lock.DownstreamStormFlood.EastPaddle.Actuator.Rest and Lock.DownstreamStormFlood.EastPaddle.Sensor.Open;
      edge .Lock.DownstreamStormFlood.EastGate.Actuator.c_stop when true;
      edge .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_close when Lock.DownstreamStormFlood.EastGate.Actuator.Rest and Lock.DownstreamStormFlood.EastGate.Sensor.Closed;
      edge .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_open when true;
      edge .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_stop when true;
      edge .Lock.DownstreamStormFlood.WestGate.Actuator.c_close when true;
      edge .Lock.DownstreamStormFlood.WestGate.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamStormFlood.WestGate.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamStormFlood.WestGate.Actuator.c_open when Lock.DownstreamStormFlood.WestPaddle.Sensor.Open and Lock.DownstreamStormFlood.WestPaddle.Actuator.Rest;
      edge .Lock.DownstreamStormFlood.WestGate.Actuator.c_stop when true;
      edge .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_close when Lock.DownstreamStormFlood.WestGate.Sensor.Closed and Lock.DownstreamStormFlood.WestGate.Actuator.Rest;
      edge .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_open when true;
      edge .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_stop when true;
      edge .Lock.LTL.DE.Actuator.c_g when true;
      edge .Lock.LTL.DE.Actuator.c_r when true;
      edge .Lock.LTL.DE.Actuator.c_rg when true;
      edge .Lock.LTL.DE.Actuator.c_rr when true;
      edge .Lock.LTL.DW.Actuator.c_g when true;
      edge .Lock.LTL.DW.Actuator.c_r when true;
      edge .Lock.LTL.DW.Actuator.c_rg when true;
      edge .Lock.LTL.DW.Actuator.c_rr when true;
      edge .Lock.LTL.UE.Actuator.c_g when true;
      edge .Lock.LTL.UE.Actuator.c_r when true;
      edge .Lock.LTL.UE.Actuator.c_rg when true;
      edge .Lock.LTL.UE.Actuator.c_rr when true;
      edge .Lock.LTL.UW.Actuator.c_g when true;
      edge .Lock.LTL.UW.Actuator.c_r when true;
      edge .Lock.LTL.UW.Actuator.c_rg when true;
      edge .Lock.LTL.UW.Actuator.c_rr when true;
      edge .Lock.UpstreamEb.EastGate.Actuator.c_close when true;
      edge .Lock.UpstreamEb.EastGate.Actuator.c_endStopClosing when true;
      edge .Lock.UpstreamEb.EastGate.Actuator.c_endStopOpening when true;
      edge .Lock.UpstreamEb.EastGate.Actuator.c_open when Lock.UpstreamEb.EastPaddle.Actuator.Rest and Lock.UpstreamEb.EastPaddle.Sensor.Open;
      edge .Lock.UpstreamEb.EastGate.Actuator.c_stop when true;
      edge .Lock.UpstreamEb.EastPaddle.Actuator.c_close when not Lock.UpstreamEb.EastPaddle.Sensor.Intermediate and (Lock.UpstreamEb.EastGate.Actuator.Rest and Lock.UpstreamEb.EastGate.Sensor.Closed) or Lock.UpstreamEb.EastPaddle.Sensor.Intermediate;
      edge .Lock.UpstreamEb.EastPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.UpstreamEb.EastPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.UpstreamEb.EastPaddle.Actuator.c_open when true;
      edge .Lock.UpstreamEb.EastPaddle.Actuator.c_stop when true;
      edge .Lock.UpstreamEb.WestGate.Actuator.c_close when true;
      edge .Lock.UpstreamEb.WestGate.Actuator.c_endStopClosing when true;
      edge .Lock.UpstreamEb.WestGate.Actuator.c_endStopOpening when true;
      edge .Lock.UpstreamEb.WestGate.Actuator.c_open when Lock.UpstreamEb.WestPaddle.Actuator.Rest and Lock.UpstreamEb.WestPaddle.Sensor.Open;
      edge .Lock.UpstreamEb.WestGate.Actuator.c_stop when true;
      edge .Lock.UpstreamEb.WestPaddle.Actuator.c_close when Lock.UpstreamEb.WestGate.Actuator.Rest and Lock.UpstreamEb.WestGate.Sensor.Closed;
      edge .Lock.UpstreamEb.WestPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.UpstreamEb.WestPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.UpstreamEb.WestPaddle.Actuator.c_open when true;
      edge .Lock.UpstreamEb.WestPaddle.Actuator.c_stop when true;
      edge .Lock.UpstreamFlood.EastGate.Actuator.c_close when true;
      edge .Lock.UpstreamFlood.EastGate.Actuator.c_endStopClosing when true;
      edge .Lock.UpstreamFlood.EastGate.Actuator.c_endStopOpening when true;
      edge .Lock.UpstreamFlood.EastGate.Actuator.c_open when Lock.UpstreamFlood.EastPaddle.Actuator.Rest and Lock.UpstreamFlood.EastPaddle.Sensor.Open;
      edge .Lock.UpstreamFlood.EastGate.Actuator.c_stop when true;
      edge .Lock.UpstreamFlood.EastPaddle.Actuator.c_close when Lock.UpstreamFlood.EastGate.Actuator.Rest and Lock.UpstreamFlood.EastGate.Sensor.Closed;
      edge .Lock.UpstreamFlood.EastPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.UpstreamFlood.EastPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.UpstreamFlood.EastPaddle.Actuator.c_open when true;
      edge .Lock.UpstreamFlood.EastPaddle.Actuator.c_stop when true;
      edge .Lock.UpstreamFlood.WestGate.Actuator.c_close when true;
      edge .Lock.UpstreamFlood.WestGate.Actuator.c_endStopClosing when true;
      edge .Lock.UpstreamFlood.WestGate.Actuator.c_endStopOpening when true;
      edge .Lock.UpstreamFlood.WestGate.Actuator.c_open when Lock.UpstreamFlood.WestPaddle.Actuator.Rest and Lock.UpstreamFlood.WestPaddle.Sensor.Open;
      edge .Lock.UpstreamFlood.WestGate.Actuator.c_stop when true;
      edge .Lock.UpstreamFlood.WestPaddle.Actuator.c_close when Lock.UpstreamFlood.WestGate.Actuator.Rest and Lock.UpstreamFlood.WestGate.Sensor.Closed;
      edge .Lock.UpstreamFlood.WestPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.UpstreamFlood.WestPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.UpstreamFlood.WestPaddle.Actuator.c_open when true;
      edge .Lock.UpstreamFlood.WestPaddle.Actuator.c_stop when true;
  end
end
