group Lock:
  group UI:
    group UEbbGate:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group UFloodGate:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group DEbbGate:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group DFloodGate:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group DStormFloodGate:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group UEbbPaddle:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group UFloodPaddle:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group DEbbPaddle:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group DFloodPaddle:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group DStormFloodPaddle:
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
    end
    group DLockTrafficLight:
      uncontrollable u_r;
      uncontrollable u_rr;
      uncontrollable u_rg;
      uncontrollable u_g;
    end
    group ULockTrafficLight:
      uncontrollable u_r;
      uncontrollable u_rr;
      uncontrollable u_rg;
      uncontrollable u_g;
    end
    group DBridgeTraffigLight:
      uncontrollable u_r;
      uncontrollable u_g;
    end
  end
  group EmergencyStop:
    uncontrollable u_activate;
    uncontrollable u_deactivate;
  end
  group LTL:
    group DE:
      group Actuator:
        controllable c_r;
        controllable c_rr;
        controllable c_rg;
        controllable c_g;
        controllable c_emrg;
      end
      group SensorR1:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group SensorG:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group SensorR2:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group DW:
      group Actuator:
        controllable c_r;
        controllable c_rr;
        controllable c_rg;
        controllable c_g;
        controllable c_emrg;
      end
      group SensorR1:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group SensorG:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group SensorR2:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group UE:
      group Actuator:
        controllable c_r;
        controllable c_rr;
        controllable c_rg;
        controllable c_g;
        controllable c_emrg;
      end
      group SensorR1:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group SensorG:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group SensorR2:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group UW:
      group Actuator:
        controllable c_r;
        controllable c_rr;
        controllable c_rg;
        controllable c_g;
        controllable c_emrg;
      end
      group SensorR1:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group SensorG:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group SensorR2:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
  end
  group BTL:
    group DE:
      group Actuator:
        controllable c_r;
        controllable c_g;
        controllable c_emrg;
      end
      group SensorR:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group SensorG:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
    group DW:
      group Actuator:
        controllable c_r;
        controllable c_g;
        controllable c_emrg;
      end
      group SensorR:
        uncontrollable u_on;
        uncontrollable u_off;
      end
      group SensorG:
        uncontrollable u_on;
        uncontrollable u_off;
      end
    end
  end
  group UpstreamEbb:
    group EastGate:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_emrgStop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group WestGate:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_emrgStop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group EastPaddle:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_emrgStop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group WestPaddle:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_emrgStop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
  end
  group UpstreamFlood:
    group EastGate:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_emrgStop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group WestGate:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_emrgStop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group EastPaddle:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_emrgStop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group WestPaddle:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_emrgStop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
  end
  group DownstreamEbb:
    group EastGate:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_emrgStop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group WestGate:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_emrgStop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group EastPaddle:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_emrgStop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group WestPaddle:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_emrgStop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
  end
  group DownstreamFlood:
    group EastGate:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_emrgStop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group WestGate:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_emrgStop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group EastPaddle:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_emrgStop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group WestPaddle:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_emrgStop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
  end
  group DownstreamStormFlood:
    group EastGate:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_emrgStop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group WestGate:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_emrgStop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group EastPaddle:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_emrgStop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
    group WestPaddle:
      group Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_emrgStop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
      end
      group Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
      end
    end
  end
  group EqualWaterUpstream:
    uncontrollable u_on;
    uncontrollable u_off;
  end
  group EqualWaterDownstream:
    uncontrollable u_on;
    uncontrollable u_off;
  end
end
group sup:
  group Requirement1:
    requirement invariant .Lock.LTL.DE.Actuator.c_g needs Lock.DownstreamEbb.GatesOpen and Lock.DownstreamFlood.GatesOpen and Lock.DownstreamStormFlood.GatesOpen;
    requirement invariant .Lock.LTL.DW.Actuator.c_g needs Lock.DownstreamEbb.GatesOpen and Lock.DownstreamFlood.GatesOpen and Lock.DownstreamStormFlood.GatesOpen;
    requirement invariant .Lock.LTL.UE.Actuator.c_g needs Lock.UpstreamEbb.GatesOpen and Lock.UpstreamFlood.GatesOpen;
    requirement invariant .Lock.LTL.UW.Actuator.c_g needs Lock.UpstreamEbb.GatesOpen and Lock.UpstreamFlood.GatesOpen;
    requirement invariant .Lock.LTL.DE.Actuator.c_g needs Lock.BTL.DRed;
    requirement invariant .Lock.LTL.DW.Actuator.c_g needs Lock.BTL.DRed;
  end
  group Requirement2:
    requirement invariant .Lock.BTL.DE.Actuator.c_g needs Lock.DownstreamEbb.GatesOpen and Lock.DownstreamFlood.GatesOpen and Lock.DownstreamStormFlood.GatesOpen;
    requirement invariant .Lock.BTL.DW.Actuator.c_g needs Lock.DownstreamEbb.GatesOpen and Lock.DownstreamFlood.GatesOpen and Lock.DownstreamStormFlood.GatesOpen;
    requirement invariant .Lock.BTL.DE.Actuator.c_g needs Lock.LTL.DRed or Lock.LTL.DRedRed;
    requirement invariant .Lock.BTL.DW.Actuator.c_g needs Lock.LTL.DRed or Lock.LTL.DRedRed;
  end
  group Requirement3:
    requirement invariant .Lock.DownstreamEbb.EastGate.Actuator.c_close needs Lock.LTL.DRed or Lock.LTL.DRedRed;
    requirement invariant .Lock.DownstreamEbb.WestGate.Actuator.c_close needs Lock.LTL.DRed or Lock.LTL.DRedRed;
    requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_close needs Lock.LTL.DRed or Lock.LTL.DRedRed;
    requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_close needs Lock.LTL.DRed or Lock.LTL.DRedRed;
    requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_close needs Lock.LTL.DRed or Lock.LTL.DRedRed;
    requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_close needs Lock.LTL.DRed or Lock.LTL.DRedRed;
    requirement invariant .Lock.UpstreamEbb.EastGate.Actuator.c_close needs Lock.LTL.URed or Lock.LTL.URedRed;
    requirement invariant .Lock.UpstreamEbb.WestGate.Actuator.c_close needs Lock.LTL.URed or Lock.LTL.URedRed;
    requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_close needs Lock.LTL.URed or Lock.LTL.URedRed;
    requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_close needs Lock.LTL.URed or Lock.LTL.URedRed;
    requirement invariant .Lock.DownstreamEbb.EastGate.Actuator.c_close needs Lock.BTL.DRed;
    requirement invariant .Lock.DownstreamEbb.WestGate.Actuator.c_close needs Lock.BTL.DRed;
    requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_close needs Lock.BTL.DRed;
    requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_close needs Lock.BTL.DRed;
    requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_close needs Lock.BTL.DRed;
    requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_close needs Lock.BTL.DRed;
  end
  group Requirement4:
    requirement invariant .Lock.DownstreamEbb.EastGate.Actuator.c_open needs Lock.UpstreamEbb.Closed or Lock.UpstreamFlood.Closed;
    requirement invariant .Lock.DownstreamEbb.WestGate.Actuator.c_open needs Lock.UpstreamEbb.Closed or Lock.UpstreamFlood.Closed;
    requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_open needs Lock.UpstreamEbb.Closed or Lock.UpstreamFlood.Closed;
    requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_open needs Lock.UpstreamEbb.Closed or Lock.UpstreamFlood.Closed;
    requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_open needs Lock.UpstreamEbb.Closed or Lock.UpstreamFlood.Closed;
    requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_open needs Lock.UpstreamEbb.Closed or Lock.UpstreamFlood.Closed;
    requirement invariant .Lock.UpstreamEbb.EastGate.Actuator.c_open needs Lock.DownstreamEbb.Closed or Lock.DownstreamFlood.Closed or Lock.DownstreamStormFlood.Closed;
    requirement invariant .Lock.UpstreamEbb.WestGate.Actuator.c_open needs Lock.DownstreamEbb.Closed or Lock.DownstreamFlood.Closed or Lock.DownstreamStormFlood.Closed;
    requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_open needs Lock.DownstreamEbb.Closed or Lock.DownstreamFlood.Closed or Lock.DownstreamStormFlood.Closed;
    requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_open needs Lock.DownstreamEbb.Closed or Lock.DownstreamFlood.Closed or Lock.DownstreamStormFlood.Closed;
    requirement invariant .Lock.DownstreamEbb.EastGate.Actuator.c_open needs Lock.EqualWaterDownstream.On;
    requirement invariant .Lock.DownstreamEbb.WestGate.Actuator.c_open needs Lock.EqualWaterDownstream.On;
    requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_open needs Lock.EqualWaterDownstream.On;
    requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_open needs Lock.EqualWaterDownstream.On;
    requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_open needs Lock.EqualWaterDownstream.On;
    requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_open needs Lock.EqualWaterDownstream.On;
    requirement invariant .Lock.UpstreamEbb.EastGate.Actuator.c_open needs Lock.EqualWaterUpstream.On;
    requirement invariant .Lock.UpstreamEbb.WestGate.Actuator.c_open needs Lock.EqualWaterUpstream.On;
    requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_open needs Lock.EqualWaterUpstream.On;
    requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_open needs Lock.EqualWaterUpstream.On;
  end
  group Requirement5:
    requirement invariant .Lock.DownstreamEbb.EastPaddle.Actuator.c_open needs Lock.UpstreamEbb.Closed or Lock.UpstreamFlood.Closed;
    requirement invariant .Lock.DownstreamEbb.WestPaddle.Actuator.c_open needs Lock.UpstreamEbb.Closed or Lock.UpstreamFlood.Closed;
    requirement invariant .Lock.DownstreamFlood.EastPaddle.Actuator.c_open needs Lock.UpstreamEbb.Closed or Lock.UpstreamFlood.Closed;
    requirement invariant .Lock.DownstreamFlood.WestPaddle.Actuator.c_open needs Lock.UpstreamEbb.Closed or Lock.UpstreamFlood.Closed;
    requirement invariant .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_open needs Lock.UpstreamEbb.Closed or Lock.UpstreamFlood.Closed;
    requirement invariant .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_open needs Lock.UpstreamEbb.Closed or Lock.UpstreamFlood.Closed;
    requirement invariant .Lock.UpstreamEbb.EastPaddle.Actuator.c_open needs Lock.DownstreamEbb.Closed or Lock.DownstreamFlood.Closed or Lock.DownstreamStormFlood.Closed;
    requirement invariant .Lock.UpstreamEbb.WestPaddle.Actuator.c_open needs Lock.DownstreamEbb.Closed or Lock.DownstreamFlood.Closed or Lock.DownstreamStormFlood.Closed;
    requirement invariant .Lock.UpstreamFlood.EastPaddle.Actuator.c_open needs Lock.DownstreamEbb.Closed or Lock.DownstreamFlood.Closed or Lock.DownstreamStormFlood.Closed;
    requirement invariant .Lock.UpstreamFlood.WestPaddle.Actuator.c_open needs Lock.DownstreamEbb.Closed or Lock.DownstreamFlood.Closed or Lock.DownstreamStormFlood.Closed;
  end
  group requirement6:
    requirement invariant Lock.DownstreamEbb.EastGate.Closed or Lock.DownstreamEbb.EastPaddle.Open;
    requirement invariant Lock.DownstreamEbb.WestGate.Closed or Lock.DownstreamEbb.WestPaddle.Open;
    requirement invariant Lock.DownstreamFlood.EastGate.Closed or Lock.DownstreamFlood.EastPaddle.Open;
    requirement invariant Lock.DownstreamFlood.WestGate.Closed or Lock.DownstreamFlood.WestPaddle.Open;
    requirement invariant Lock.DownstreamStormFlood.EastGate.Closed or Lock.DownstreamStormFlood.EastPaddle.Open;
    requirement invariant Lock.DownstreamStormFlood.WestGate.Closed or Lock.DownstreamStormFlood.WestPaddle.Open;
    requirement invariant Lock.UpstreamEbb.EastGate.Closed or Lock.UpstreamEbb.EastPaddle.Open;
    requirement invariant Lock.UpstreamEbb.WestGate.Closed or Lock.UpstreamEbb.WestPaddle.Open;
    requirement invariant Lock.UpstreamFlood.EastGate.Closed or Lock.UpstreamFlood.EastPaddle.Open;
    requirement invariant Lock.UpstreamFlood.WestGate.Closed or Lock.UpstreamFlood.WestPaddle.Open;
  end
  group requirement7:
    group LTL:
      requirement invariant .Lock.LTL.DE.Actuator.c_emrg needs Lock.EmergencyStop.Activated;
      requirement invariant .Lock.LTL.DW.Actuator.c_emrg needs Lock.EmergencyStop.Activated;
      requirement invariant .Lock.LTL.UE.Actuator.c_emrg needs Lock.EmergencyStop.Activated;
      requirement invariant .Lock.LTL.UW.Actuator.c_emrg needs Lock.EmergencyStop.Activated;
      requirement invariant .Lock.LTL.DE.Actuator.c_r needs Lock.EmergencyStop.Deactivated;
      requirement invariant .Lock.LTL.DE.Actuator.c_rg needs Lock.EmergencyStop.Deactivated;
      requirement invariant .Lock.LTL.DE.Actuator.c_g needs Lock.EmergencyStop.Deactivated;
      requirement invariant .Lock.LTL.DE.Actuator.c_rr needs Lock.EmergencyStop.Deactivated;
      requirement invariant .Lock.LTL.DW.Actuator.c_r needs Lock.EmergencyStop.Deactivated;
      requirement invariant .Lock.LTL.DW.Actuator.c_rg needs Lock.EmergencyStop.Deactivated;
      requirement invariant .Lock.LTL.DW.Actuator.c_g needs Lock.EmergencyStop.Deactivated;
      requirement invariant .Lock.LTL.DW.Actuator.c_rr needs Lock.EmergencyStop.Deactivated;
      requirement invariant .Lock.LTL.UE.Actuator.c_r needs Lock.EmergencyStop.Deactivated;
      requirement invariant .Lock.LTL.UE.Actuator.c_rg needs Lock.EmergencyStop.Deactivated;
      requirement invariant .Lock.LTL.UE.Actuator.c_g needs Lock.EmergencyStop.Deactivated;
      requirement invariant .Lock.LTL.UE.Actuator.c_rr needs Lock.EmergencyStop.Deactivated;
      requirement invariant .Lock.LTL.UW.Actuator.c_r needs Lock.EmergencyStop.Deactivated;
      requirement invariant .Lock.LTL.UW.Actuator.c_rg needs Lock.EmergencyStop.Deactivated;
      requirement invariant .Lock.LTL.UW.Actuator.c_g needs Lock.EmergencyStop.Deactivated;
      requirement invariant .Lock.LTL.UW.Actuator.c_rr needs Lock.EmergencyStop.Deactivated;
    end
    group BTL:
      requirement invariant .Lock.BTL.DE.Actuator.c_emrg needs Lock.EmergencyStop.Activated;
      requirement invariant .Lock.BTL.DW.Actuator.c_emrg needs Lock.EmergencyStop.Activated;
      requirement invariant .Lock.BTL.DE.Actuator.c_r needs Lock.EmergencyStop.Deactivated;
      requirement invariant .Lock.BTL.DE.Actuator.c_g needs Lock.EmergencyStop.Deactivated;
      requirement invariant .Lock.BTL.DW.Actuator.c_r needs Lock.EmergencyStop.Deactivated;
      requirement invariant .Lock.BTL.DW.Actuator.c_g needs Lock.EmergencyStop.Deactivated;
    end
  end
  group requirement8and10:
    group Gates:
      group UpstreamEbbGateEast:
        requirement invariant .Lock.UpstreamEbb.EastGate.Actuator.c_emrgStop needs Lock.UI.UEbbGate.Stop or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.UpstreamEbb.EastGate.Actuator.c_open needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamEbb.EastGate.Actuator.c_close needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamEbb.EastGate.Actuator.c_open needs Lock.UI.UEbbGate.Open;
        requirement invariant .Lock.UpstreamEbb.EastGate.Actuator.c_close needs Lock.UI.UEbbGate.Close;
      end
      group UpstreamEbbGateWest:
        requirement invariant .Lock.UpstreamEbb.WestGate.Actuator.c_emrgStop needs Lock.UI.UEbbGate.Stop or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.UpstreamEbb.WestGate.Actuator.c_open needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamEbb.WestGate.Actuator.c_close needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamEbb.WestGate.Actuator.c_open needs Lock.UI.UEbbGate.Open;
        requirement invariant .Lock.UpstreamEbb.WestGate.Actuator.c_close needs Lock.UI.UEbbGate.Close;
      end
      group UpstreamFloodGateEast:
        requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_emrgStop needs Lock.UI.UFloodGate.Stop or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_open needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_close needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_open needs Lock.UI.UFloodGate.Open;
        requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_close needs Lock.UI.UFloodGate.Close;
      end
      group UpstreamFloodGateWest:
        requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_emrgStop needs Lock.UI.UFloodGate.Stop or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_open needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_close needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_open needs Lock.UI.UFloodGate.Open;
        requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_close needs Lock.UI.UFloodGate.Close;
      end
      group DownstreamEbbGateEast:
        requirement invariant .Lock.DownstreamEbb.EastGate.Actuator.c_emrgStop needs Lock.UI.DEbbGate.Stop or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.DownstreamEbb.EastGate.Actuator.c_open needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamEbb.EastGate.Actuator.c_close needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamEbb.EastGate.Actuator.c_open needs Lock.UI.DEbbGate.Open;
        requirement invariant .Lock.DownstreamEbb.EastGate.Actuator.c_close needs Lock.UI.DEbbGate.Close;
      end
      group DownstreamEbbGateWest:
        requirement invariant .Lock.DownstreamEbb.WestGate.Actuator.c_emrgStop needs Lock.UI.DEbbGate.Stop or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.DownstreamEbb.WestGate.Actuator.c_open needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamEbb.WestGate.Actuator.c_close needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamEbb.WestGate.Actuator.c_open needs Lock.UI.DEbbGate.Open;
        requirement invariant .Lock.DownstreamEbb.WestGate.Actuator.c_close needs Lock.UI.DEbbGate.Close;
      end
      group DownstreamFloodGateEast:
        requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_emrgStop needs Lock.UI.DFloodGate.Stop or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_open needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_close needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_open needs Lock.UI.DFloodGate.Open;
        requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_close needs Lock.UI.DFloodGate.Close;
      end
      group DownstreamFloodGateWest:
        requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_emrgStop needs Lock.UI.DFloodGate.Stop or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_open needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_close needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_open needs Lock.UI.DFloodGate.Open;
        requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_close needs Lock.UI.DFloodGate.Close;
      end
      group DownstreamStormFloodGateEast:
        requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_emrgStop needs Lock.UI.DStormFloodGate.Stop or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_open needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_close needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_open needs Lock.UI.DStormFloodGate.Open;
        requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_close needs Lock.UI.DStormFloodGate.Close;
      end
      group DownstreamStormFloodGateWest:
        requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_emrgStop needs Lock.UI.DStormFloodGate.Stop or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_open needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_close needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_open needs Lock.UI.DStormFloodGate.Open;
        requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_close needs Lock.UI.DStormFloodGate.Close;
      end
    end
    group Paddles:
      group UpstreamEbbPaddleEast:
        requirement invariant .Lock.UpstreamEbb.EastPaddle.Actuator.c_emrgStop needs Lock.UI.UEbbPaddle.Stop or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.UpstreamEbb.EastPaddle.Actuator.c_open needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamEbb.EastPaddle.Actuator.c_close needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamEbb.EastPaddle.Actuator.c_open needs Lock.UI.UEbbPaddle.Open;
        requirement invariant .Lock.UpstreamEbb.EastPaddle.Actuator.c_close needs Lock.UI.UEbbPaddle.Close;
      end
      group UpstreamEbbPaddleWest:
        requirement invariant .Lock.UpstreamEbb.WestPaddle.Actuator.c_emrgStop needs Lock.UI.UEbbPaddle.Stop or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.UpstreamEbb.WestPaddle.Actuator.c_open needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamEbb.WestPaddle.Actuator.c_close needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamEbb.WestPaddle.Actuator.c_open needs Lock.UI.UEbbPaddle.Open;
        requirement invariant .Lock.UpstreamEbb.WestPaddle.Actuator.c_close needs Lock.UI.UEbbPaddle.Close;
      end
      group UpstreamFloodPaddleEast:
        requirement invariant .Lock.UpstreamFlood.EastPaddle.Actuator.c_emrgStop needs Lock.UI.UFloodPaddle.Stop or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.UpstreamFlood.EastPaddle.Actuator.c_open needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamFlood.EastPaddle.Actuator.c_close needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamFlood.EastPaddle.Actuator.c_open needs Lock.UI.UFloodPaddle.Open;
        requirement invariant .Lock.UpstreamFlood.EastPaddle.Actuator.c_close needs Lock.UI.UFloodPaddle.Close;
      end
      group UpstreamFloodPaddleWest:
        requirement invariant .Lock.UpstreamFlood.WestPaddle.Actuator.c_emrgStop needs Lock.UI.UFloodPaddle.Stop or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.UpstreamFlood.WestPaddle.Actuator.c_open needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamFlood.WestPaddle.Actuator.c_close needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamFlood.WestPaddle.Actuator.c_open needs Lock.UI.UFloodPaddle.Open;
        requirement invariant .Lock.UpstreamFlood.WestPaddle.Actuator.c_close needs Lock.UI.UFloodPaddle.Close;
      end
      group DownstreamEbbPaddleEast:
        requirement invariant .Lock.DownstreamEbb.EastPaddle.Actuator.c_emrgStop needs Lock.UI.DEbbPaddle.Stop or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.DownstreamEbb.EastPaddle.Actuator.c_open needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamEbb.EastPaddle.Actuator.c_close needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamEbb.EastPaddle.Actuator.c_open needs Lock.UI.DEbbPaddle.Open;
        requirement invariant .Lock.DownstreamEbb.EastPaddle.Actuator.c_close needs Lock.UI.DEbbPaddle.Close;
      end
      group DownstreamEbbPaddleWest:
        requirement invariant .Lock.DownstreamEbb.WestPaddle.Actuator.c_emrgStop needs Lock.UI.DEbbPaddle.Stop or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.DownstreamEbb.WestPaddle.Actuator.c_open needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamEbb.WestPaddle.Actuator.c_close needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamEbb.WestPaddle.Actuator.c_open needs Lock.UI.DEbbPaddle.Open;
        requirement invariant .Lock.DownstreamEbb.WestPaddle.Actuator.c_close needs Lock.UI.DEbbPaddle.Close;
      end
      group DownstreamFloodPaddleEast:
        requirement invariant .Lock.DownstreamFlood.EastPaddle.Actuator.c_emrgStop needs Lock.UI.DFloodPaddle.Stop or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.DownstreamFlood.EastPaddle.Actuator.c_open needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamFlood.EastPaddle.Actuator.c_close needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamFlood.EastPaddle.Actuator.c_open needs Lock.UI.DFloodPaddle.Open;
        requirement invariant .Lock.DownstreamFlood.EastPaddle.Actuator.c_close needs Lock.UI.DFloodPaddle.Close;
      end
      group DownstreamFloodPaddleWest:
        requirement invariant .Lock.DownstreamFlood.WestPaddle.Actuator.c_emrgStop needs Lock.UI.DFloodPaddle.Stop or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.DownstreamFlood.WestPaddle.Actuator.c_open needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamFlood.WestPaddle.Actuator.c_close needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamFlood.WestPaddle.Actuator.c_open needs Lock.UI.DFloodPaddle.Open;
        requirement invariant .Lock.DownstreamFlood.WestPaddle.Actuator.c_close needs Lock.UI.DFloodPaddle.Close;
      end
      group DownstreamStormFloodPaddleEast:
        requirement invariant .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_emrgStop needs Lock.UI.DStormFloodPaddle.Stop or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_open needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_close needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_open needs Lock.UI.DStormFloodPaddle.Open;
        requirement invariant .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_close needs Lock.UI.DStormFloodPaddle.Close;
      end
      group DownstreamStormFloodPaddleWest:
        requirement invariant .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_emrgStop needs Lock.UI.DStormFloodPaddle.Stop or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_open needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_close needs Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_open needs Lock.UI.DStormFloodPaddle.Open;
        requirement invariant .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_close needs Lock.UI.DStormFloodPaddle.Close;
      end
    end
  end
  group requirement9:
  end
  group requirement11:
    group IncomingDE:
      requirement invariant .Lock.LTL.DE.Actuator.c_r needs Lock.UI.DLockTrafficLight.Red;
      requirement invariant .Lock.LTL.DE.Actuator.c_rg needs Lock.UI.DLockTrafficLight.RedGreen;
      requirement invariant .Lock.LTL.DE.Actuator.c_g needs Lock.UI.DLockTrafficLight.Green;
      requirement invariant .Lock.LTL.DE.Actuator.c_rr needs Lock.UI.DLockTrafficLight.RedRed;
    end
    group IncomingDW:
      requirement invariant .Lock.LTL.DW.Actuator.c_r needs Lock.UI.DLockTrafficLight.Red;
      requirement invariant .Lock.LTL.DW.Actuator.c_rg needs Lock.UI.DLockTrafficLight.RedGreen;
      requirement invariant .Lock.LTL.DW.Actuator.c_g needs Lock.UI.DLockTrafficLight.Green;
      requirement invariant .Lock.LTL.DW.Actuator.c_rr needs Lock.UI.DLockTrafficLight.RedRed;
    end
    group IncomingUE:
      requirement invariant .Lock.LTL.UE.Actuator.c_r needs Lock.UI.ULockTrafficLight.Red;
      requirement invariant .Lock.LTL.UE.Actuator.c_rg needs Lock.UI.ULockTrafficLight.RedGreen;
      requirement invariant .Lock.LTL.UE.Actuator.c_g needs Lock.UI.ULockTrafficLight.Green;
      requirement invariant .Lock.LTL.UE.Actuator.c_rr needs Lock.UI.ULockTrafficLight.RedRed;
    end
    group IncomingUW:
      requirement invariant .Lock.LTL.UW.Actuator.c_r needs Lock.UI.ULockTrafficLight.Red;
      requirement invariant .Lock.LTL.UW.Actuator.c_rg needs Lock.UI.ULockTrafficLight.RedGreen;
      requirement invariant .Lock.LTL.UW.Actuator.c_g needs Lock.UI.ULockTrafficLight.Green;
      requirement invariant .Lock.LTL.UW.Actuator.c_rr needs Lock.UI.ULockTrafficLight.RedRed;
    end
    group BridgeUE:
      requirement invariant .Lock.BTL.DE.Actuator.c_r needs Lock.UI.DBridgeTraffigLight.Red;
      requirement invariant .Lock.BTL.DE.Actuator.c_g needs Lock.UI.DBridgeTraffigLight.Green;
    end
    group BridgeUW:
      requirement invariant .Lock.BTL.DW.Actuator.c_r needs Lock.UI.DBridgeTraffigLight.Red;
      requirement invariant .Lock.BTL.DW.Actuator.c_g needs Lock.UI.DBridgeTraffigLight.Green;
    end
  end
  group Lock:
    group UI:
      plant automaton UEbbGate:
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.UEbbGate.u_close goto Close;
          edge .Lock.UI.UEbbGate.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.UEbbGate.u_open goto Open;
          edge .Lock.UI.UEbbGate.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.UEbbGate.u_close goto Close;
          edge .Lock.UI.UEbbGate.u_open goto Open;
      end
      plant automaton UFloodGate:
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.UFloodGate.u_close goto Close;
          edge .Lock.UI.UFloodGate.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.UFloodGate.u_open goto Open;
          edge .Lock.UI.UFloodGate.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.UFloodGate.u_close goto Close;
          edge .Lock.UI.UFloodGate.u_open goto Open;
      end
      plant automaton DEbbGate:
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.DEbbGate.u_close goto Close;
          edge .Lock.UI.DEbbGate.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.DEbbGate.u_open goto Open;
          edge .Lock.UI.DEbbGate.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.DEbbGate.u_close goto Close;
          edge .Lock.UI.DEbbGate.u_open goto Open;
      end
      plant automaton DFloodGate:
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.DFloodGate.u_close goto Close;
          edge .Lock.UI.DFloodGate.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.DFloodGate.u_open goto Open;
          edge .Lock.UI.DFloodGate.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.DFloodGate.u_close goto Close;
          edge .Lock.UI.DFloodGate.u_open goto Open;
      end
      plant automaton DStormFloodGate:
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.DStormFloodGate.u_close goto Close;
          edge .Lock.UI.DStormFloodGate.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.DStormFloodGate.u_open goto Open;
          edge .Lock.UI.DStormFloodGate.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.DStormFloodGate.u_close goto Close;
          edge .Lock.UI.DStormFloodGate.u_open goto Open;
      end
      plant automaton UEbbPaddle:
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.UEbbPaddle.u_close goto Close;
          edge .Lock.UI.UEbbPaddle.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.UEbbPaddle.u_open goto Open;
          edge .Lock.UI.UEbbPaddle.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.UEbbPaddle.u_close goto Close;
          edge .Lock.UI.UEbbPaddle.u_open goto Open;
      end
      plant automaton UFloodPaddle:
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.UFloodPaddle.u_close goto Close;
          edge .Lock.UI.UFloodPaddle.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.UFloodPaddle.u_open goto Open;
          edge .Lock.UI.UFloodPaddle.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.UFloodPaddle.u_close goto Close;
          edge .Lock.UI.UFloodPaddle.u_open goto Open;
      end
      plant automaton DEbbPaddle:
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.DEbbPaddle.u_close goto Close;
          edge .Lock.UI.DEbbPaddle.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.DEbbPaddle.u_open goto Open;
          edge .Lock.UI.DEbbPaddle.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.DEbbPaddle.u_close goto Close;
          edge .Lock.UI.DEbbPaddle.u_open goto Open;
      end
      plant automaton DFloodPaddle:
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.DFloodPaddle.u_close goto Close;
          edge .Lock.UI.DFloodPaddle.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.DFloodPaddle.u_open goto Open;
          edge .Lock.UI.DFloodPaddle.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.DFloodPaddle.u_close goto Close;
          edge .Lock.UI.DFloodPaddle.u_open goto Open;
      end
      plant automaton DStormFloodPaddle:
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.DStormFloodPaddle.u_close goto Close;
          edge .Lock.UI.DStormFloodPaddle.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.DStormFloodPaddle.u_open goto Open;
          edge .Lock.UI.DStormFloodPaddle.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.DStormFloodPaddle.u_close goto Close;
          edge .Lock.UI.DStormFloodPaddle.u_open goto Open;
      end
      plant automaton DLockTrafficLight:
        location RedRed:
          marked;
          edge .Lock.UI.DLockTrafficLight.u_r goto Red;
        location Red:
          initial;
          marked;
          edge .Lock.UI.DLockTrafficLight.u_rr goto RedRed;
          edge .Lock.UI.DLockTrafficLight.u_rg goto RedGreen;
        location RedGreen:
          edge .Lock.UI.DLockTrafficLight.u_r goto Red;
          edge .Lock.UI.DLockTrafficLight.u_g goto Green;
        location Green:
          edge .Lock.UI.DLockTrafficLight.u_r goto Red;
      end
      plant automaton ULockTrafficLight:
        location RedRed:
          marked;
          edge .Lock.UI.ULockTrafficLight.u_r goto Red;
        location Red:
          initial;
          marked;
          edge .Lock.UI.ULockTrafficLight.u_rr goto RedRed;
          edge .Lock.UI.ULockTrafficLight.u_rg goto RedGreen;
        location RedGreen:
          edge .Lock.UI.ULockTrafficLight.u_r goto Red;
          edge .Lock.UI.ULockTrafficLight.u_g goto Green;
        location Green:
          edge .Lock.UI.ULockTrafficLight.u_r goto Red;
      end
      plant automaton DBridgeTraffigLight:
        location Red:
          initial;
          marked;
          edge .Lock.UI.DBridgeTraffigLight.u_g goto Green;
        location Green:
          edge .Lock.UI.DBridgeTraffigLight.u_r goto Red;
      end
    end
    plant automaton EmergencyStop:
      location Deactivated:
        initial;
        marked;
        edge .Lock.EmergencyStop.u_activate goto Activated;
      location Activated:
        edge .Lock.EmergencyStop.u_deactivate goto Deactivated;
    end
    group LTL:
      alg bool DRed = DE.Red and DW.Red;
      alg bool DRedRed = DE.RedRed and DW.RedRed;
      alg bool URed = UE.Red and UW.Red;
      alg bool URedRed = UE.RedRed and UW.RedRed;
      group DE:
        alg bool RedRed = Actuator.RedRed and SensorR1.On and SensorG.Off and SensorR2.On;
        alg bool Red = Actuator.Red and SensorR1.On and SensorG.Off and SensorR2.Off;
        alg bool RedGreen = Actuator.RedGreen and SensorR1.On and SensorG.On and SensorR2.Off;
        alg bool Green = Actuator.Green and SensorR1.Off and SensorG.On and SensorR2.Off;
        plant automaton Actuator:
          location RedRed:
            marked;
            edge .Lock.LTL.DE.Actuator.c_r, .Lock.LTL.DE.Actuator.c_emrg goto Red;
          location Red:
            initial;
            marked;
            edge .Lock.LTL.DE.Actuator.c_rr goto RedRed;
            edge .Lock.LTL.DE.Actuator.c_rg goto RedGreen;
          location RedGreen:
            edge .Lock.LTL.DE.Actuator.c_r, .Lock.LTL.DE.Actuator.c_emrg goto Red;
            edge .Lock.LTL.DE.Actuator.c_g goto Green;
          location Green:
            edge .Lock.LTL.DE.Actuator.c_r, .Lock.LTL.DE.Actuator.c_emrg goto Red;
        end
        plant automaton SensorR1:
          alg bool InitialLocationOn = true;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.LTL.DE.SensorR1.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.LTL.DE.SensorR1.u_off goto Off;
        end
        plant automaton SensorG:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.LTL.DE.SensorG.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.LTL.DE.SensorG.u_off goto Off;
        end
        plant automaton SensorR2:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.LTL.DE.SensorR2.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.LTL.DE.SensorR2.u_off goto Off;
        end
        plant automaton DynamicsR1:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge .Lock.LTL.DE.SensorR1.u_on when On;
            edge .Lock.LTL.DE.SensorR1.u_off when Off;
        end
        plant automaton DynamicsG:
          alg bool On = Actuator.Green or Actuator.RedGreen;
          alg bool Off = Actuator.Red or Actuator.RedRed;
          location:
            initial;
            marked;
            edge .Lock.LTL.DE.SensorG.u_on when On;
            edge .Lock.LTL.DE.SensorG.u_off when Off;
        end
        plant automaton DynamicsR2:
          alg bool On = Actuator.RedRed;
          alg bool Off = not Actuator.RedRed;
          location:
            initial;
            marked;
            edge .Lock.LTL.DE.SensorR2.u_on when On;
            edge .Lock.LTL.DE.SensorR2.u_off when Off;
        end
      end
      group DW:
        alg bool RedRed = Actuator.RedRed and SensorR1.On and SensorG.Off and SensorR2.On;
        alg bool Red = Actuator.Red and SensorR1.On and SensorG.Off and SensorR2.Off;
        alg bool RedGreen = Actuator.RedGreen and SensorR1.On and SensorG.On and SensorR2.Off;
        alg bool Green = Actuator.Green and SensorR1.Off and SensorG.On and SensorR2.Off;
        plant automaton Actuator:
          location RedRed:
            marked;
            edge .Lock.LTL.DW.Actuator.c_r, .Lock.LTL.DW.Actuator.c_emrg goto Red;
          location Red:
            initial;
            marked;
            edge .Lock.LTL.DW.Actuator.c_rr goto RedRed;
            edge .Lock.LTL.DW.Actuator.c_rg goto RedGreen;
          location RedGreen:
            edge .Lock.LTL.DW.Actuator.c_r, .Lock.LTL.DW.Actuator.c_emrg goto Red;
            edge .Lock.LTL.DW.Actuator.c_g goto Green;
          location Green:
            edge .Lock.LTL.DW.Actuator.c_r, .Lock.LTL.DW.Actuator.c_emrg goto Red;
        end
        plant automaton SensorR1:
          alg bool InitialLocationOn = true;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.LTL.DW.SensorR1.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.LTL.DW.SensorR1.u_off goto Off;
        end
        plant automaton SensorG:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.LTL.DW.SensorG.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.LTL.DW.SensorG.u_off goto Off;
        end
        plant automaton SensorR2:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.LTL.DW.SensorR2.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.LTL.DW.SensorR2.u_off goto Off;
        end
        plant automaton DynamicsR1:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge .Lock.LTL.DW.SensorR1.u_on when On;
            edge .Lock.LTL.DW.SensorR1.u_off when Off;
        end
        plant automaton DynamicsG:
          alg bool On = Actuator.Green or Actuator.RedGreen;
          alg bool Off = Actuator.Red or Actuator.RedRed;
          location:
            initial;
            marked;
            edge .Lock.LTL.DW.SensorG.u_on when On;
            edge .Lock.LTL.DW.SensorG.u_off when Off;
        end
        plant automaton DynamicsR2:
          alg bool On = Actuator.RedRed;
          alg bool Off = not Actuator.RedRed;
          location:
            initial;
            marked;
            edge .Lock.LTL.DW.SensorR2.u_on when On;
            edge .Lock.LTL.DW.SensorR2.u_off when Off;
        end
      end
      group UE:
        alg bool RedRed = Actuator.RedRed and SensorR1.On and SensorG.Off and SensorR2.On;
        alg bool Red = Actuator.Red and SensorR1.On and SensorG.Off and SensorR2.Off;
        alg bool RedGreen = Actuator.RedGreen and SensorR1.On and SensorG.On and SensorR2.Off;
        alg bool Green = Actuator.Green and SensorR1.Off and SensorG.On and SensorR2.Off;
        plant automaton Actuator:
          location RedRed:
            marked;
            edge .Lock.LTL.UE.Actuator.c_r, .Lock.LTL.UE.Actuator.c_emrg goto Red;
          location Red:
            initial;
            marked;
            edge .Lock.LTL.UE.Actuator.c_rr goto RedRed;
            edge .Lock.LTL.UE.Actuator.c_rg goto RedGreen;
          location RedGreen:
            edge .Lock.LTL.UE.Actuator.c_r, .Lock.LTL.UE.Actuator.c_emrg goto Red;
            edge .Lock.LTL.UE.Actuator.c_g goto Green;
          location Green:
            edge .Lock.LTL.UE.Actuator.c_r, .Lock.LTL.UE.Actuator.c_emrg goto Red;
        end
        plant automaton SensorR1:
          alg bool InitialLocationOn = true;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.LTL.UE.SensorR1.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.LTL.UE.SensorR1.u_off goto Off;
        end
        plant automaton SensorG:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.LTL.UE.SensorG.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.LTL.UE.SensorG.u_off goto Off;
        end
        plant automaton SensorR2:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.LTL.UE.SensorR2.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.LTL.UE.SensorR2.u_off goto Off;
        end
        plant automaton DynamicsR1:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge .Lock.LTL.UE.SensorR1.u_on when On;
            edge .Lock.LTL.UE.SensorR1.u_off when Off;
        end
        plant automaton DynamicsG:
          alg bool On = Actuator.Green or Actuator.RedGreen;
          alg bool Off = Actuator.Red or Actuator.RedRed;
          location:
            initial;
            marked;
            edge .Lock.LTL.UE.SensorG.u_on when On;
            edge .Lock.LTL.UE.SensorG.u_off when Off;
        end
        plant automaton DynamicsR2:
          alg bool On = Actuator.RedRed;
          alg bool Off = not Actuator.RedRed;
          location:
            initial;
            marked;
            edge .Lock.LTL.UE.SensorR2.u_on when On;
            edge .Lock.LTL.UE.SensorR2.u_off when Off;
        end
      end
      group UW:
        alg bool RedRed = Actuator.RedRed and SensorR1.On and SensorG.Off and SensorR2.On;
        alg bool Red = Actuator.Red and SensorR1.On and SensorG.Off and SensorR2.Off;
        alg bool RedGreen = Actuator.RedGreen and SensorR1.On and SensorG.On and SensorR2.Off;
        alg bool Green = Actuator.Green and SensorR1.Off and SensorG.On and SensorR2.Off;
        plant automaton Actuator:
          location RedRed:
            marked;
            edge .Lock.LTL.UW.Actuator.c_r, .Lock.LTL.UW.Actuator.c_emrg goto Red;
          location Red:
            initial;
            marked;
            edge .Lock.LTL.UW.Actuator.c_rr goto RedRed;
            edge .Lock.LTL.UW.Actuator.c_rg goto RedGreen;
          location RedGreen:
            edge .Lock.LTL.UW.Actuator.c_r, .Lock.LTL.UW.Actuator.c_emrg goto Red;
            edge .Lock.LTL.UW.Actuator.c_g goto Green;
          location Green:
            edge .Lock.LTL.UW.Actuator.c_r, .Lock.LTL.UW.Actuator.c_emrg goto Red;
        end
        plant automaton SensorR1:
          alg bool InitialLocationOn = true;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.LTL.UW.SensorR1.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.LTL.UW.SensorR1.u_off goto Off;
        end
        plant automaton SensorG:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.LTL.UW.SensorG.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.LTL.UW.SensorG.u_off goto Off;
        end
        plant automaton SensorR2:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.LTL.UW.SensorR2.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.LTL.UW.SensorR2.u_off goto Off;
        end
        plant automaton DynamicsR1:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge .Lock.LTL.UW.SensorR1.u_on when On;
            edge .Lock.LTL.UW.SensorR1.u_off when Off;
        end
        plant automaton DynamicsG:
          alg bool On = Actuator.Green or Actuator.RedGreen;
          alg bool Off = Actuator.Red or Actuator.RedRed;
          location:
            initial;
            marked;
            edge .Lock.LTL.UW.SensorG.u_on when On;
            edge .Lock.LTL.UW.SensorG.u_off when Off;
        end
        plant automaton DynamicsR2:
          alg bool On = Actuator.RedRed;
          alg bool Off = not Actuator.RedRed;
          location:
            initial;
            marked;
            edge .Lock.LTL.UW.SensorR2.u_on when On;
            edge .Lock.LTL.UW.SensorR2.u_off when Off;
        end
      end
    end
    group BTL:
      alg bool DRed = DE.Red and DW.Red;
      group DE:
        alg bool Red = Actuator.Red and SensorR.On and SensorG.Off;
        alg bool Green = Actuator.Green and SensorR.Off and SensorG.On;
        plant automaton Actuator:
          location Red:
            initial;
            marked;
            edge .Lock.BTL.DE.Actuator.c_g goto Green;
          location Green:
            edge .Lock.BTL.DE.Actuator.c_r, .Lock.BTL.DE.Actuator.c_emrg goto Red;
        end
        plant automaton SensorR:
          alg bool InitialLocationOn = true;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.BTL.DE.SensorR.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.BTL.DE.SensorR.u_off goto Off;
        end
        plant automaton SensorG:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.BTL.DE.SensorG.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.BTL.DE.SensorG.u_off goto Off;
        end
        plant automaton DynamicsR:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge .Lock.BTL.DE.SensorR.u_on when On;
            edge .Lock.BTL.DE.SensorR.u_off when Off;
        end
        plant automaton DynamicsG:
          alg bool On = not Actuator.Red;
          alg bool Off = Actuator.Red;
          location:
            initial;
            marked;
            edge .Lock.BTL.DE.SensorG.u_on when On;
            edge .Lock.BTL.DE.SensorG.u_off when Off;
        end
      end
      group DW:
        alg bool Red = Actuator.Red and SensorR.On and SensorG.Off;
        alg bool Green = Actuator.Green and SensorR.Off and SensorG.On;
        plant automaton Actuator:
          location Red:
            initial;
            marked;
            edge .Lock.BTL.DW.Actuator.c_g goto Green;
          location Green:
            edge .Lock.BTL.DW.Actuator.c_r, .Lock.BTL.DW.Actuator.c_emrg goto Red;
        end
        plant automaton SensorR:
          alg bool InitialLocationOn = true;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.BTL.DW.SensorR.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.BTL.DW.SensorR.u_off goto Off;
        end
        plant automaton SensorG:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.BTL.DW.SensorG.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.BTL.DW.SensorG.u_off goto Off;
        end
        plant automaton DynamicsR:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge .Lock.BTL.DW.SensorR.u_on when On;
            edge .Lock.BTL.DW.SensorR.u_off when Off;
        end
        plant automaton DynamicsG:
          alg bool On = not Actuator.Red;
          alg bool Off = Actuator.Red;
          location:
            initial;
            marked;
            edge .Lock.BTL.DW.SensorG.u_on when On;
            edge .Lock.BTL.DW.SensorG.u_off when Off;
        end
      end
    end
    group UpstreamEbb:
      alg bool GatesOpen = EastGate.Open and WestGate.Open;
      alg bool GatesClosed = EastGate.Closed and WestGate.Closed;
      alg bool GatesMoving = EastGate.Moving or WestGate.Moving;
      alg bool PaddlesOpen = EastPaddle.Open and WestPaddle.Open;
      alg bool PaddlesClosed = EastPaddle.Closed and WestPaddle.Closed;
      alg bool PaddlesMoving = EastPaddle.Moving or WestPaddle.Moving;
      alg bool Closed = GatesClosed and PaddlesClosed;
      alg bool Moving = GatesMoving or PaddlesMoving;
      group EastGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.UpstreamEbb.EastGate.Actuator.c_open goto Opening;
            edge .Lock.UpstreamEbb.EastGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.UpstreamEbb.EastGate.Actuator.c_emrgStop, .Lock.UpstreamEbb.EastGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.UpstreamEbb.EastGate.Actuator.c_emrgStop, .Lock.UpstreamEbb.EastGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.UpstreamEbb.EastGate.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.UpstreamEbb.EastGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.UpstreamEbb.EastGate.Sensor.u_closed_on goto Closed;
            edge .Lock.UpstreamEbb.EastGate.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.UpstreamEbb.EastGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.UpstreamEbb.EastGate.Sensor.u_open_on, .Lock.UpstreamEbb.EastGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.UpstreamEbb.EastGate.Sensor.u_closed_on, .Lock.UpstreamEbb.EastGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.UpstreamEbb.EastGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.UpstreamEbb.EastGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.UpstreamEbb.EastGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.UpstreamEbb.EastGate.Actuator.c_close needs not Sensor.Closed;
      end
      group WestGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.UpstreamEbb.WestGate.Actuator.c_open goto Opening;
            edge .Lock.UpstreamEbb.WestGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.UpstreamEbb.WestGate.Actuator.c_emrgStop, .Lock.UpstreamEbb.WestGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.UpstreamEbb.WestGate.Actuator.c_emrgStop, .Lock.UpstreamEbb.WestGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.UpstreamEbb.WestGate.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.UpstreamEbb.WestGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.UpstreamEbb.WestGate.Sensor.u_closed_on goto Closed;
            edge .Lock.UpstreamEbb.WestGate.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.UpstreamEbb.WestGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.UpstreamEbb.WestGate.Sensor.u_open_on, .Lock.UpstreamEbb.WestGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.UpstreamEbb.WestGate.Sensor.u_closed_on, .Lock.UpstreamEbb.WestGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.UpstreamEbb.WestGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.UpstreamEbb.WestGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.UpstreamEbb.WestGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.UpstreamEbb.WestGate.Actuator.c_close needs not Sensor.Closed;
      end
      group EastPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.UpstreamEbb.EastPaddle.Actuator.c_open goto Opening;
            edge .Lock.UpstreamEbb.EastPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.UpstreamEbb.EastPaddle.Actuator.c_emrgStop, .Lock.UpstreamEbb.EastPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.UpstreamEbb.EastPaddle.Actuator.c_emrgStop, .Lock.UpstreamEbb.EastPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.UpstreamEbb.EastPaddle.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.UpstreamEbb.EastPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.UpstreamEbb.EastPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.UpstreamEbb.EastPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.UpstreamEbb.EastPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.UpstreamEbb.EastPaddle.Sensor.u_open_on, .Lock.UpstreamEbb.EastPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.UpstreamEbb.EastPaddle.Sensor.u_closed_on, .Lock.UpstreamEbb.EastPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.UpstreamEbb.EastPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.UpstreamEbb.EastPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.UpstreamEbb.EastPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.UpstreamEbb.EastPaddle.Actuator.c_close needs not Sensor.Closed;
      end
      group WestPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.UpstreamEbb.WestPaddle.Actuator.c_open goto Opening;
            edge .Lock.UpstreamEbb.WestPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.UpstreamEbb.WestPaddle.Actuator.c_emrgStop, .Lock.UpstreamEbb.WestPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.UpstreamEbb.WestPaddle.Actuator.c_emrgStop, .Lock.UpstreamEbb.WestPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.UpstreamEbb.WestPaddle.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.UpstreamEbb.WestPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.UpstreamEbb.WestPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.UpstreamEbb.WestPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.UpstreamEbb.WestPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.UpstreamEbb.WestPaddle.Sensor.u_open_on, .Lock.UpstreamEbb.WestPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.UpstreamEbb.WestPaddle.Sensor.u_closed_on, .Lock.UpstreamEbb.WestPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.UpstreamEbb.WestPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.UpstreamEbb.WestPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.UpstreamEbb.WestPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.UpstreamEbb.WestPaddle.Actuator.c_close needs not Sensor.Closed;
      end
    end
    group UpstreamFlood:
      alg bool GatesOpen = EastGate.Open and WestGate.Open;
      alg bool GatesClosed = EastGate.Closed and WestGate.Closed;
      alg bool GatesMoving = EastGate.Moving or WestGate.Moving;
      alg bool PaddlesOpen = EastPaddle.Open and WestPaddle.Open;
      alg bool PaddlesClosed = EastPaddle.Closed and WestPaddle.Closed;
      alg bool PaddlesMoving = EastPaddle.Moving or WestPaddle.Moving;
      alg bool Closed = GatesClosed and PaddlesClosed;
      alg bool Moving = GatesMoving or PaddlesMoving;
      group EastGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.UpstreamFlood.EastGate.Actuator.c_open goto Opening;
            edge .Lock.UpstreamFlood.EastGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.UpstreamFlood.EastGate.Actuator.c_emrgStop, .Lock.UpstreamFlood.EastGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.UpstreamFlood.EastGate.Actuator.c_emrgStop, .Lock.UpstreamFlood.EastGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.UpstreamFlood.EastGate.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.UpstreamFlood.EastGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.UpstreamFlood.EastGate.Sensor.u_closed_on goto Closed;
            edge .Lock.UpstreamFlood.EastGate.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.UpstreamFlood.EastGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.UpstreamFlood.EastGate.Sensor.u_open_on, .Lock.UpstreamFlood.EastGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.UpstreamFlood.EastGate.Sensor.u_closed_on, .Lock.UpstreamFlood.EastGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_close needs not Sensor.Closed;
      end
      group WestGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.UpstreamFlood.WestGate.Actuator.c_open goto Opening;
            edge .Lock.UpstreamFlood.WestGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.UpstreamFlood.WestGate.Actuator.c_emrgStop, .Lock.UpstreamFlood.WestGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.UpstreamFlood.WestGate.Actuator.c_emrgStop, .Lock.UpstreamFlood.WestGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.UpstreamFlood.WestGate.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.UpstreamFlood.WestGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.UpstreamFlood.WestGate.Sensor.u_closed_on goto Closed;
            edge .Lock.UpstreamFlood.WestGate.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.UpstreamFlood.WestGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.UpstreamFlood.WestGate.Sensor.u_open_on, .Lock.UpstreamFlood.WestGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.UpstreamFlood.WestGate.Sensor.u_closed_on, .Lock.UpstreamFlood.WestGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_close needs not Sensor.Closed;
      end
      group EastPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.UpstreamFlood.EastPaddle.Actuator.c_open goto Opening;
            edge .Lock.UpstreamFlood.EastPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.UpstreamFlood.EastPaddle.Actuator.c_emrgStop, .Lock.UpstreamFlood.EastPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.UpstreamFlood.EastPaddle.Actuator.c_emrgStop, .Lock.UpstreamFlood.EastPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.UpstreamFlood.EastPaddle.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.UpstreamFlood.EastPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.UpstreamFlood.EastPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.UpstreamFlood.EastPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.UpstreamFlood.EastPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.UpstreamFlood.EastPaddle.Sensor.u_open_on, .Lock.UpstreamFlood.EastPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.UpstreamFlood.EastPaddle.Sensor.u_closed_on, .Lock.UpstreamFlood.EastPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.UpstreamFlood.EastPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.UpstreamFlood.EastPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.UpstreamFlood.EastPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.UpstreamFlood.EastPaddle.Actuator.c_close needs not Sensor.Closed;
      end
      group WestPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.UpstreamFlood.WestPaddle.Actuator.c_open goto Opening;
            edge .Lock.UpstreamFlood.WestPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.UpstreamFlood.WestPaddle.Actuator.c_emrgStop, .Lock.UpstreamFlood.WestPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.UpstreamFlood.WestPaddle.Actuator.c_emrgStop, .Lock.UpstreamFlood.WestPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.UpstreamFlood.WestPaddle.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.UpstreamFlood.WestPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.UpstreamFlood.WestPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.UpstreamFlood.WestPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.UpstreamFlood.WestPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.UpstreamFlood.WestPaddle.Sensor.u_open_on, .Lock.UpstreamFlood.WestPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.UpstreamFlood.WestPaddle.Sensor.u_closed_on, .Lock.UpstreamFlood.WestPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.UpstreamFlood.WestPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.UpstreamFlood.WestPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.UpstreamFlood.WestPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.UpstreamFlood.WestPaddle.Actuator.c_close needs not Sensor.Closed;
      end
    end
    group DownstreamEbb:
      alg bool GatesOpen = EastGate.Open and WestGate.Open;
      alg bool GatesClosed = EastGate.Closed and WestGate.Closed;
      alg bool GatesMoving = EastGate.Moving or WestGate.Moving;
      alg bool PaddlesOpen = EastPaddle.Open and WestPaddle.Open;
      alg bool PaddlesClosed = EastPaddle.Closed and WestPaddle.Closed;
      alg bool PaddlesMoving = EastPaddle.Moving or WestPaddle.Moving;
      alg bool Closed = GatesClosed and PaddlesClosed;
      alg bool Moving = GatesMoving or PaddlesMoving;
      group EastGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamEbb.EastGate.Actuator.c_open goto Opening;
            edge .Lock.DownstreamEbb.EastGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamEbb.EastGate.Actuator.c_emrgStop, .Lock.DownstreamEbb.EastGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamEbb.EastGate.Actuator.c_emrgStop, .Lock.DownstreamEbb.EastGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.DownstreamEbb.EastGate.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamEbb.EastGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamEbb.EastGate.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamEbb.EastGate.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.DownstreamEbb.EastGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamEbb.EastGate.Sensor.u_open_on, .Lock.DownstreamEbb.EastGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamEbb.EastGate.Sensor.u_closed_on, .Lock.DownstreamEbb.EastGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamEbb.EastGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamEbb.EastGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamEbb.EastGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamEbb.EastGate.Actuator.c_close needs not Sensor.Closed;
      end
      group WestGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamEbb.WestGate.Actuator.c_open goto Opening;
            edge .Lock.DownstreamEbb.WestGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamEbb.WestGate.Actuator.c_emrgStop, .Lock.DownstreamEbb.WestGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamEbb.WestGate.Actuator.c_emrgStop, .Lock.DownstreamEbb.WestGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.DownstreamEbb.WestGate.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamEbb.WestGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamEbb.WestGate.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamEbb.WestGate.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.DownstreamEbb.WestGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamEbb.WestGate.Sensor.u_open_on, .Lock.DownstreamEbb.WestGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamEbb.WestGate.Sensor.u_closed_on, .Lock.DownstreamEbb.WestGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamEbb.WestGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamEbb.WestGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamEbb.WestGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamEbb.WestGate.Actuator.c_close needs not Sensor.Closed;
      end
      group EastPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamEbb.EastPaddle.Actuator.c_open goto Opening;
            edge .Lock.DownstreamEbb.EastPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamEbb.EastPaddle.Actuator.c_emrgStop, .Lock.DownstreamEbb.EastPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamEbb.EastPaddle.Actuator.c_emrgStop, .Lock.DownstreamEbb.EastPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.DownstreamEbb.EastPaddle.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamEbb.EastPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamEbb.EastPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamEbb.EastPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.DownstreamEbb.EastPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamEbb.EastPaddle.Sensor.u_open_on, .Lock.DownstreamEbb.EastPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamEbb.EastPaddle.Sensor.u_closed_on, .Lock.DownstreamEbb.EastPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamEbb.EastPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamEbb.EastPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamEbb.EastPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamEbb.EastPaddle.Actuator.c_close needs not Sensor.Closed;
      end
      group WestPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamEbb.WestPaddle.Actuator.c_open goto Opening;
            edge .Lock.DownstreamEbb.WestPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamEbb.WestPaddle.Actuator.c_emrgStop, .Lock.DownstreamEbb.WestPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamEbb.WestPaddle.Actuator.c_emrgStop, .Lock.DownstreamEbb.WestPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.DownstreamEbb.WestPaddle.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamEbb.WestPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamEbb.WestPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamEbb.WestPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.DownstreamEbb.WestPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamEbb.WestPaddle.Sensor.u_open_on, .Lock.DownstreamEbb.WestPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamEbb.WestPaddle.Sensor.u_closed_on, .Lock.DownstreamEbb.WestPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamEbb.WestPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamEbb.WestPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamEbb.WestPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamEbb.WestPaddle.Actuator.c_close needs not Sensor.Closed;
      end
    end
    group DownstreamFlood:
      alg bool GatesOpen = EastGate.Open and WestGate.Open;
      alg bool GatesClosed = EastGate.Closed and WestGate.Closed;
      alg bool GatesMoving = EastGate.Moving or WestGate.Moving;
      alg bool PaddlesOpen = EastPaddle.Open and WestPaddle.Open;
      alg bool PaddlesClosed = EastPaddle.Closed and WestPaddle.Closed;
      alg bool PaddlesMoving = EastPaddle.Moving or WestPaddle.Moving;
      alg bool Closed = GatesClosed and PaddlesClosed;
      alg bool Moving = GatesMoving or PaddlesMoving;
      group EastGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamFlood.EastGate.Actuator.c_open goto Opening;
            edge .Lock.DownstreamFlood.EastGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamFlood.EastGate.Actuator.c_emrgStop, .Lock.DownstreamFlood.EastGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamFlood.EastGate.Actuator.c_emrgStop, .Lock.DownstreamFlood.EastGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.DownstreamFlood.EastGate.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamFlood.EastGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamFlood.EastGate.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamFlood.EastGate.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.DownstreamFlood.EastGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamFlood.EastGate.Sensor.u_open_on, .Lock.DownstreamFlood.EastGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamFlood.EastGate.Sensor.u_closed_on, .Lock.DownstreamFlood.EastGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_close needs not Sensor.Closed;
      end
      group WestGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamFlood.WestGate.Actuator.c_open goto Opening;
            edge .Lock.DownstreamFlood.WestGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamFlood.WestGate.Actuator.c_emrgStop, .Lock.DownstreamFlood.WestGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamFlood.WestGate.Actuator.c_emrgStop, .Lock.DownstreamFlood.WestGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.DownstreamFlood.WestGate.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamFlood.WestGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamFlood.WestGate.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamFlood.WestGate.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.DownstreamFlood.WestGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamFlood.WestGate.Sensor.u_open_on, .Lock.DownstreamFlood.WestGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamFlood.WestGate.Sensor.u_closed_on, .Lock.DownstreamFlood.WestGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_close needs not Sensor.Closed;
      end
      group EastPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamFlood.EastPaddle.Actuator.c_open goto Opening;
            edge .Lock.DownstreamFlood.EastPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamFlood.EastPaddle.Actuator.c_emrgStop, .Lock.DownstreamFlood.EastPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamFlood.EastPaddle.Actuator.c_emrgStop, .Lock.DownstreamFlood.EastPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.DownstreamFlood.EastPaddle.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamFlood.EastPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamFlood.EastPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamFlood.EastPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.DownstreamFlood.EastPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamFlood.EastPaddle.Sensor.u_open_on, .Lock.DownstreamFlood.EastPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamFlood.EastPaddle.Sensor.u_closed_on, .Lock.DownstreamFlood.EastPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamFlood.EastPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamFlood.EastPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamFlood.EastPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamFlood.EastPaddle.Actuator.c_close needs not Sensor.Closed;
      end
      group WestPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamFlood.WestPaddle.Actuator.c_open goto Opening;
            edge .Lock.DownstreamFlood.WestPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamFlood.WestPaddle.Actuator.c_emrgStop, .Lock.DownstreamFlood.WestPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamFlood.WestPaddle.Actuator.c_emrgStop, .Lock.DownstreamFlood.WestPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.DownstreamFlood.WestPaddle.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamFlood.WestPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamFlood.WestPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamFlood.WestPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.DownstreamFlood.WestPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamFlood.WestPaddle.Sensor.u_open_on, .Lock.DownstreamFlood.WestPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamFlood.WestPaddle.Sensor.u_closed_on, .Lock.DownstreamFlood.WestPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamFlood.WestPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamFlood.WestPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamFlood.WestPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamFlood.WestPaddle.Actuator.c_close needs not Sensor.Closed;
      end
    end
    group DownstreamStormFlood:
      alg bool GatesOpen = EastGate.Open and WestGate.Open;
      alg bool GatesClosed = EastGate.Closed and WestGate.Closed;
      alg bool GatesMoving = EastGate.Moving or WestGate.Moving;
      alg bool PaddlesOpen = EastPaddle.Open and WestPaddle.Open;
      alg bool PaddlesClosed = EastPaddle.Closed and WestPaddle.Closed;
      alg bool PaddlesMoving = EastPaddle.Moving or WestPaddle.Moving;
      alg bool Closed = GatesClosed and PaddlesClosed;
      alg bool Moving = GatesMoving or PaddlesMoving;
      group EastGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamStormFlood.EastGate.Actuator.c_open goto Opening;
            edge .Lock.DownstreamStormFlood.EastGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamStormFlood.EastGate.Actuator.c_emrgStop, .Lock.DownstreamStormFlood.EastGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamStormFlood.EastGate.Actuator.c_emrgStop, .Lock.DownstreamStormFlood.EastGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.DownstreamStormFlood.EastGate.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamStormFlood.EastGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamStormFlood.EastGate.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamStormFlood.EastGate.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.DownstreamStormFlood.EastGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamStormFlood.EastGate.Sensor.u_open_on, .Lock.DownstreamStormFlood.EastGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamStormFlood.EastGate.Sensor.u_closed_on, .Lock.DownstreamStormFlood.EastGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_close needs not Sensor.Closed;
      end
      group WestGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamStormFlood.WestGate.Actuator.c_open goto Opening;
            edge .Lock.DownstreamStormFlood.WestGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamStormFlood.WestGate.Actuator.c_emrgStop, .Lock.DownstreamStormFlood.WestGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamStormFlood.WestGate.Actuator.c_emrgStop, .Lock.DownstreamStormFlood.WestGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.DownstreamStormFlood.WestGate.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamStormFlood.WestGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamStormFlood.WestGate.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamStormFlood.WestGate.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.DownstreamStormFlood.WestGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamStormFlood.WestGate.Sensor.u_open_on, .Lock.DownstreamStormFlood.WestGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamStormFlood.WestGate.Sensor.u_closed_on, .Lock.DownstreamStormFlood.WestGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_close needs not Sensor.Closed;
      end
      group EastPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_open goto Opening;
            edge .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_emrgStop, .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_emrgStop, .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.DownstreamStormFlood.EastPaddle.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamStormFlood.EastPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamStormFlood.EastPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamStormFlood.EastPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.DownstreamStormFlood.EastPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamStormFlood.EastPaddle.Sensor.u_open_on, .Lock.DownstreamStormFlood.EastPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamStormFlood.EastPaddle.Sensor.u_closed_on, .Lock.DownstreamStormFlood.EastPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_close needs not Sensor.Closed;
      end
      group WestPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        alg bool InitialLocationClosed = true;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_open goto Opening;
            edge .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_emrgStop, .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_emrgStop, .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = .sup.Lock.DownstreamStormFlood.WestPaddle.InitialLocationClosed;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamStormFlood.WestPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamStormFlood.WestPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamStormFlood.WestPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            marked not InitialLocationClosed;
            edge .Lock.DownstreamStormFlood.WestPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamStormFlood.WestPaddle.Sensor.u_open_on, .Lock.DownstreamStormFlood.WestPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamStormFlood.WestPaddle.Sensor.u_closed_on, .Lock.DownstreamStormFlood.WestPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_close needs not Sensor.Closed;
      end
    end
    plant automaton EqualWaterUpstream:
      alg bool InitialLocationOn = false;
      location Off:
        initial not InitialLocationOn;
        marked not InitialLocationOn;
        edge .Lock.EqualWaterUpstream.u_on goto On;
      location On:
        initial InitialLocationOn;
        marked InitialLocationOn;
        edge .Lock.EqualWaterUpstream.u_off goto Off;
    end
    plant automaton EqualWaterDownstream:
      alg bool InitialLocationOn = true;
      location Off:
        initial not InitialLocationOn;
        marked not InitialLocationOn;
        edge .Lock.EqualWaterDownstream.u_on goto On;
      location On:
        initial InitialLocationOn;
        marked InitialLocationOn;
        edge .Lock.EqualWaterDownstream.u_off goto Off;
    end
  end
  supervisor automaton sup:
    alphabet .Lock.LTL.DE.Actuator.c_r, .Lock.LTL.DE.Actuator.c_emrg, .Lock.LTL.DE.Actuator.c_rr, .Lock.LTL.DE.Actuator.c_rg, .Lock.LTL.DE.Actuator.c_g, .Lock.LTL.DW.Actuator.c_r, .Lock.LTL.DW.Actuator.c_emrg, .Lock.LTL.DW.Actuator.c_rr, .Lock.LTL.DW.Actuator.c_rg, .Lock.LTL.DW.Actuator.c_g, .Lock.LTL.UE.Actuator.c_r, .Lock.LTL.UE.Actuator.c_emrg, .Lock.LTL.UE.Actuator.c_rr, .Lock.LTL.UE.Actuator.c_rg, .Lock.LTL.UE.Actuator.c_g, .Lock.LTL.UW.Actuator.c_r, .Lock.LTL.UW.Actuator.c_emrg, .Lock.LTL.UW.Actuator.c_rr, .Lock.LTL.UW.Actuator.c_rg, .Lock.LTL.UW.Actuator.c_g, .Lock.BTL.DE.Actuator.c_g, .Lock.BTL.DE.Actuator.c_r, .Lock.BTL.DE.Actuator.c_emrg, .Lock.BTL.DW.Actuator.c_g, .Lock.BTL.DW.Actuator.c_r, .Lock.BTL.DW.Actuator.c_emrg, .Lock.UpstreamEbb.EastGate.Actuator.c_open, .Lock.UpstreamEbb.EastGate.Actuator.c_close, .Lock.UpstreamEbb.EastGate.Actuator.c_emrgStop, .Lock.UpstreamEbb.EastGate.Actuator.c_endStopOpening, .Lock.UpstreamEbb.EastGate.Actuator.c_endStopClosing, .Lock.UpstreamEbb.WestGate.Actuator.c_open, .Lock.UpstreamEbb.WestGate.Actuator.c_close, .Lock.UpstreamEbb.WestGate.Actuator.c_emrgStop, .Lock.UpstreamEbb.WestGate.Actuator.c_endStopOpening, .Lock.UpstreamEbb.WestGate.Actuator.c_endStopClosing, .Lock.UpstreamEbb.EastPaddle.Actuator.c_open, .Lock.UpstreamEbb.EastPaddle.Actuator.c_close, .Lock.UpstreamEbb.EastPaddle.Actuator.c_emrgStop, .Lock.UpstreamEbb.EastPaddle.Actuator.c_endStopOpening, .Lock.UpstreamEbb.EastPaddle.Actuator.c_endStopClosing, .Lock.UpstreamEbb.WestPaddle.Actuator.c_open, .Lock.UpstreamEbb.WestPaddle.Actuator.c_close, .Lock.UpstreamEbb.WestPaddle.Actuator.c_emrgStop, .Lock.UpstreamEbb.WestPaddle.Actuator.c_endStopOpening, .Lock.UpstreamEbb.WestPaddle.Actuator.c_endStopClosing, .Lock.UpstreamFlood.EastGate.Actuator.c_open, .Lock.UpstreamFlood.EastGate.Actuator.c_close, .Lock.UpstreamFlood.EastGate.Actuator.c_emrgStop, .Lock.UpstreamFlood.EastGate.Actuator.c_endStopOpening, .Lock.UpstreamFlood.EastGate.Actuator.c_endStopClosing, .Lock.UpstreamFlood.WestGate.Actuator.c_open, .Lock.UpstreamFlood.WestGate.Actuator.c_close, .Lock.UpstreamFlood.WestGate.Actuator.c_emrgStop, .Lock.UpstreamFlood.WestGate.Actuator.c_endStopOpening, .Lock.UpstreamFlood.WestGate.Actuator.c_endStopClosing, .Lock.UpstreamFlood.EastPaddle.Actuator.c_open, .Lock.UpstreamFlood.EastPaddle.Actuator.c_close, .Lock.UpstreamFlood.EastPaddle.Actuator.c_emrgStop, .Lock.UpstreamFlood.EastPaddle.Actuator.c_endStopOpening, .Lock.UpstreamFlood.EastPaddle.Actuator.c_endStopClosing, .Lock.UpstreamFlood.WestPaddle.Actuator.c_open, .Lock.UpstreamFlood.WestPaddle.Actuator.c_close, .Lock.UpstreamFlood.WestPaddle.Actuator.c_emrgStop, .Lock.UpstreamFlood.WestPaddle.Actuator.c_endStopOpening, .Lock.UpstreamFlood.WestPaddle.Actuator.c_endStopClosing, .Lock.DownstreamEbb.EastGate.Actuator.c_open, .Lock.DownstreamEbb.EastGate.Actuator.c_close, .Lock.DownstreamEbb.EastGate.Actuator.c_emrgStop, .Lock.DownstreamEbb.EastGate.Actuator.c_endStopOpening, .Lock.DownstreamEbb.EastGate.Actuator.c_endStopClosing, .Lock.DownstreamEbb.WestGate.Actuator.c_open, .Lock.DownstreamEbb.WestGate.Actuator.c_close, .Lock.DownstreamEbb.WestGate.Actuator.c_emrgStop, .Lock.DownstreamEbb.WestGate.Actuator.c_endStopOpening, .Lock.DownstreamEbb.WestGate.Actuator.c_endStopClosing, .Lock.DownstreamEbb.EastPaddle.Actuator.c_open, .Lock.DownstreamEbb.EastPaddle.Actuator.c_close, .Lock.DownstreamEbb.EastPaddle.Actuator.c_emrgStop, .Lock.DownstreamEbb.EastPaddle.Actuator.c_endStopOpening, .Lock.DownstreamEbb.EastPaddle.Actuator.c_endStopClosing, .Lock.DownstreamEbb.WestPaddle.Actuator.c_open, .Lock.DownstreamEbb.WestPaddle.Actuator.c_close, .Lock.DownstreamEbb.WestPaddle.Actuator.c_emrgStop, .Lock.DownstreamEbb.WestPaddle.Actuator.c_endStopOpening, .Lock.DownstreamEbb.WestPaddle.Actuator.c_endStopClosing, .Lock.DownstreamFlood.EastGate.Actuator.c_open, .Lock.DownstreamFlood.EastGate.Actuator.c_close, .Lock.DownstreamFlood.EastGate.Actuator.c_emrgStop, .Lock.DownstreamFlood.EastGate.Actuator.c_endStopOpening, .Lock.DownstreamFlood.EastGate.Actuator.c_endStopClosing, .Lock.DownstreamFlood.WestGate.Actuator.c_open, .Lock.DownstreamFlood.WestGate.Actuator.c_close, .Lock.DownstreamFlood.WestGate.Actuator.c_emrgStop, .Lock.DownstreamFlood.WestGate.Actuator.c_endStopOpening, .Lock.DownstreamFlood.WestGate.Actuator.c_endStopClosing, .Lock.DownstreamFlood.EastPaddle.Actuator.c_open, .Lock.DownstreamFlood.EastPaddle.Actuator.c_close, .Lock.DownstreamFlood.EastPaddle.Actuator.c_emrgStop, .Lock.DownstreamFlood.EastPaddle.Actuator.c_endStopOpening, .Lock.DownstreamFlood.EastPaddle.Actuator.c_endStopClosing, .Lock.DownstreamFlood.WestPaddle.Actuator.c_open, .Lock.DownstreamFlood.WestPaddle.Actuator.c_close, .Lock.DownstreamFlood.WestPaddle.Actuator.c_emrgStop, .Lock.DownstreamFlood.WestPaddle.Actuator.c_endStopOpening, .Lock.DownstreamFlood.WestPaddle.Actuator.c_endStopClosing, .Lock.DownstreamStormFlood.EastGate.Actuator.c_open, .Lock.DownstreamStormFlood.EastGate.Actuator.c_close, .Lock.DownstreamStormFlood.EastGate.Actuator.c_emrgStop, .Lock.DownstreamStormFlood.EastGate.Actuator.c_endStopOpening, .Lock.DownstreamStormFlood.EastGate.Actuator.c_endStopClosing, .Lock.DownstreamStormFlood.WestGate.Actuator.c_open, .Lock.DownstreamStormFlood.WestGate.Actuator.c_close, .Lock.DownstreamStormFlood.WestGate.Actuator.c_emrgStop, .Lock.DownstreamStormFlood.WestGate.Actuator.c_endStopOpening, .Lock.DownstreamStormFlood.WestGate.Actuator.c_endStopClosing, .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_open, .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_close, .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_emrgStop, .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_endStopOpening, .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_endStopClosing, .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_open, .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_close, .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_emrgStop, .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_endStopOpening, .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_endStopClosing;
    location:
      initial;
      marked;
      edge .Lock.BTL.DE.Actuator.c_emrg when true;
      edge .Lock.BTL.DE.Actuator.c_g when true;
      edge .Lock.BTL.DE.Actuator.c_r when true;
      edge .Lock.BTL.DW.Actuator.c_emrg when true;
      edge .Lock.BTL.DW.Actuator.c_g when true;
      edge .Lock.BTL.DW.Actuator.c_r when true;
      edge .Lock.DownstreamEbb.EastGate.Actuator.c_close when true;
      edge .Lock.DownstreamEbb.EastGate.Actuator.c_emrgStop when true;
      edge .Lock.DownstreamEbb.EastGate.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamEbb.EastGate.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamEbb.EastGate.Actuator.c_open when Lock.DownstreamEbb.EastPaddle.Actuator.Rest and Lock.DownstreamEbb.EastPaddle.Sensor.Open;
      edge .Lock.DownstreamEbb.EastPaddle.Actuator.c_close when not Lock.DownstreamEbb.EastPaddle.Sensor.Intermediate and (Lock.DownstreamEbb.EastGate.Actuator.Rest and Lock.DownstreamEbb.EastGate.Sensor.Closed) or Lock.DownstreamEbb.EastPaddle.Sensor.Intermediate;
      edge .Lock.DownstreamEbb.EastPaddle.Actuator.c_emrgStop when true;
      edge .Lock.DownstreamEbb.EastPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamEbb.EastPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamEbb.EastPaddle.Actuator.c_open when true;
      edge .Lock.DownstreamEbb.WestGate.Actuator.c_close when true;
      edge .Lock.DownstreamEbb.WestGate.Actuator.c_emrgStop when true;
      edge .Lock.DownstreamEbb.WestGate.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamEbb.WestGate.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamEbb.WestGate.Actuator.c_open when Lock.DownstreamEbb.WestPaddle.Actuator.Rest and Lock.DownstreamEbb.WestPaddle.Sensor.Open;
      edge .Lock.DownstreamEbb.WestPaddle.Actuator.c_close when Lock.DownstreamEbb.WestGate.Actuator.Rest and Lock.DownstreamEbb.WestGate.Sensor.Closed;
      edge .Lock.DownstreamEbb.WestPaddle.Actuator.c_emrgStop when true;
      edge .Lock.DownstreamEbb.WestPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamEbb.WestPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamEbb.WestPaddle.Actuator.c_open when true;
      edge .Lock.DownstreamFlood.EastGate.Actuator.c_close when true;
      edge .Lock.DownstreamFlood.EastGate.Actuator.c_emrgStop when true;
      edge .Lock.DownstreamFlood.EastGate.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamFlood.EastGate.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamFlood.EastGate.Actuator.c_open when Lock.DownstreamFlood.EastPaddle.Actuator.Rest and Lock.DownstreamFlood.EastPaddle.Sensor.Open;
      edge .Lock.DownstreamFlood.EastPaddle.Actuator.c_close when Lock.DownstreamFlood.EastGate.Actuator.Rest and Lock.DownstreamFlood.EastGate.Sensor.Closed;
      edge .Lock.DownstreamFlood.EastPaddle.Actuator.c_emrgStop when true;
      edge .Lock.DownstreamFlood.EastPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamFlood.EastPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamFlood.EastPaddle.Actuator.c_open when true;
      edge .Lock.DownstreamFlood.WestGate.Actuator.c_close when true;
      edge .Lock.DownstreamFlood.WestGate.Actuator.c_emrgStop when true;
      edge .Lock.DownstreamFlood.WestGate.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamFlood.WestGate.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamFlood.WestGate.Actuator.c_open when Lock.DownstreamFlood.WestPaddle.Actuator.Rest and Lock.DownstreamFlood.WestPaddle.Sensor.Open;
      edge .Lock.DownstreamFlood.WestPaddle.Actuator.c_close when Lock.DownstreamFlood.WestGate.Actuator.Rest and Lock.DownstreamFlood.WestGate.Sensor.Closed;
      edge .Lock.DownstreamFlood.WestPaddle.Actuator.c_emrgStop when true;
      edge .Lock.DownstreamFlood.WestPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamFlood.WestPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamFlood.WestPaddle.Actuator.c_open when true;
      edge .Lock.DownstreamStormFlood.EastGate.Actuator.c_close when true;
      edge .Lock.DownstreamStormFlood.EastGate.Actuator.c_emrgStop when true;
      edge .Lock.DownstreamStormFlood.EastGate.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamStormFlood.EastGate.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamStormFlood.EastGate.Actuator.c_open when Lock.DownstreamStormFlood.EastPaddle.Actuator.Rest and Lock.DownstreamStormFlood.EastPaddle.Sensor.Open;
      edge .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_close when Lock.DownstreamStormFlood.EastGate.Actuator.Rest and Lock.DownstreamStormFlood.EastGate.Sensor.Closed;
      edge .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_emrgStop when true;
      edge .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_open when true;
      edge .Lock.DownstreamStormFlood.WestGate.Actuator.c_close when true;
      edge .Lock.DownstreamStormFlood.WestGate.Actuator.c_emrgStop when true;
      edge .Lock.DownstreamStormFlood.WestGate.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamStormFlood.WestGate.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamStormFlood.WestGate.Actuator.c_open when Lock.DownstreamStormFlood.WestPaddle.Sensor.Open and Lock.DownstreamStormFlood.WestPaddle.Actuator.Rest;
      edge .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_close when Lock.DownstreamStormFlood.WestGate.Sensor.Closed and Lock.DownstreamStormFlood.WestGate.Actuator.Rest;
      edge .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_emrgStop when true;
      edge .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_open when true;
      edge .Lock.LTL.DE.Actuator.c_emrg when true;
      edge .Lock.LTL.DE.Actuator.c_g when true;
      edge .Lock.LTL.DE.Actuator.c_r when true;
      edge .Lock.LTL.DE.Actuator.c_rg when true;
      edge .Lock.LTL.DE.Actuator.c_rr when true;
      edge .Lock.LTL.DW.Actuator.c_emrg when true;
      edge .Lock.LTL.DW.Actuator.c_g when true;
      edge .Lock.LTL.DW.Actuator.c_r when true;
      edge .Lock.LTL.DW.Actuator.c_rg when true;
      edge .Lock.LTL.DW.Actuator.c_rr when true;
      edge .Lock.LTL.UE.Actuator.c_emrg when true;
      edge .Lock.LTL.UE.Actuator.c_g when true;
      edge .Lock.LTL.UE.Actuator.c_r when true;
      edge .Lock.LTL.UE.Actuator.c_rg when true;
      edge .Lock.LTL.UE.Actuator.c_rr when true;
      edge .Lock.LTL.UW.Actuator.c_emrg when true;
      edge .Lock.LTL.UW.Actuator.c_g when true;
      edge .Lock.LTL.UW.Actuator.c_r when true;
      edge .Lock.LTL.UW.Actuator.c_rg when true;
      edge .Lock.LTL.UW.Actuator.c_rr when true;
      edge .Lock.UpstreamEbb.EastGate.Actuator.c_close when true;
      edge .Lock.UpstreamEbb.EastGate.Actuator.c_emrgStop when true;
      edge .Lock.UpstreamEbb.EastGate.Actuator.c_endStopClosing when true;
      edge .Lock.UpstreamEbb.EastGate.Actuator.c_endStopOpening when true;
      edge .Lock.UpstreamEbb.EastGate.Actuator.c_open when Lock.UpstreamEbb.EastPaddle.Actuator.Rest and Lock.UpstreamEbb.EastPaddle.Sensor.Open;
      edge .Lock.UpstreamEbb.EastPaddle.Actuator.c_close when not Lock.UpstreamEbb.EastPaddle.Sensor.Intermediate and (Lock.UpstreamEbb.EastGate.Actuator.Rest and Lock.UpstreamEbb.EastGate.Sensor.Closed) or Lock.UpstreamEbb.EastPaddle.Sensor.Intermediate;
      edge .Lock.UpstreamEbb.EastPaddle.Actuator.c_emrgStop when true;
      edge .Lock.UpstreamEbb.EastPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.UpstreamEbb.EastPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.UpstreamEbb.EastPaddle.Actuator.c_open when true;
      edge .Lock.UpstreamEbb.WestGate.Actuator.c_close when true;
      edge .Lock.UpstreamEbb.WestGate.Actuator.c_emrgStop when true;
      edge .Lock.UpstreamEbb.WestGate.Actuator.c_endStopClosing when true;
      edge .Lock.UpstreamEbb.WestGate.Actuator.c_endStopOpening when true;
      edge .Lock.UpstreamEbb.WestGate.Actuator.c_open when Lock.UpstreamEbb.WestPaddle.Actuator.Rest and Lock.UpstreamEbb.WestPaddle.Sensor.Open;
      edge .Lock.UpstreamEbb.WestPaddle.Actuator.c_close when Lock.UpstreamEbb.WestGate.Actuator.Rest and Lock.UpstreamEbb.WestGate.Sensor.Closed;
      edge .Lock.UpstreamEbb.WestPaddle.Actuator.c_emrgStop when true;
      edge .Lock.UpstreamEbb.WestPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.UpstreamEbb.WestPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.UpstreamEbb.WestPaddle.Actuator.c_open when true;
      edge .Lock.UpstreamFlood.EastGate.Actuator.c_close when true;
      edge .Lock.UpstreamFlood.EastGate.Actuator.c_emrgStop when true;
      edge .Lock.UpstreamFlood.EastGate.Actuator.c_endStopClosing when true;
      edge .Lock.UpstreamFlood.EastGate.Actuator.c_endStopOpening when true;
      edge .Lock.UpstreamFlood.EastGate.Actuator.c_open when Lock.UpstreamFlood.EastPaddle.Actuator.Rest and Lock.UpstreamFlood.EastPaddle.Sensor.Open;
      edge .Lock.UpstreamFlood.EastPaddle.Actuator.c_close when Lock.UpstreamFlood.EastGate.Actuator.Rest and Lock.UpstreamFlood.EastGate.Sensor.Closed;
      edge .Lock.UpstreamFlood.EastPaddle.Actuator.c_emrgStop when true;
      edge .Lock.UpstreamFlood.EastPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.UpstreamFlood.EastPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.UpstreamFlood.EastPaddle.Actuator.c_open when true;
      edge .Lock.UpstreamFlood.WestGate.Actuator.c_close when true;
      edge .Lock.UpstreamFlood.WestGate.Actuator.c_emrgStop when true;
      edge .Lock.UpstreamFlood.WestGate.Actuator.c_endStopClosing when true;
      edge .Lock.UpstreamFlood.WestGate.Actuator.c_endStopOpening when true;
      edge .Lock.UpstreamFlood.WestGate.Actuator.c_open when Lock.UpstreamFlood.WestPaddle.Actuator.Rest and Lock.UpstreamFlood.WestPaddle.Sensor.Open;
      edge .Lock.UpstreamFlood.WestPaddle.Actuator.c_close when Lock.UpstreamFlood.WestGate.Actuator.Rest and Lock.UpstreamFlood.WestGate.Sensor.Closed;
      edge .Lock.UpstreamFlood.WestPaddle.Actuator.c_emrgStop when true;
      edge .Lock.UpstreamFlood.WestPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.UpstreamFlood.WestPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.UpstreamFlood.WestPaddle.Actuator.c_open when true;
  end
end
