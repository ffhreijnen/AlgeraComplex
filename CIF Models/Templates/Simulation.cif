//Basic definitions

//Single Output Actuator.
//@InitialLocationOn - true if the initial and marked location is On, false if Off.
automaton def SingleOutputActuator(alg bool InitialLocationOn):
    controllable c_on, c_off;
    location Off:
        initial not InitialLocationOn;
        edge c_on  goto On;
    location On:
        initial InitialLocationOn;
        edge c_off goto Off;
end

//Single Input Sensor.
//@InitialLocationOn - true if the initial and marked location is On, false if Off.
automaton def SingleInputSensor(alg bool InitialLocationOn):
    uncontrollable u_on, u_off;
    location Off:
        initial not InitialLocationOn;
        edge u_on  goto On;
    location On:
        initial InitialLocationOn;
        edge u_off goto Off;
end

//Single IO Dynamics.
//@Sensor - the sensor for which dynamics are provided.
//@On  - the invariant for which the sensor can switch to the On location.
//@Off - the invariant for which the sensor can switch to the Off location.
automaton def SingleIODynamics(SingleInputSensor Sensor; alg bool On, Off):
    location: initial;
        edge Sensor.u_on  when On;
        edge Sensor.u_off when Off;
end

//Double Output Actuator.
automaton def DoubleOutputActuator():
    controllable c_open, c_close, c_emrgStop, c_endStopClosing, c_endStopOpening;
    location Rest:
        initial;
        edge c_open  goto Opening;
        edge c_close goto Closing;
    location Opening:
        edge c_emrgStop, c_endStopOpening goto Rest;
    location Closing:
        edge c_emrgStop, c_endStopClosing goto Rest;
end

//Double Input Sensor.
//@InitialLocationClosed - true if the initial location is Closed, false if the Open.
automaton def DoubleInputSensor(alg bool InitialLocationClosed):
    uncontrollable u_open_on, u_open_off, u_closed_on, u_closed_off;
    location Closed:
        initial InitialLocationClosed;
        edge u_closed_off  goto Intermediate;
    location Intermediate:
        edge u_closed_on   goto Closed;
        edge u_open_on    goto Open;
    location Open:
        initial not InitialLocationClosed;
        edge u_open_off      goto Intermediate;
end

//Double IO Dynamics.
//@Sensor - the sensor for which dynamics are provided.
//@Actuator - the actuator which belongs to @Sensor.
//@InitialLocationClosed - true if the initial location is Closed, false if the Open.
automaton def DoubleIODynamics(DoubleInputSensor Sensor; DoubleOutputActuator Actuator; alg bool InitialLocationClosed):
    const real a_open = 3, a_closed = 0;
    cont a = if InitialLocationClosed: a_closed else a_open end
         der if Actuator.Opening and a < a_open   : +1
           elif Actuator.Closing and a > a_closed : -1
           else 0.0 end;
    location: initial;
        edge Sensor.u_open_on    when a >= a_open;
        edge Sensor.u_closed_off when a <  a_open;
        edge Sensor.u_closed_on  when a <= a_closed;
        edge Sensor.u_open_off   when a >  a_closed;
end

//Lock Traffic Light Actuator.
automaton def LockTrafficLightActuator():
    controllable c_r, c_rr, c_rg, c_g, c_emerg;
    location RedRed:
        edge c_r, c_emerg  goto Red;
    location Red:
        initial;
        edge c_rr goto RedRed;
        edge c_rg goto RedGreen;
    location RedGreen:
        edge c_r, c_emerg  goto Red;
        edge c_g  goto Green;
    location Green:
        edge c_r, c_emerg  goto Red;
end

//Bridge Traffic Light Actuator.
automaton def BridgeTrafficLightActuator():
    controllable c_r, c_rg, c_g, c_emerg;
    location Red:
        initial;
        edge c_rg goto RedGreen;
    location RedGreen:
        edge c_r, c_emerg  goto Red;
        edge c_g  goto Green;
    location Green:
        edge c_r, c_emerg  goto Red;
end

//Simulation timer
//@T - TimerLength the duration of the timer in seconds.
automaton def SimTimer(alg real T):
    cont Y = 0 der if Running: -1 else 0 end;
    controllable c_on, c_reset;
    uncontrollable u_timeout;
    location Off:
        initial;
        edge c_on      do   Y := T goto Running;
    location Running:
        edge c_reset               goto Off;
        edge u_timeout when Y <= 0 goto Finished;
    location Finished:
        edge c_reset               goto Off;
end

//Three-state UI
//@InitialOpen - true if the initial location is Open, false if Closed.
automaton def MovableComponentsCommands(alg bool InitialOpen):
    uncontrollable u_open, u_close, u_stop;
    location Open:
        initial InitialOpen;
        edge u_close goto Close;
        edge u_stop  goto Stop;
    location Close:
        initial not InitialOpen;
        edge u_open  goto Open;
        edge u_stop  goto Stop;
    location Stop:
        edge u_close goto Close;
        edge u_open  goto Open;
end

//Land traffic UI, similar to three-state UI but different location names.
automaton def LandTrafficCommands():
    uncontrollable u_activate, u_deactivate, u_stop;
    location Deactivated:
        initial;
        edge u_activate   goto Activated;
        edge u_stop       goto Stopped;
    location Activated:
        edge u_deactivate goto Deactivated;
        edge u_stop       goto Stopped;
    location Stopped:
        edge u_activate   goto Activated;
        edge u_deactivate goto Deactivated;
end

//Two state UI.
automaton def EmergencyStopDef():
    uncontrollable u_activate, u_reset;
    location Deactivated:
        initial;
        edge u_activate goto Activated;
    location Activated:
        edge u_reset    goto Deactivated;
end

//Lock Traffic Light UI.
automaton def LockTrafficLightCommands():
    uncontrollable u_r, u_rr, u_rg, u_g;
    location RedRed:
        edge u_r  goto Red;
    location Red:
        initial;
        edge u_rr goto RedRed;
        edge u_rg goto RedGreen;
    location RedGreen:
        edge u_r  goto Red;
        edge u_g  goto Green;
    location Green:
        edge u_r  goto Red;
end

//Bridge Traffic Light UI.
automaton def BridgeTrafficLightCommands():
    uncontrollable u_r, u_rg, u_g;
    location Red:
        initial;
        edge u_rg goto RedGreen;
    location RedGreen:
        edge u_g goto Green;
        edge u_r goto Red;
    location Green:
        edge u_r  goto Red;
end

//Approach sign and stop sign template for the sensor and dynamics.
//@Actuator - the actuator which belongs to Sensor (multiple signs can be actuated by the same actuator).
//#On  - true if Actuator.On  and Sensor.On.
//#Off - true if Actuator.Off and Sensor.Off.
group def SingleLampSign(SingleOutputActuator Actuator):
    Sensor   : SingleInputSensor(false);
    Dynamics : SingleIODynamics(Sensor, Actuator.On, Actuator.Off);

    alg bool On  = Actuator.On  and Sensor.On;
    alg bool Off = Actuator.Off and Sensor.Off;
end

//Lock Traffic light template for the sensors, actuator, and dynamics.
//#Red1On  - true if SensorR1.On.
//#GreenOn - true if SensorG.On.
//#Red2On  - true if SensorR2.On.
group def LockTrafficLight():
    Actuator   : LockTrafficLightActuator();

    SensorR1   : SingleInputSensor(true);
    SensorG    : SingleInputSensor(false);
    SensorR2   : SingleInputSensor(false);

    DynamicsR1 : SingleIODynamics(SensorR1, not Actuator.Green, Actuator.Green);
    DynamicsG  : SingleIODynamics(SensorG, Actuator.Green or Actuator.RedGreen,
                                  Actuator.Red or Actuator.RedRed);
    DynamicsR2 : SingleIODynamics(SensorR2, Actuator.RedRed, not Actuator.RedRed);

    alg bool Red1On  = SensorR1.On;
    alg bool GreenOn = SensorG.On;
    alg bool Red2On  = SensorR2.On;
end

//Bridge Traffic Light template for the sensors, actuator, and dynamics.
//#Red      - true if SensorR.On.
//#Green    - true if SensorG.On.
group def BridgeTrafficLight():
    Actuator  : BridgeTrafficLightActuator();

    SensorR   : SingleInputSensor(true);
    SensorG   : SingleInputSensor(false);

    DynamicsR : SingleIODynamics(SensorR, not Actuator.Green, Actuator.Green);
    DynamicsG : SingleIODynamics(SensorG, not Actuator.Red, Actuator.Red);

    alg bool RedOn   = SensorR.On;
    alg bool GreenOn = SensorG.On;
end

//Double input - double output template for the sensor, actuator, and dynamics.
//@InitialLocationClosed - true if the initial location is Closed, false if Open.
group def DoubleInputDoubleOutput(alg bool InitialLocationClosed):
    Actuator : DoubleOutputActuator();
    Sensor   : DoubleInputSensor(InitialLocationClosed);
    Dynamics : DoubleIODynamics(Sensor, Actuator, InitialLocationClosed);

    alg real a = Dynamics.a;
    alg bool Open = Sensor.Open;
end

group def GatePaddleSet():
    EastGate         : DoubleInputDoubleOutput(true);
    WestGate         : DoubleInputDoubleOutput(true);
    EastPaddle       : DoubleInputDoubleOutput(true);
    WestPaddle       : DoubleInputDoubleOutput(true);
end

automaton def EqualWaterSensor(alg bool InitialLocationOn):
    uncontrollable u_on, u_off;
    location Off:
        initial not InitialLocationOn;
        edge u_on  goto On;

    location On:
        initial InitialLocationOn;
        edge u_off goto Off;
end
