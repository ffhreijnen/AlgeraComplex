const int[10..10] TimeScaler = 10;
group Lock:
  group UI:
    automaton UpstreamEbGate:
      monitor;
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
      alg bool InitialOpen = false;
      location Open:
        initial InitialOpen;
        edge u_close goto Close;
        edge u_stop goto Stop;
      location Close:
        initial not InitialOpen;
        edge u_open goto Open;
        edge u_stop goto Stop;
      location Stop:
        edge u_close goto Close;
        edge u_open goto Open;
    end
    automaton UpstreamFloodGate:
      monitor;
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
      alg bool InitialOpen = false;
      location Open:
        initial InitialOpen;
        edge u_close goto Close;
        edge u_stop goto Stop;
      location Close:
        initial not InitialOpen;
        edge u_open goto Open;
        edge u_stop goto Stop;
      location Stop:
        edge u_close goto Close;
        edge u_open goto Open;
    end
    automaton DownstreamEbGate:
      monitor;
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
      alg bool InitialOpen = false;
      location Open:
        initial InitialOpen;
        edge u_close goto Close;
        edge u_stop goto Stop;
      location Close:
        initial not InitialOpen;
        edge u_open goto Open;
        edge u_stop goto Stop;
      location Stop:
        edge u_close goto Close;
        edge u_open goto Open;
    end
    automaton DownstreamFloodGate:
      monitor;
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
      alg bool InitialOpen = false;
      location Open:
        initial InitialOpen;
        edge u_close goto Close;
        edge u_stop goto Stop;
      location Close:
        initial not InitialOpen;
        edge u_open goto Open;
        edge u_stop goto Stop;
      location Stop:
        edge u_close goto Close;
        edge u_open goto Open;
    end
    automaton DownstreamStormFloodGate:
      monitor;
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
      alg bool InitialOpen = false;
      location Open:
        initial InitialOpen;
        edge u_close goto Close;
        edge u_stop goto Stop;
      location Close:
        initial not InitialOpen;
        edge u_open goto Open;
        edge u_stop goto Stop;
      location Stop:
        edge u_close goto Close;
        edge u_open goto Open;
    end
    automaton UpstreamEbPaddle:
      monitor;
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
      alg bool InitialOpen = false;
      location Open:
        initial InitialOpen;
        edge u_close goto Close;
        edge u_stop goto Stop;
      location Close:
        initial not InitialOpen;
        edge u_open goto Open;
        edge u_stop goto Stop;
      location Stop:
        edge u_close goto Close;
        edge u_open goto Open;
    end
    automaton UpstreamFloodPaddle:
      monitor;
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
      alg bool InitialOpen = false;
      location Open:
        initial InitialOpen;
        edge u_close goto Close;
        edge u_stop goto Stop;
      location Close:
        initial not InitialOpen;
        edge u_open goto Open;
        edge u_stop goto Stop;
      location Stop:
        edge u_close goto Close;
        edge u_open goto Open;
    end
    automaton DownstreamEbPaddle:
      monitor;
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
      alg bool InitialOpen = false;
      location Open:
        initial InitialOpen;
        edge u_close goto Close;
        edge u_stop goto Stop;
      location Close:
        initial not InitialOpen;
        edge u_open goto Open;
        edge u_stop goto Stop;
      location Stop:
        edge u_close goto Close;
        edge u_open goto Open;
    end
    automaton DownstreamFloodPaddle:
      monitor;
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
      alg bool InitialOpen = false;
      location Open:
        initial InitialOpen;
        edge u_close goto Close;
        edge u_stop goto Stop;
      location Close:
        initial not InitialOpen;
        edge u_open goto Open;
        edge u_stop goto Stop;
      location Stop:
        edge u_close goto Close;
        edge u_open goto Open;
    end
    automaton DownstreamStormFloodPaddle:
      monitor;
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
      alg bool InitialOpen = false;
      location Open:
        initial InitialOpen;
        edge u_close goto Close;
        edge u_stop goto Stop;
      location Close:
        initial not InitialOpen;
        edge u_open goto Open;
        edge u_stop goto Stop;
      location Stop:
        edge u_close goto Close;
        edge u_open goto Open;
    end
    automaton DownstreamVTLIncoming:
      monitor;
      uncontrollable u_r;
      uncontrollable u_rr;
      uncontrollable u_rg;
      uncontrollable u_g;
      location RedRed:
        initial;
        edge u_r goto Red;
      location Red:
        edge u_rr goto RedRed;
        edge u_rg goto RedGreen;
      location RedGreen:
        edge u_r goto Red;
        edge u_g goto Green;
      location Green:
        edge u_r goto Red;
    end
    automaton UpstreamVTLIncoming:
      monitor;
      uncontrollable u_r;
      uncontrollable u_rr;
      uncontrollable u_rg;
      uncontrollable u_g;
      location RedRed:
        initial;
        edge u_r goto Red;
      location Red:
        edge u_rr goto RedRed;
        edge u_rg goto RedGreen;
      location RedGreen:
        edge u_r goto Red;
        edge u_g goto Green;
      location Green:
        edge u_r goto Red;
    end
    automaton UpstreamVTLBridge:
      monitor;
      uncontrollable u_r;
      uncontrollable u_rg;
      uncontrollable u_g;
      location Red:
        initial;
        edge u_rg goto RedGreen;
      location RedGreen:
        edge u_g goto Green;
        edge u_r goto Red;
      location Green:
        edge u_r goto Red;
    end
  end
  group VTL:
    group IncomingDE:
      alg bool RedRed = Actuator.RedRed and SensorR1.On and SensorG.Off and SensorR2.On;
      alg bool Red = Actuator.Red and SensorR1.On and SensorG.Off and SensorR2.Off;
      alg bool RedGreen = Actuator.RedGreen and SensorR1.On and SensorG.On and SensorR2.Off;
      alg bool Green = Actuator.Green and SensorR1.Off and SensorG.On and SensorR2.Off;
      automaton Actuator:
        controllable c_r;
        controllable c_rr;
        controllable c_rg;
        controllable c_g;
        location RedRed:
          initial;
          edge c_r goto Red;
        location Red:
          edge c_rr goto RedRed;
          edge c_rg goto RedGreen;
        location RedGreen:
          edge c_r goto Red;
          edge c_g goto Green;
        location Green:
          edge c_r goto Red;
      end
      automaton SensorR1:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = true;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton SensorG:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton SensorR2:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = true;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton DynamicsR1:
        alg bool On = not Actuator.Green;
        alg bool Off = Actuator.Green;
        location:
          initial;
          edge SensorR1.u_on when On;
          edge SensorR1.u_off when Off;
      end
      automaton DynamicsG:
        alg bool On = Actuator.Green or Actuator.RedGreen;
        alg bool Off = Actuator.Red or Actuator.RedRed;
        location:
          initial;
          edge SensorG.u_on when On;
          edge SensorG.u_off when Off;
      end
      automaton DynamicsR2:
        alg bool On = Actuator.RedRed;
        alg bool Off = not Actuator.RedRed;
        location:
          initial;
          edge SensorR2.u_on when On;
          edge SensorR2.u_off when Off;
      end
    end
    group IncomingDW:
      alg bool RedRed = Actuator.RedRed and SensorR1.On and SensorG.Off and SensorR2.On;
      alg bool Red = Actuator.Red and SensorR1.On and SensorG.Off and SensorR2.Off;
      alg bool RedGreen = Actuator.RedGreen and SensorR1.On and SensorG.On and SensorR2.Off;
      alg bool Green = Actuator.Green and SensorR1.Off and SensorG.On and SensorR2.Off;
      automaton Actuator:
        controllable c_r;
        controllable c_rr;
        controllable c_rg;
        controllable c_g;
        location RedRed:
          initial;
          edge c_r goto Red;
        location Red:
          edge c_rr goto RedRed;
          edge c_rg goto RedGreen;
        location RedGreen:
          edge c_r goto Red;
          edge c_g goto Green;
        location Green:
          edge c_r goto Red;
      end
      automaton SensorR1:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = true;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton SensorG:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton SensorR2:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = true;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton DynamicsR1:
        alg bool On = not Actuator.Green;
        alg bool Off = Actuator.Green;
        location:
          initial;
          edge SensorR1.u_on when On;
          edge SensorR1.u_off when Off;
      end
      automaton DynamicsG:
        alg bool On = Actuator.Green or Actuator.RedGreen;
        alg bool Off = Actuator.Red or Actuator.RedRed;
        location:
          initial;
          edge SensorG.u_on when On;
          edge SensorG.u_off when Off;
      end
      automaton DynamicsR2:
        alg bool On = Actuator.RedRed;
        alg bool Off = not Actuator.RedRed;
        location:
          initial;
          edge SensorR2.u_on when On;
          edge SensorR2.u_off when Off;
      end
    end
    group IncomingUE:
      alg bool RedRed = Actuator.RedRed and SensorR1.On and SensorG.Off and SensorR2.On;
      alg bool Red = Actuator.Red and SensorR1.On and SensorG.Off and SensorR2.Off;
      alg bool RedGreen = Actuator.RedGreen and SensorR1.On and SensorG.On and SensorR2.Off;
      alg bool Green = Actuator.Green and SensorR1.Off and SensorG.On and SensorR2.Off;
      automaton Actuator:
        controllable c_r;
        controllable c_rr;
        controllable c_rg;
        controllable c_g;
        location RedRed:
          initial;
          edge c_r goto Red;
        location Red:
          edge c_rr goto RedRed;
          edge c_rg goto RedGreen;
        location RedGreen:
          edge c_r goto Red;
          edge c_g goto Green;
        location Green:
          edge c_r goto Red;
      end
      automaton SensorR1:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = true;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton SensorG:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton SensorR2:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = true;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton DynamicsR1:
        alg bool On = not Actuator.Green;
        alg bool Off = Actuator.Green;
        location:
          initial;
          edge SensorR1.u_on when On;
          edge SensorR1.u_off when Off;
      end
      automaton DynamicsG:
        alg bool On = Actuator.Green or Actuator.RedGreen;
        alg bool Off = Actuator.Red or Actuator.RedRed;
        location:
          initial;
          edge SensorG.u_on when On;
          edge SensorG.u_off when Off;
      end
      automaton DynamicsR2:
        alg bool On = Actuator.RedRed;
        alg bool Off = not Actuator.RedRed;
        location:
          initial;
          edge SensorR2.u_on when On;
          edge SensorR2.u_off when Off;
      end
    end
    group IncomingUW:
      alg bool RedRed = Actuator.RedRed and SensorR1.On and SensorG.Off and SensorR2.On;
      alg bool Red = Actuator.Red and SensorR1.On and SensorG.Off and SensorR2.Off;
      alg bool RedGreen = Actuator.RedGreen and SensorR1.On and SensorG.On and SensorR2.Off;
      alg bool Green = Actuator.Green and SensorR1.Off and SensorG.On and SensorR2.Off;
      automaton Actuator:
        controllable c_r;
        controllable c_rr;
        controllable c_rg;
        controllable c_g;
        location RedRed:
          initial;
          edge c_r goto Red;
        location Red:
          edge c_rr goto RedRed;
          edge c_rg goto RedGreen;
        location RedGreen:
          edge c_r goto Red;
          edge c_g goto Green;
        location Green:
          edge c_r goto Red;
      end
      automaton SensorR1:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = true;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton SensorG:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton SensorR2:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = true;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton DynamicsR1:
        alg bool On = not Actuator.Green;
        alg bool Off = Actuator.Green;
        location:
          initial;
          edge SensorR1.u_on when On;
          edge SensorR1.u_off when Off;
      end
      automaton DynamicsG:
        alg bool On = Actuator.Green or Actuator.RedGreen;
        alg bool Off = Actuator.Red or Actuator.RedRed;
        location:
          initial;
          edge SensorG.u_on when On;
          edge SensorG.u_off when Off;
      end
      automaton DynamicsR2:
        alg bool On = Actuator.RedRed;
        alg bool Off = not Actuator.RedRed;
        location:
          initial;
          edge SensorR2.u_on when On;
          edge SensorR2.u_off when Off;
      end
    end
    group BridgeUE:
      alg bool Red = Actuator.Red and SensorR.On and SensorG.Off;
      alg bool Green = Actuator.Green and SensorR.Off and SensorG.On;
      plant automaton Actuator:
        controllable c_r;
        controllable c_rg;
        controllable c_g;
        location Red:
          initial;
          marked;
          edge c_rg goto RedGreen;
        location RedGreen:
          edge c_r goto Red;
          edge c_g goto Green;
        location Green:
          edge c_r goto Red;
      end
      automaton SensorR:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = true;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton SensorG:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton DynamicsR:
        alg bool On = not Actuator.Green;
        alg bool Off = Actuator.Green;
        location:
          initial;
          edge SensorR.u_on when On;
          edge SensorR.u_off when Off;
      end
      automaton DynamicsG:
        alg bool On = not Actuator.Red;
        alg bool Off = Actuator.Red;
        location:
          initial;
          edge SensorG.u_on when On;
          edge SensorG.u_off when Off;
      end
    end
    group BridgeUW:
      alg bool Red = Actuator.Red and SensorR.On and SensorG.Off;
      alg bool Green = Actuator.Green and SensorR.Off and SensorG.On;
      plant automaton Actuator:
        controllable c_r;
        controllable c_rg;
        controllable c_g;
        location Red:
          initial;
          marked;
          edge c_rg goto RedGreen;
        location RedGreen:
          edge c_r goto Red;
          edge c_g goto Green;
        location Green:
          edge c_r goto Red;
      end
      automaton SensorR:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = true;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton SensorG:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton DynamicsR:
        alg bool On = not Actuator.Green;
        alg bool Off = Actuator.Green;
        location:
          initial;
          edge SensorR.u_on when On;
          edge SensorR.u_off when Off;
      end
      automaton DynamicsG:
        alg bool On = not Actuator.Red;
        alg bool Off = Actuator.Red;
        location:
          initial;
          edge SensorG.u_on when On;
          edge SensorG.u_off when Off;
      end
    end
  end
  automaton EmergencyStop:
    uncontrollable u_activate;
    uncontrollable u_reset;
    location Deactivated:
      initial;
      edge u_activate goto Activated;
    location Activated:
      edge u_reset goto Deactivated;
  end
  group UpstreamEb:
    group EastGate:
      cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
      alg bool Open = Sensor.Open;
      automaton Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
        location Rest:
          initial;
          edge c_open goto Opening;
          edge c_close goto Closing;
        location Opening:
          edge c_stop, c_endStopOpening goto Rest;
        location Closing:
          edge c_stop, c_endStopClosing goto Rest;
      end
      automaton Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
        alg bool InitialLocationClosed = true;
        alg bool InitialLocationOpen = false;
        location Closed:
          initial InitialLocationClosed;
          edge u_closed_off goto Intermediate;
        location Intermediate:
          edge u_closed_on goto Closed;
          edge u_open_on goto Open;
        location Open:
          initial InitialLocationOpen;
          edge u_open_off goto Intermediate;
      end
      automaton Dynamics:
        alg real ClosedDegree = 0.0;
        alg real OpenDegree = 90.0;
        alg real Degree = .Lock.UpstreamEb.EastGate.Degree;
        location:
          initial;
          edge Sensor.u_open_on when Degree >= OpenDegree;
          edge Sensor.u_closed_off when Degree < OpenDegree;
          edge Sensor.u_closed_on when Degree <= ClosedDegree;
          edge Sensor.u_open_off when Degree > ClosedDegree;
      end
    end
    group WestGate:
      cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
      alg bool Open = Sensor.Open;
      automaton Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
        location Rest:
          initial;
          edge c_open goto Opening;
          edge c_close goto Closing;
        location Opening:
          edge c_stop, c_endStopOpening goto Rest;
        location Closing:
          edge c_stop, c_endStopClosing goto Rest;
      end
      automaton Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
        alg bool InitialLocationClosed = true;
        alg bool InitialLocationOpen = false;
        location Closed:
          initial InitialLocationClosed;
          edge u_closed_off goto Intermediate;
        location Intermediate:
          edge u_closed_on goto Closed;
          edge u_open_on goto Open;
        location Open:
          initial InitialLocationOpen;
          edge u_open_off goto Intermediate;
      end
      automaton Dynamics:
        alg real ClosedDegree = 0.0;
        alg real OpenDegree = 90.0;
        alg real Degree = .Lock.UpstreamEb.WestGate.Degree;
        location:
          initial;
          edge Sensor.u_open_on when Degree >= OpenDegree;
          edge Sensor.u_closed_off when Degree < OpenDegree;
          edge Sensor.u_closed_on when Degree <= ClosedDegree;
          edge Sensor.u_open_off when Degree > ClosedDegree;
      end
    end
    group EastPaddle:
      cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
      alg bool Open = Sensor.Open;
      automaton Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
        location Rest:
          initial;
          edge c_open goto Opening;
          edge c_close goto Closing;
        location Opening:
          edge c_stop, c_endStopOpening goto Rest;
        location Closing:
          edge c_stop, c_endStopClosing goto Rest;
      end
      automaton Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
        alg bool InitialLocationClosed = true;
        alg bool InitialLocationOpen = false;
        location Closed:
          initial InitialLocationClosed;
          edge u_closed_off goto Intermediate;
        location Intermediate:
          edge u_closed_on goto Closed;
          edge u_open_on goto Open;
        location Open:
          initial InitialLocationOpen;
          edge u_open_off goto Intermediate;
      end
      automaton Dynamics:
        alg real ClosedDegree = 0.0;
        alg real OpenDegree = 90.0;
        alg real Degree = .Lock.UpstreamEb.EastPaddle.Degree;
        location:
          initial;
          edge Sensor.u_open_on when Degree >= OpenDegree;
          edge Sensor.u_closed_off when Degree < OpenDegree;
          edge Sensor.u_closed_on when Degree <= ClosedDegree;
          edge Sensor.u_open_off when Degree > ClosedDegree;
      end
    end
    group WestPaddle:
      cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
      alg bool Open = Sensor.Open;
      automaton Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
        location Rest:
          initial;
          edge c_open goto Opening;
          edge c_close goto Closing;
        location Opening:
          edge c_stop, c_endStopOpening goto Rest;
        location Closing:
          edge c_stop, c_endStopClosing goto Rest;
      end
      automaton Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
        alg bool InitialLocationClosed = true;
        alg bool InitialLocationOpen = false;
        location Closed:
          initial InitialLocationClosed;
          edge u_closed_off goto Intermediate;
        location Intermediate:
          edge u_closed_on goto Closed;
          edge u_open_on goto Open;
        location Open:
          initial InitialLocationOpen;
          edge u_open_off goto Intermediate;
      end
      automaton Dynamics:
        alg real ClosedDegree = 0.0;
        alg real OpenDegree = 90.0;
        alg real Degree = .Lock.UpstreamEb.WestPaddle.Degree;
        location:
          initial;
          edge Sensor.u_open_on when Degree >= OpenDegree;
          edge Sensor.u_closed_off when Degree < OpenDegree;
          edge Sensor.u_closed_on when Degree <= ClosedDegree;
          edge Sensor.u_open_off when Degree > ClosedDegree;
      end
    end
  end
  group UpstreamFlood:
    group EastGate:
      cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
      alg bool Open = Sensor.Open;
      automaton Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
        location Rest:
          initial;
          edge c_open goto Opening;
          edge c_close goto Closing;
        location Opening:
          edge c_stop, c_endStopOpening goto Rest;
        location Closing:
          edge c_stop, c_endStopClosing goto Rest;
      end
      automaton Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
        alg bool InitialLocationClosed = true;
        alg bool InitialLocationOpen = false;
        location Closed:
          initial InitialLocationClosed;
          edge u_closed_off goto Intermediate;
        location Intermediate:
          edge u_closed_on goto Closed;
          edge u_open_on goto Open;
        location Open:
          initial InitialLocationOpen;
          edge u_open_off goto Intermediate;
      end
      automaton Dynamics:
        alg real ClosedDegree = 0.0;
        alg real OpenDegree = 90.0;
        alg real Degree = .Lock.UpstreamFlood.EastGate.Degree;
        location:
          initial;
          edge Sensor.u_open_on when Degree >= OpenDegree;
          edge Sensor.u_closed_off when Degree < OpenDegree;
          edge Sensor.u_closed_on when Degree <= ClosedDegree;
          edge Sensor.u_open_off when Degree > ClosedDegree;
      end
    end
    group WestGate:
      cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
      alg bool Open = Sensor.Open;
      automaton Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
        location Rest:
          initial;
          edge c_open goto Opening;
          edge c_close goto Closing;
        location Opening:
          edge c_stop, c_endStopOpening goto Rest;
        location Closing:
          edge c_stop, c_endStopClosing goto Rest;
      end
      automaton Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
        alg bool InitialLocationClosed = true;
        alg bool InitialLocationOpen = false;
        location Closed:
          initial InitialLocationClosed;
          edge u_closed_off goto Intermediate;
        location Intermediate:
          edge u_closed_on goto Closed;
          edge u_open_on goto Open;
        location Open:
          initial InitialLocationOpen;
          edge u_open_off goto Intermediate;
      end
      automaton Dynamics:
        alg real ClosedDegree = 0.0;
        alg real OpenDegree = 90.0;
        alg real Degree = .Lock.UpstreamFlood.WestGate.Degree;
        location:
          initial;
          edge Sensor.u_open_on when Degree >= OpenDegree;
          edge Sensor.u_closed_off when Degree < OpenDegree;
          edge Sensor.u_closed_on when Degree <= ClosedDegree;
          edge Sensor.u_open_off when Degree > ClosedDegree;
      end
    end
    group EastPaddle:
      cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
      alg bool Open = Sensor.Open;
      automaton Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
        location Rest:
          initial;
          edge c_open goto Opening;
          edge c_close goto Closing;
        location Opening:
          edge c_stop, c_endStopOpening goto Rest;
        location Closing:
          edge c_stop, c_endStopClosing goto Rest;
      end
      automaton Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
        alg bool InitialLocationClosed = true;
        alg bool InitialLocationOpen = false;
        location Closed:
          initial InitialLocationClosed;
          edge u_closed_off goto Intermediate;
        location Intermediate:
          edge u_closed_on goto Closed;
          edge u_open_on goto Open;
        location Open:
          initial InitialLocationOpen;
          edge u_open_off goto Intermediate;
      end
      automaton Dynamics:
        alg real ClosedDegree = 0.0;
        alg real OpenDegree = 90.0;
        alg real Degree = .Lock.UpstreamFlood.EastPaddle.Degree;
        location:
          initial;
          edge Sensor.u_open_on when Degree >= OpenDegree;
          edge Sensor.u_closed_off when Degree < OpenDegree;
          edge Sensor.u_closed_on when Degree <= ClosedDegree;
          edge Sensor.u_open_off when Degree > ClosedDegree;
      end
    end
    group WestPaddle:
      cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
      alg bool Open = Sensor.Open;
      automaton Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
        location Rest:
          initial;
          edge c_open goto Opening;
          edge c_close goto Closing;
        location Opening:
          edge c_stop, c_endStopOpening goto Rest;
        location Closing:
          edge c_stop, c_endStopClosing goto Rest;
      end
      automaton Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
        alg bool InitialLocationClosed = true;
        alg bool InitialLocationOpen = false;
        location Closed:
          initial InitialLocationClosed;
          edge u_closed_off goto Intermediate;
        location Intermediate:
          edge u_closed_on goto Closed;
          edge u_open_on goto Open;
        location Open:
          initial InitialLocationOpen;
          edge u_open_off goto Intermediate;
      end
      automaton Dynamics:
        alg real ClosedDegree = 0.0;
        alg real OpenDegree = 90.0;
        alg real Degree = .Lock.UpstreamFlood.WestPaddle.Degree;
        location:
          initial;
          edge Sensor.u_open_on when Degree >= OpenDegree;
          edge Sensor.u_closed_off when Degree < OpenDegree;
          edge Sensor.u_closed_on when Degree <= ClosedDegree;
          edge Sensor.u_open_off when Degree > ClosedDegree;
      end
    end
  end
  group DownstreamEb:
    group EastGate:
      cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
      alg bool Open = Sensor.Open;
      automaton Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
        location Rest:
          initial;
          edge c_open goto Opening;
          edge c_close goto Closing;
        location Opening:
          edge c_stop, c_endStopOpening goto Rest;
        location Closing:
          edge c_stop, c_endStopClosing goto Rest;
      end
      automaton Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
        alg bool InitialLocationClosed = true;
        alg bool InitialLocationOpen = false;
        location Closed:
          initial InitialLocationClosed;
          edge u_closed_off goto Intermediate;
        location Intermediate:
          edge u_closed_on goto Closed;
          edge u_open_on goto Open;
        location Open:
          initial InitialLocationOpen;
          edge u_open_off goto Intermediate;
      end
      automaton Dynamics:
        alg real ClosedDegree = 0.0;
        alg real OpenDegree = 90.0;
        alg real Degree = .Lock.DownstreamEb.EastGate.Degree;
        location:
          initial;
          edge Sensor.u_open_on when Degree >= OpenDegree;
          edge Sensor.u_closed_off when Degree < OpenDegree;
          edge Sensor.u_closed_on when Degree <= ClosedDegree;
          edge Sensor.u_open_off when Degree > ClosedDegree;
      end
    end
    group WestGate:
      cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
      alg bool Open = Sensor.Open;
      automaton Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
        location Rest:
          initial;
          edge c_open goto Opening;
          edge c_close goto Closing;
        location Opening:
          edge c_stop, c_endStopOpening goto Rest;
        location Closing:
          edge c_stop, c_endStopClosing goto Rest;
      end
      automaton Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
        alg bool InitialLocationClosed = true;
        alg bool InitialLocationOpen = false;
        location Closed:
          initial InitialLocationClosed;
          edge u_closed_off goto Intermediate;
        location Intermediate:
          edge u_closed_on goto Closed;
          edge u_open_on goto Open;
        location Open:
          initial InitialLocationOpen;
          edge u_open_off goto Intermediate;
      end
      automaton Dynamics:
        alg real ClosedDegree = 0.0;
        alg real OpenDegree = 90.0;
        alg real Degree = .Lock.DownstreamEb.WestGate.Degree;
        location:
          initial;
          edge Sensor.u_open_on when Degree >= OpenDegree;
          edge Sensor.u_closed_off when Degree < OpenDegree;
          edge Sensor.u_closed_on when Degree <= ClosedDegree;
          edge Sensor.u_open_off when Degree > ClosedDegree;
      end
    end
    group EastPaddle:
      cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
      alg bool Open = Sensor.Open;
      automaton Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
        location Rest:
          initial;
          edge c_open goto Opening;
          edge c_close goto Closing;
        location Opening:
          edge c_stop, c_endStopOpening goto Rest;
        location Closing:
          edge c_stop, c_endStopClosing goto Rest;
      end
      automaton Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
        alg bool InitialLocationClosed = true;
        alg bool InitialLocationOpen = false;
        location Closed:
          initial InitialLocationClosed;
          edge u_closed_off goto Intermediate;
        location Intermediate:
          edge u_closed_on goto Closed;
          edge u_open_on goto Open;
        location Open:
          initial InitialLocationOpen;
          edge u_open_off goto Intermediate;
      end
      automaton Dynamics:
        alg real ClosedDegree = 0.0;
        alg real OpenDegree = 90.0;
        alg real Degree = .Lock.DownstreamEb.EastPaddle.Degree;
        location:
          initial;
          edge Sensor.u_open_on when Degree >= OpenDegree;
          edge Sensor.u_closed_off when Degree < OpenDegree;
          edge Sensor.u_closed_on when Degree <= ClosedDegree;
          edge Sensor.u_open_off when Degree > ClosedDegree;
      end
    end
    group WestPaddle:
      cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
      alg bool Open = Sensor.Open;
      automaton Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
        location Rest:
          initial;
          edge c_open goto Opening;
          edge c_close goto Closing;
        location Opening:
          edge c_stop, c_endStopOpening goto Rest;
        location Closing:
          edge c_stop, c_endStopClosing goto Rest;
      end
      automaton Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
        alg bool InitialLocationClosed = true;
        alg bool InitialLocationOpen = false;
        location Closed:
          initial InitialLocationClosed;
          edge u_closed_off goto Intermediate;
        location Intermediate:
          edge u_closed_on goto Closed;
          edge u_open_on goto Open;
        location Open:
          initial InitialLocationOpen;
          edge u_open_off goto Intermediate;
      end
      automaton Dynamics:
        alg real ClosedDegree = 0.0;
        alg real OpenDegree = 90.0;
        alg real Degree = .Lock.DownstreamEb.WestPaddle.Degree;
        location:
          initial;
          edge Sensor.u_open_on when Degree >= OpenDegree;
          edge Sensor.u_closed_off when Degree < OpenDegree;
          edge Sensor.u_closed_on when Degree <= ClosedDegree;
          edge Sensor.u_open_off when Degree > ClosedDegree;
      end
    end
  end
  group DownstreamFlood:
    group EastGate:
      cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
      alg bool Open = Sensor.Open;
      automaton Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
        location Rest:
          initial;
          edge c_open goto Opening;
          edge c_close goto Closing;
        location Opening:
          edge c_stop, c_endStopOpening goto Rest;
        location Closing:
          edge c_stop, c_endStopClosing goto Rest;
      end
      automaton Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
        alg bool InitialLocationClosed = true;
        alg bool InitialLocationOpen = false;
        location Closed:
          initial InitialLocationClosed;
          edge u_closed_off goto Intermediate;
        location Intermediate:
          edge u_closed_on goto Closed;
          edge u_open_on goto Open;
        location Open:
          initial InitialLocationOpen;
          edge u_open_off goto Intermediate;
      end
      automaton Dynamics:
        alg real ClosedDegree = 0.0;
        alg real OpenDegree = 90.0;
        alg real Degree = .Lock.DownstreamFlood.EastGate.Degree;
        location:
          initial;
          edge Sensor.u_open_on when Degree >= OpenDegree;
          edge Sensor.u_closed_off when Degree < OpenDegree;
          edge Sensor.u_closed_on when Degree <= ClosedDegree;
          edge Sensor.u_open_off when Degree > ClosedDegree;
      end
    end
    group WestGate:
      cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
      alg bool Open = Sensor.Open;
      automaton Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
        location Rest:
          initial;
          edge c_open goto Opening;
          edge c_close goto Closing;
        location Opening:
          edge c_stop, c_endStopOpening goto Rest;
        location Closing:
          edge c_stop, c_endStopClosing goto Rest;
      end
      automaton Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
        alg bool InitialLocationClosed = true;
        alg bool InitialLocationOpen = false;
        location Closed:
          initial InitialLocationClosed;
          edge u_closed_off goto Intermediate;
        location Intermediate:
          edge u_closed_on goto Closed;
          edge u_open_on goto Open;
        location Open:
          initial InitialLocationOpen;
          edge u_open_off goto Intermediate;
      end
      automaton Dynamics:
        alg real ClosedDegree = 0.0;
        alg real OpenDegree = 90.0;
        alg real Degree = .Lock.DownstreamFlood.WestGate.Degree;
        location:
          initial;
          edge Sensor.u_open_on when Degree >= OpenDegree;
          edge Sensor.u_closed_off when Degree < OpenDegree;
          edge Sensor.u_closed_on when Degree <= ClosedDegree;
          edge Sensor.u_open_off when Degree > ClosedDegree;
      end
    end
    group EastPaddle:
      cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
      alg bool Open = Sensor.Open;
      automaton Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
        location Rest:
          initial;
          edge c_open goto Opening;
          edge c_close goto Closing;
        location Opening:
          edge c_stop, c_endStopOpening goto Rest;
        location Closing:
          edge c_stop, c_endStopClosing goto Rest;
      end
      automaton Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
        alg bool InitialLocationClosed = true;
        alg bool InitialLocationOpen = false;
        location Closed:
          initial InitialLocationClosed;
          edge u_closed_off goto Intermediate;
        location Intermediate:
          edge u_closed_on goto Closed;
          edge u_open_on goto Open;
        location Open:
          initial InitialLocationOpen;
          edge u_open_off goto Intermediate;
      end
      automaton Dynamics:
        alg real ClosedDegree = 0.0;
        alg real OpenDegree = 90.0;
        alg real Degree = .Lock.DownstreamFlood.EastPaddle.Degree;
        location:
          initial;
          edge Sensor.u_open_on when Degree >= OpenDegree;
          edge Sensor.u_closed_off when Degree < OpenDegree;
          edge Sensor.u_closed_on when Degree <= ClosedDegree;
          edge Sensor.u_open_off when Degree > ClosedDegree;
      end
    end
    group WestPaddle:
      cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
      alg bool Open = Sensor.Open;
      automaton Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
        location Rest:
          initial;
          edge c_open goto Opening;
          edge c_close goto Closing;
        location Opening:
          edge c_stop, c_endStopOpening goto Rest;
        location Closing:
          edge c_stop, c_endStopClosing goto Rest;
      end
      automaton Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
        alg bool InitialLocationClosed = true;
        alg bool InitialLocationOpen = false;
        location Closed:
          initial InitialLocationClosed;
          edge u_closed_off goto Intermediate;
        location Intermediate:
          edge u_closed_on goto Closed;
          edge u_open_on goto Open;
        location Open:
          initial InitialLocationOpen;
          edge u_open_off goto Intermediate;
      end
      automaton Dynamics:
        alg real ClosedDegree = 0.0;
        alg real OpenDegree = 90.0;
        alg real Degree = .Lock.DownstreamFlood.WestPaddle.Degree;
        location:
          initial;
          edge Sensor.u_open_on when Degree >= OpenDegree;
          edge Sensor.u_closed_off when Degree < OpenDegree;
          edge Sensor.u_closed_on when Degree <= ClosedDegree;
          edge Sensor.u_open_off when Degree > ClosedDegree;
      end
    end
  end
  group DownstreamStormFlood:
    group EastGate:
      cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
      alg bool Open = Sensor.Open;
      automaton Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
        location Rest:
          initial;
          edge c_open goto Opening;
          edge c_close goto Closing;
        location Opening:
          edge c_stop, c_endStopOpening goto Rest;
        location Closing:
          edge c_stop, c_endStopClosing goto Rest;
      end
      automaton Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
        alg bool InitialLocationClosed = true;
        alg bool InitialLocationOpen = false;
        location Closed:
          initial InitialLocationClosed;
          edge u_closed_off goto Intermediate;
        location Intermediate:
          edge u_closed_on goto Closed;
          edge u_open_on goto Open;
        location Open:
          initial InitialLocationOpen;
          edge u_open_off goto Intermediate;
      end
      automaton Dynamics:
        alg real ClosedDegree = 0.0;
        alg real OpenDegree = 90.0;
        alg real Degree = .Lock.DownstreamStormFlood.EastGate.Degree;
        location:
          initial;
          edge Sensor.u_open_on when Degree >= OpenDegree;
          edge Sensor.u_closed_off when Degree < OpenDegree;
          edge Sensor.u_closed_on when Degree <= ClosedDegree;
          edge Sensor.u_open_off when Degree > ClosedDegree;
      end
    end
    group WestGate:
      cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
      alg bool Open = Sensor.Open;
      automaton Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
        location Rest:
          initial;
          edge c_open goto Opening;
          edge c_close goto Closing;
        location Opening:
          edge c_stop, c_endStopOpening goto Rest;
        location Closing:
          edge c_stop, c_endStopClosing goto Rest;
      end
      automaton Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
        alg bool InitialLocationClosed = true;
        alg bool InitialLocationOpen = false;
        location Closed:
          initial InitialLocationClosed;
          edge u_closed_off goto Intermediate;
        location Intermediate:
          edge u_closed_on goto Closed;
          edge u_open_on goto Open;
        location Open:
          initial InitialLocationOpen;
          edge u_open_off goto Intermediate;
      end
      automaton Dynamics:
        alg real ClosedDegree = 0.0;
        alg real OpenDegree = 90.0;
        alg real Degree = .Lock.DownstreamStormFlood.WestGate.Degree;
        location:
          initial;
          edge Sensor.u_open_on when Degree >= OpenDegree;
          edge Sensor.u_closed_off when Degree < OpenDegree;
          edge Sensor.u_closed_on when Degree <= ClosedDegree;
          edge Sensor.u_open_off when Degree > ClosedDegree;
      end
    end
    group EastPaddle:
      cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
      alg bool Open = Sensor.Open;
      automaton Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
        location Rest:
          initial;
          edge c_open goto Opening;
          edge c_close goto Closing;
        location Opening:
          edge c_stop, c_endStopOpening goto Rest;
        location Closing:
          edge c_stop, c_endStopClosing goto Rest;
      end
      automaton Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
        alg bool InitialLocationClosed = true;
        alg bool InitialLocationOpen = false;
        location Closed:
          initial InitialLocationClosed;
          edge u_closed_off goto Intermediate;
        location Intermediate:
          edge u_closed_on goto Closed;
          edge u_open_on goto Open;
        location Open:
          initial InitialLocationOpen;
          edge u_open_off goto Intermediate;
      end
      automaton Dynamics:
        alg real ClosedDegree = 0.0;
        alg real OpenDegree = 90.0;
        alg real Degree = .Lock.DownstreamStormFlood.EastPaddle.Degree;
        location:
          initial;
          edge Sensor.u_open_on when Degree >= OpenDegree;
          edge Sensor.u_closed_off when Degree < OpenDegree;
          edge Sensor.u_closed_on when Degree <= ClosedDegree;
          edge Sensor.u_open_off when Degree > ClosedDegree;
      end
    end
    group WestPaddle:
      cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
      alg bool Open = Sensor.Open;
      automaton Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
        location Rest:
          initial;
          edge c_open goto Opening;
          edge c_close goto Closing;
        location Opening:
          edge c_stop, c_endStopOpening goto Rest;
        location Closing:
          edge c_stop, c_endStopClosing goto Rest;
      end
      automaton Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
        alg bool InitialLocationClosed = true;
        alg bool InitialLocationOpen = false;
        location Closed:
          initial InitialLocationClosed;
          edge u_closed_off goto Intermediate;
        location Intermediate:
          edge u_closed_on goto Closed;
          edge u_open_on goto Open;
        location Open:
          initial InitialLocationOpen;
          edge u_open_off goto Intermediate;
      end
      automaton Dynamics:
        alg real ClosedDegree = 0.0;
        alg real OpenDegree = 90.0;
        alg real Degree = .Lock.DownstreamStormFlood.WestPaddle.Degree;
        location:
          initial;
          edge Sensor.u_open_on when Degree >= OpenDegree;
          edge Sensor.u_closed_off when Degree < OpenDegree;
          edge Sensor.u_closed_on when Degree <= ClosedDegree;
          edge Sensor.u_open_off when Degree > ClosedDegree;
      end
    end
  end
  automaton EqualWaterUpstream:
    uncontrollable u_on;
    uncontrollable u_off;
    alg bool InitialLocationOn = false;
    alg bool OnGuard = Water.H_Chamber >= Water.H_Upstream;
    location Off:
      initial not InitialLocationOn;
      edge u_on when OnGuard goto On;
    location On:
      initial InitialLocationOn;
      edge u_off when not OnGuard goto Off;
  end
  automaton EqualWaterDownstream:
    uncontrollable u_on;
    uncontrollable u_off;
    alg bool InitialLocationOn = true;
    alg bool OnGuard = Water.H_Chamber <= Water.H_Downstream;
    location Off:
      initial not InitialLocationOn;
      edge u_on when OnGuard goto On;
    location On:
      initial InitialLocationOn;
      edge u_off when not OnGuard goto Off;
  end
  group Water:
    const real H_Upstream = 10.0;
    const real H_Downstream = 2.0;
    cont H_Chamber = 2.0 der if DownstreamOpen and H_Chamber > H_Downstream: -2.0 elif UpstreamOpen and H_Chamber < H_Upstream: +2.0 else 0.0 end;
    alg bool DownstreamOpen = (DownstreamEb.EastPaddle.Open or DownstreamEb.WestPaddle.Open or DownstreamEb.EastGate.Open or DownstreamEb.WestGate.Open) and (DownstreamFlood.EastPaddle.Open or DownstreamFlood.WestPaddle.Open or DownstreamFlood.EastGate.Open or DownstreamFlood.WestGate.Open) and (DownstreamStormFlood.EastPaddle.Open or DownstreamStormFlood.WestPaddle.Open or DownstreamStormFlood.EastGate.Open or DownstreamStormFlood.WestGate.Open);
    alg bool UpstreamOpen = (UpstreamEb.EastPaddle.Open or UpstreamEb.WestPaddle.Open or UpstreamEb.EastGate.Open or UpstreamEb.WestGate.Open) and (UpstreamFlood.EastPaddle.Open or UpstreamFlood.WestPaddle.Open or UpstreamFlood.EastGate.Open or UpstreamFlood.WestGate.Open);
  end
end
group Bridge:
  group UI:
    automaton LTLButton:
      monitor;
      uncontrollable u_activate;
      uncontrollable u_deactivate;
      uncontrollable u_stop;
      location Deactivated:
        initial;
        edge u_activate goto Activated;
        edge u_stop goto Stopped;
      location Activated:
        edge u_deactivate goto Deactivated;
        edge u_stop goto Stopped;
      location Stopped:
        edge u_activate goto Activated;
        edge u_deactivate goto Deactivated;
    end
    automaton Barrier1:
      monitor;
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
      alg bool InitialOpen = true;
      location Open:
        initial InitialOpen;
        edge u_close goto Close;
        edge u_stop goto Stop;
      location Close:
        initial not InitialOpen;
        edge u_open goto Open;
        edge u_stop goto Stop;
      location Stop:
        edge u_close goto Close;
        edge u_open goto Open;
    end
    automaton Barrier27:
      monitor;
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
      alg bool InitialOpen = true;
      location Open:
        initial InitialOpen;
        edge u_close goto Close;
        edge u_stop goto Stop;
      location Close:
        initial not InitialOpen;
        edge u_open goto Open;
        edge u_stop goto Stop;
      location Stop:
        edge u_close goto Close;
        edge u_open goto Open;
    end
    automaton Barrier36:
      monitor;
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
      alg bool InitialOpen = true;
      location Open:
        initial InitialOpen;
        edge u_close goto Close;
        edge u_stop goto Stop;
      location Close:
        initial not InitialOpen;
        edge u_open goto Open;
        edge u_stop goto Stop;
      location Stop:
        edge u_close goto Close;
        edge u_open goto Open;
    end
    automaton Barrier48:
      monitor;
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
      alg bool InitialOpen = true;
      location Open:
        initial InitialOpen;
        edge u_close goto Close;
        edge u_stop goto Stop;
      location Close:
        initial not InitialOpen;
        edge u_open goto Open;
        edge u_stop goto Stop;
      location Stop:
        edge u_close goto Close;
        edge u_open goto Open;
    end
    automaton Barrier5:
      monitor;
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
      alg bool InitialOpen = true;
      location Open:
        initial InitialOpen;
        edge u_close goto Close;
        edge u_stop goto Stop;
      location Close:
        initial not InitialOpen;
        edge u_open goto Open;
        edge u_stop goto Stop;
      location Stop:
        edge u_close goto Close;
        edge u_open goto Open;
    end
    automaton Deck:
      monitor;
      uncontrollable u_open;
      uncontrollable u_close;
      uncontrollable u_stop;
      alg bool InitialOpen = false;
      location Open:
        initial InitialOpen;
        edge u_close goto Close;
        edge u_stop goto Stop;
      location Close:
        initial not InitialOpen;
        edge u_open goto Open;
        edge u_stop goto Stop;
      location Stop:
        edge u_close goto Close;
        edge u_open goto Open;
    end
  end
  group LTL:
    automaton StopSignsActuator:
      controllable c_on;
      controllable c_off;
      alg bool InitialLocationOn = false;
      location Off:
        initial not InitialLocationOn;
        edge c_on goto On;
      location On:
        initial InitialLocationOn;
        edge c_off goto Off;
    end
    automaton SwitchLaneStopSigns:
      controllable c_on;
      controllable c_off;
      alg bool InitialLocationOn = false;
      location Off:
        initial not InitialLocationOn;
        edge c_on goto On;
      location On:
        initial InitialLocationOn;
        edge c_off goto Off;
    end
    group StopSign1:
      alg bool On = SwitchLaneStopSigns.On and Sensor.On;
      alg bool Off = SwitchLaneStopSigns.Off and Sensor.Off;
      automaton Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton Dynamics:
        alg bool On = SwitchLaneStopSigns.On;
        alg bool Off = SwitchLaneStopSigns.Off;
        location:
          initial;
          edge Sensor.u_on when On;
          edge Sensor.u_off when Off;
      end
    end
    group StopSign2:
      alg bool On = SwitchLaneStopSigns.On and Sensor.On;
      alg bool Off = SwitchLaneStopSigns.Off and Sensor.Off;
      automaton Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton Dynamics:
        alg bool On = SwitchLaneStopSigns.On;
        alg bool Off = SwitchLaneStopSigns.Off;
        location:
          initial;
          edge Sensor.u_on when On;
          edge Sensor.u_off when Off;
      end
    end
    group StopSign3:
      alg bool On = SwitchLaneStopSigns.On and Sensor.On;
      alg bool Off = SwitchLaneStopSigns.Off and Sensor.Off;
      automaton Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton Dynamics:
        alg bool On = SwitchLaneStopSigns.On;
        alg bool Off = SwitchLaneStopSigns.Off;
        location:
          initial;
          edge Sensor.u_on when On;
          edge Sensor.u_off when Off;
      end
    end
    group StopSign4:
      alg bool On = SwitchLaneStopSigns.On and Sensor.On;
      alg bool Off = SwitchLaneStopSigns.Off and Sensor.Off;
      automaton Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton Dynamics:
        alg bool On = SwitchLaneStopSigns.On;
        alg bool Off = SwitchLaneStopSigns.Off;
        location:
          initial;
          edge Sensor.u_on when On;
          edge Sensor.u_off when Off;
      end
    end
    group StopSign5:
      alg bool On = StopSignsActuator.On and Sensor.On;
      alg bool Off = StopSignsActuator.Off and Sensor.Off;
      automaton Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton Dynamics:
        alg bool On = StopSignsActuator.On;
        alg bool Off = StopSignsActuator.Off;
        location:
          initial;
          edge Sensor.u_on when On;
          edge Sensor.u_off when Off;
      end
    end
    group StopSign6:
      alg bool On = StopSignsActuator.On and Sensor.On;
      alg bool Off = StopSignsActuator.Off and Sensor.Off;
      automaton Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton Dynamics:
        alg bool On = StopSignsActuator.On;
        alg bool Off = StopSignsActuator.Off;
        location:
          initial;
          edge Sensor.u_on when On;
          edge Sensor.u_off when Off;
      end
    end
    group StopSign7:
      alg bool On = StopSignsActuator.On and Sensor.On;
      alg bool Off = StopSignsActuator.Off and Sensor.Off;
      automaton Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton Dynamics:
        alg bool On = StopSignsActuator.On;
        alg bool Off = StopSignsActuator.Off;
        location:
          initial;
          edge Sensor.u_on when On;
          edge Sensor.u_off when Off;
      end
    end
    group StopSign8:
      alg bool On = StopSignsActuator.On and Sensor.On;
      alg bool Off = StopSignsActuator.Off and Sensor.Off;
      automaton Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton Dynamics:
        alg bool On = StopSignsActuator.On;
        alg bool Off = StopSignsActuator.Off;
        location:
          initial;
          edge Sensor.u_on when On;
          edge Sensor.u_off when Off;
      end
    end
    group StopSign9:
      alg bool On = StopSignsActuator.On and Sensor.On;
      alg bool Off = StopSignsActuator.Off and Sensor.Off;
      automaton Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton Dynamics:
        alg bool On = StopSignsActuator.On;
        alg bool Off = StopSignsActuator.Off;
        location:
          initial;
          edge Sensor.u_on when On;
          edge Sensor.u_off when Off;
      end
    end
    group StopSign10:
      alg bool On = StopSignsActuator.On and Sensor.On;
      alg bool Off = StopSignsActuator.Off and Sensor.Off;
      automaton Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton Dynamics:
        alg bool On = StopSignsActuator.On;
        alg bool Off = StopSignsActuator.Off;
        location:
          initial;
          edge Sensor.u_on when On;
          edge Sensor.u_off when Off;
      end
    end
    group StopSign11:
      alg bool On = StopSignsActuator.On and Sensor.On;
      alg bool Off = StopSignsActuator.Off and Sensor.Off;
      automaton Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton Dynamics:
        alg bool On = StopSignsActuator.On;
        alg bool Off = StopSignsActuator.Off;
        location:
          initial;
          edge Sensor.u_on when On;
          edge Sensor.u_off when Off;
      end
    end
    group StopSign12:
      alg bool On = StopSignsActuator.On and Sensor.On;
      alg bool Off = StopSignsActuator.Off and Sensor.Off;
      automaton Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton Dynamics:
        alg bool On = StopSignsActuator.On;
        alg bool Off = StopSignsActuator.Off;
        location:
          initial;
          edge Sensor.u_on when On;
          edge Sensor.u_off when Off;
      end
    end
    automaton StopSignsEnabledTimer:
      cont t = 0.0 der if On: 1.0 else 0.0 end;
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      alg real TimerLength = 15.0 / TimeScaler;
      location Off:
        initial;
        edge c_on goto On;
      location On:
        edge c_reset do t := 0.0 goto Off;
        edge u_timeout when t >= TimerLength goto Finished;
      location Finished:
        edge c_reset do t := 0.0 goto Off;
    end
    automaton StopSignsDisabledTimer:
      cont t = 0.0 der if On: 1.0 else 0.0 end;
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      alg real TimerLength = 60.0 / TimeScaler;
      location Off:
        initial;
        edge c_on goto On;
      location On:
        edge c_reset do t := 0.0 goto Off;
        edge u_timeout when t >= TimerLength goto Finished;
      location Finished:
        edge c_reset do t := 0.0 goto Off;
    end
    automaton PreSignsFarActuator:
      controllable c_on;
      controllable c_off;
      alg bool InitialLocationOn = false;
      location Off:
        initial not InitialLocationOn;
        edge c_on goto On;
      location On:
        initial InitialLocationOn;
        edge c_off goto Off;
    end
    automaton PreSignsNearActuator:
      controllable c_on;
      controllable c_off;
      alg bool InitialLocationOn = false;
      location Off:
        initial not InitialLocationOn;
        edge c_on goto On;
      location On:
        initial InitialLocationOn;
        edge c_off goto Off;
    end
    group PreSign1:
      alg bool On = PreSignsFarActuator.On and Sensor.On;
      alg bool Off = PreSignsFarActuator.Off and Sensor.Off;
      automaton Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton Dynamics:
        alg bool On = PreSignsFarActuator.On;
        alg bool Off = PreSignsFarActuator.Off;
        location:
          initial;
          edge Sensor.u_on when On;
          edge Sensor.u_off when Off;
      end
    end
    group PreSign2:
      alg bool On = PreSignsFarActuator.On and Sensor.On;
      alg bool Off = PreSignsFarActuator.Off and Sensor.Off;
      automaton Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton Dynamics:
        alg bool On = PreSignsFarActuator.On;
        alg bool Off = PreSignsFarActuator.Off;
        location:
          initial;
          edge Sensor.u_on when On;
          edge Sensor.u_off when Off;
      end
    end
    group PreSign3:
      alg bool On = PreSignsNearActuator.On and Sensor.On;
      alg bool Off = PreSignsNearActuator.Off and Sensor.Off;
      automaton Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton Dynamics:
        alg bool On = PreSignsNearActuator.On;
        alg bool Off = PreSignsNearActuator.Off;
        location:
          initial;
          edge Sensor.u_on when On;
          edge Sensor.u_off when Off;
      end
    end
    group PreSign4:
      alg bool On = PreSignsNearActuator.On and Sensor.On;
      alg bool Off = PreSignsNearActuator.Off and Sensor.Off;
      automaton Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton Dynamics:
        alg bool On = PreSignsNearActuator.On;
        alg bool Off = PreSignsNearActuator.Off;
        location:
          initial;
          edge Sensor.u_on when On;
          edge Sensor.u_off when Off;
      end
    end
    group PreSign5:
      alg bool On = PreSignsNearActuator.On and Sensor.On;
      alg bool Off = PreSignsNearActuator.Off and Sensor.Off;
      automaton Sensor:
        uncontrollable u_on;
        uncontrollable u_off;
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          edge u_on goto On;
        location On:
          initial InitialLocationOn;
          edge u_off goto Off;
      end
      automaton Dynamics:
        alg bool On = PreSignsNearActuator.On;
        alg bool Off = PreSignsNearActuator.Off;
        location:
          initial;
          edge Sensor.u_on when On;
          edge Sensor.u_off when Off;
      end
    end
    automaton PreSignsEnabled15Timer:
      cont t = 0.0 der if On: 1.0 else 0.0 end;
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      alg real TimerLength = 15.0 / TimeScaler;
      location Off:
        initial;
        edge c_on goto On;
      location On:
        edge c_reset do t := 0.0 goto Off;
        edge u_timeout when t >= TimerLength goto Finished;
      location Finished:
        edge c_reset do t := 0.0 goto Off;
    end
    automaton PreSignsEnabled20Timer:
      cont t = 0.0 der if On: 1.0 else 0.0 end;
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      alg real TimerLength = 20.0 / TimeScaler;
      location Off:
        initial;
        edge c_on goto On;
      location On:
        edge c_reset do t := 0.0 goto Off;
        edge u_timeout when t >= TimerLength goto Finished;
      location Finished:
        edge c_reset do t := 0.0 goto Off;
    end
    automaton PreSignsNearDisabledTimer:
      cont t = 0.0 der if On: 1.0 else 0.0 end;
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      alg real TimerLength = 60.0 / TimeScaler;
      location Off:
        initial;
        edge c_on goto On;
      location On:
        edge c_reset do t := 0.0 goto Off;
        edge u_timeout when t >= TimerLength goto Finished;
      location Finished:
        edge c_reset do t := 0.0 goto Off;
    end
  end
  group Barriers:
    group B1:
      cont Degree = 90.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
      automaton Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
        location Rest:
          initial;
          edge c_open goto Opening;
          edge c_close goto Closing;
        location Opening:
          edge c_stop, c_endStopOpening goto Rest;
        location Closing:
          edge c_stop, c_endStopClosing goto Rest;
      end
      automaton Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
        alg bool InitialLocationClosed = false;
        alg bool InitialLocationOpen = true;
        location Closed:
          initial InitialLocationClosed;
          edge u_closed_off goto Intermediate;
        location Intermediate:
          edge u_closed_on goto Closed;
          edge u_open_on goto Open;
        location Open:
          initial InitialLocationOpen;
          edge u_open_off goto Intermediate;
      end
      automaton Dynamics:
        alg real ClosedDegree = 0.0;
        alg real OpenDegree = 90.0;
        alg real Degree = .Bridge.Barriers.B1.Degree;
        location:
          initial;
          edge Sensor.u_open_on when Degree >= OpenDegree;
          edge Sensor.u_closed_off when Degree < OpenDegree;
          edge Sensor.u_closed_on when Degree <= ClosedDegree;
          edge Sensor.u_open_off when Degree > ClosedDegree;
      end
    end
    group B2:
      cont Degree = 90.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
      automaton Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
        location Rest:
          initial;
          edge c_open goto Opening;
          edge c_close goto Closing;
        location Opening:
          edge c_stop, c_endStopOpening goto Rest;
        location Closing:
          edge c_stop, c_endStopClosing goto Rest;
      end
      automaton Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
        alg bool InitialLocationClosed = false;
        alg bool InitialLocationOpen = true;
        location Closed:
          initial InitialLocationClosed;
          edge u_closed_off goto Intermediate;
        location Intermediate:
          edge u_closed_on goto Closed;
          edge u_open_on goto Open;
        location Open:
          initial InitialLocationOpen;
          edge u_open_off goto Intermediate;
      end
      automaton Dynamics:
        alg real ClosedDegree = 0.0;
        alg real OpenDegree = 90.0;
        alg real Degree = .Bridge.Barriers.B2.Degree;
        location:
          initial;
          edge Sensor.u_open_on when Degree >= OpenDegree;
          edge Sensor.u_closed_off when Degree < OpenDegree;
          edge Sensor.u_closed_on when Degree <= ClosedDegree;
          edge Sensor.u_open_off when Degree > ClosedDegree;
      end
    end
    group B3:
      cont Degree = 90.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
      automaton Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
        location Rest:
          initial;
          edge c_open goto Opening;
          edge c_close goto Closing;
        location Opening:
          edge c_stop, c_endStopOpening goto Rest;
        location Closing:
          edge c_stop, c_endStopClosing goto Rest;
      end
      automaton Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
        alg bool InitialLocationClosed = false;
        alg bool InitialLocationOpen = true;
        location Closed:
          initial InitialLocationClosed;
          edge u_closed_off goto Intermediate;
        location Intermediate:
          edge u_closed_on goto Closed;
          edge u_open_on goto Open;
        location Open:
          initial InitialLocationOpen;
          edge u_open_off goto Intermediate;
      end
      automaton Dynamics:
        alg real ClosedDegree = 0.0;
        alg real OpenDegree = 90.0;
        alg real Degree = .Bridge.Barriers.B3.Degree;
        location:
          initial;
          edge Sensor.u_open_on when Degree >= OpenDegree;
          edge Sensor.u_closed_off when Degree < OpenDegree;
          edge Sensor.u_closed_on when Degree <= ClosedDegree;
          edge Sensor.u_open_off when Degree > ClosedDegree;
      end
    end
    group B4:
      cont Degree = 90.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
      automaton Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
        location Rest:
          initial;
          edge c_open goto Opening;
          edge c_close goto Closing;
        location Opening:
          edge c_stop, c_endStopOpening goto Rest;
        location Closing:
          edge c_stop, c_endStopClosing goto Rest;
      end
      automaton Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
        alg bool InitialLocationClosed = false;
        alg bool InitialLocationOpen = true;
        location Closed:
          initial InitialLocationClosed;
          edge u_closed_off goto Intermediate;
        location Intermediate:
          edge u_closed_on goto Closed;
          edge u_open_on goto Open;
        location Open:
          initial InitialLocationOpen;
          edge u_open_off goto Intermediate;
      end
      automaton Dynamics:
        alg real ClosedDegree = 0.0;
        alg real OpenDegree = 90.0;
        alg real Degree = .Bridge.Barriers.B4.Degree;
        location:
          initial;
          edge Sensor.u_open_on when Degree >= OpenDegree;
          edge Sensor.u_closed_off when Degree < OpenDegree;
          edge Sensor.u_closed_on when Degree <= ClosedDegree;
          edge Sensor.u_open_off when Degree > ClosedDegree;
      end
    end
    group B5:
      cont Degree = 90.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
      automaton Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
        location Rest:
          initial;
          edge c_open goto Opening;
          edge c_close goto Closing;
        location Opening:
          edge c_stop, c_endStopOpening goto Rest;
        location Closing:
          edge c_stop, c_endStopClosing goto Rest;
      end
      automaton Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
        alg bool InitialLocationClosed = false;
        alg bool InitialLocationOpen = true;
        location Closed:
          initial InitialLocationClosed;
          edge u_closed_off goto Intermediate;
        location Intermediate:
          edge u_closed_on goto Closed;
          edge u_open_on goto Open;
        location Open:
          initial InitialLocationOpen;
          edge u_open_off goto Intermediate;
      end
      automaton Dynamics:
        alg real ClosedDegree = 0.0;
        alg real OpenDegree = 90.0;
        alg real Degree = .Bridge.Barriers.B5.Degree;
        location:
          initial;
          edge Sensor.u_open_on when Degree >= OpenDegree;
          edge Sensor.u_closed_off when Degree < OpenDegree;
          edge Sensor.u_closed_on when Degree <= ClosedDegree;
          edge Sensor.u_open_off when Degree > ClosedDegree;
      end
    end
    group B6:
      cont Degree = 90.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
      automaton Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
        location Rest:
          initial;
          edge c_open goto Opening;
          edge c_close goto Closing;
        location Opening:
          edge c_stop, c_endStopOpening goto Rest;
        location Closing:
          edge c_stop, c_endStopClosing goto Rest;
      end
      automaton Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
        alg bool InitialLocationClosed = false;
        alg bool InitialLocationOpen = true;
        location Closed:
          initial InitialLocationClosed;
          edge u_closed_off goto Intermediate;
        location Intermediate:
          edge u_closed_on goto Closed;
          edge u_open_on goto Open;
        location Open:
          initial InitialLocationOpen;
          edge u_open_off goto Intermediate;
      end
      automaton Dynamics:
        alg real ClosedDegree = 0.0;
        alg real OpenDegree = 90.0;
        alg real Degree = .Bridge.Barriers.B6.Degree;
        location:
          initial;
          edge Sensor.u_open_on when Degree >= OpenDegree;
          edge Sensor.u_closed_off when Degree < OpenDegree;
          edge Sensor.u_closed_on when Degree <= ClosedDegree;
          edge Sensor.u_open_off when Degree > ClosedDegree;
      end
    end
    group B7:
      cont Degree = 90.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
      automaton Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
        location Rest:
          initial;
          edge c_open goto Opening;
          edge c_close goto Closing;
        location Opening:
          edge c_stop, c_endStopOpening goto Rest;
        location Closing:
          edge c_stop, c_endStopClosing goto Rest;
      end
      automaton Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
        alg bool InitialLocationClosed = false;
        alg bool InitialLocationOpen = true;
        location Closed:
          initial InitialLocationClosed;
          edge u_closed_off goto Intermediate;
        location Intermediate:
          edge u_closed_on goto Closed;
          edge u_open_on goto Open;
        location Open:
          initial InitialLocationOpen;
          edge u_open_off goto Intermediate;
      end
      automaton Dynamics:
        alg real ClosedDegree = 0.0;
        alg real OpenDegree = 90.0;
        alg real Degree = .Bridge.Barriers.B7.Degree;
        location:
          initial;
          edge Sensor.u_open_on when Degree >= OpenDegree;
          edge Sensor.u_closed_off when Degree < OpenDegree;
          edge Sensor.u_closed_on when Degree <= ClosedDegree;
          edge Sensor.u_open_off when Degree > ClosedDegree;
      end
    end
    group B8:
      cont Degree = 90.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
      automaton Actuator:
        controllable c_open;
        controllable c_close;
        controllable c_stop;
        controllable c_endStopClosing;
        controllable c_endStopOpening;
        location Rest:
          initial;
          edge c_open goto Opening;
          edge c_close goto Closing;
        location Opening:
          edge c_stop, c_endStopOpening goto Rest;
        location Closing:
          edge c_stop, c_endStopClosing goto Rest;
      end
      automaton Sensor:
        uncontrollable u_open_on;
        uncontrollable u_open_off;
        uncontrollable u_closed_on;
        uncontrollable u_closed_off;
        alg bool InitialLocationClosed = false;
        alg bool InitialLocationOpen = true;
        location Closed:
          initial InitialLocationClosed;
          edge u_closed_off goto Intermediate;
        location Intermediate:
          edge u_closed_on goto Closed;
          edge u_open_on goto Open;
        location Open:
          initial InitialLocationOpen;
          edge u_open_off goto Intermediate;
      end
      automaton Dynamics:
        alg real ClosedDegree = 0.0;
        alg real OpenDegree = 90.0;
        alg real Degree = .Bridge.Barriers.B8.Degree;
        location:
          initial;
          edge Sensor.u_open_on when Degree >= OpenDegree;
          edge Sensor.u_closed_off when Degree < OpenDegree;
          edge Sensor.u_closed_on when Degree <= ClosedDegree;
          edge Sensor.u_open_off when Degree > ClosedDegree;
      end
    end
    automaton LightSignals:
      controllable c_on;
      controllable c_off;
      alg bool InitialLocationOn = false;
      location Off:
        initial not InitialLocationOn;
        edge c_on goto On;
      location On:
        initial InitialLocationOn;
        edge c_off goto Off;
    end
    automaton LTSoundSignals:
      controllable c_on;
      controllable c_off;
      alg bool InitialLocationOn = false;
      location Off:
        initial not InitialLocationOn;
        edge c_on goto On;
      location On:
        initial InitialLocationOn;
        edge c_off goto Off;
    end
    automaton EnteringClosedTimer:
      cont t = 0.0 der if On: 1.0 else 0.0 end;
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      alg real TimerLength = 1.0 / TimeScaler;
      location Off:
        initial;
        edge c_on goto On;
      location On:
        edge c_reset do t := 0.0 goto Off;
        edge u_timeout when t >= TimerLength goto Finished;
      location Finished:
        edge c_reset do t := 0.0 goto Off;
    end
    automaton LeavingOpenTimer:
      cont t = 0.0 der if On: 1.0 else 0.0 end;
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      alg real TimerLength = 1.0 / TimeScaler;
      location Off:
        initial;
        edge c_on goto On;
      location On:
        edge c_reset do t := 0.0 goto Off;
        edge u_timeout when t >= TimerLength goto Finished;
      location Finished:
        edge c_reset do t := 0.0 goto Off;
    end
    automaton LTSoundSignalTimer:
      cont t = 0.0 der if On: 1.0 else 0.0 end;
      controllable c_on;
      controllable c_reset;
      uncontrollable u_timeout;
      alg real TimerLength = 6.0 / TimeScaler;
      location Off:
        initial;
        edge c_on goto On;
      location On:
        edge c_reset do t := 0.0 goto Off;
        edge u_timeout when t >= TimerLength goto Finished;
      location Finished:
        edge c_reset do t := 0.0 goto Off;
    end
  end
  group Deck:
    cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
    automaton Actuator:
      controllable c_open;
      controllable c_close;
      controllable c_stop;
      controllable c_endStopClosing;
      controllable c_endStopOpening;
      location Rest:
        initial;
        edge c_open goto Opening;
        edge c_close goto Closing;
      location Opening:
        edge c_stop, c_endStopOpening goto Rest;
      location Closing:
        edge c_stop, c_endStopClosing goto Rest;
    end
    automaton Sensor:
      uncontrollable u_open_on;
      uncontrollable u_open_off;
      uncontrollable u_closed_on;
      uncontrollable u_closed_off;
      alg bool InitialLocationClosed = true;
      alg bool InitialLocationOpen = false;
      location Closed:
        initial InitialLocationClosed;
        edge u_closed_off goto Intermediate;
      location Intermediate:
        edge u_closed_on goto Closed;
        edge u_open_on goto Open;
      location Open:
        initial InitialLocationOpen;
        edge u_open_off goto Intermediate;
    end
    automaton Dynamics:
      alg real ClosedDegree = 0.0;
      alg real OpenDegree = 90.0;
      alg real Degree = .Bridge.Deck.Degree;
      location:
        initial;
        edge Sensor.u_open_on when Degree >= OpenDegree;
        edge Sensor.u_closed_off when Degree < OpenDegree;
        edge Sensor.u_closed_on when Degree <= ClosedDegree;
        edge Sensor.u_open_off when Degree > ClosedDegree;
    end
  end
  automaton CloseRequest:
    uncontrollable u_on;
    uncontrollable u_off;
    alg bool InitialLocationOn = false;
    location Off:
      initial not InitialLocationOn;
      edge u_on goto On;
    location On:
      initial InitialLocationOn;
      edge u_off goto Off;
  end
  automaton EmergencyStop:
    uncontrollable u_activate;
    uncontrollable u_reset;
    location Deactivated:
      initial;
      edge u_activate goto Activated;
    location Activated:
      edge u_reset goto Deactivated;
  end
end
group sup:
  group SafetyRequirements:
    group Requirement_I:
      requirement invariant .Bridge.Deck.Actuator.c_open needs not(Lock.UpstreamEb.GatesMoving or Lock.UpstreamFlood.GatesMoving or Lock.DownstreamEb.GatesMoving or Lock.DownstreamFlood.GatesMoving or Lock.DownstreamStormFlood.GatesMoving);
      requirement invariant .Bridge.Deck.Actuator.c_open needs not(Lock.UpstreamEb.GatesMoving or Lock.UpstreamFlood.GatesMoving or Lock.DownstreamEb.GatesMoving or Lock.DownstreamFlood.GatesMoving or Lock.DownstreamStormFlood.GatesMoving);
      requirement invariant .Lock.UpstreamEb.EastGate.Actuator.c_open needs not Bridge.Deck.Moving;
      requirement invariant .Lock.UpstreamEb.EastGate.Actuator.c_close needs not Bridge.Deck.Moving;
      requirement invariant .Lock.UpstreamEb.WestGate.Actuator.c_open needs not Bridge.Deck.Moving;
      requirement invariant .Lock.UpstreamEb.WestGate.Actuator.c_close needs not Bridge.Deck.Moving;
      requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_open needs not Bridge.Deck.Moving;
      requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_close needs not Bridge.Deck.Moving;
      requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_open needs not Bridge.Deck.Moving;
      requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_close needs not Bridge.Deck.Moving;
      requirement invariant .Lock.DownstreamEb.EastGate.Actuator.c_open needs not Bridge.Deck.Moving;
      requirement invariant .Lock.DownstreamEb.EastGate.Actuator.c_close needs not Bridge.Deck.Moving;
      requirement invariant .Lock.DownstreamEb.WestGate.Actuator.c_open needs not Bridge.Deck.Moving;
      requirement invariant .Lock.DownstreamEb.WestGate.Actuator.c_close needs not Bridge.Deck.Moving;
      requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_open needs not Bridge.Deck.Moving;
      requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_close needs not Bridge.Deck.Moving;
      requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_open needs not Bridge.Deck.Moving;
      requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_close needs not Bridge.Deck.Moving;
      requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_open needs not Bridge.Deck.Moving;
      requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_close needs not Bridge.Deck.Moving;
      requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_open needs not Bridge.Deck.Moving;
      requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_close needs not Bridge.Deck.Moving;
      requirement invariant .Lock.VTL.IncomingDE.Actuator.c_g needs Lock.DownstreamEb.GatesOpen and Lock.DownstreamFlood.GatesOpen and Lock.DownstreamStormFlood.GatesOpen;
      requirement invariant .Lock.VTL.IncomingDW.Actuator.c_g needs Lock.DownstreamEb.GatesOpen and Lock.DownstreamFlood.GatesOpen and Lock.DownstreamStormFlood.GatesOpen;
      requirement invariant .Lock.VTL.IncomingUE.Actuator.c_g needs Lock.UpstreamEb.GatesOpen and Lock.UpstreamFlood.GatesOpen;
      requirement invariant .Lock.VTL.IncomingUW.Actuator.c_g needs Lock.UpstreamEb.GatesOpen and Lock.UpstreamFlood.GatesOpen;
      requirement invariant .Bridge.LTL.StopSignsActuator.c_on needs Bridge.LTL.PreSignsEnabled15Timer.Finished;
      requirement invariant .Bridge.LTL.StopSignsActuator.c_on needs Bridge.LTL.PreSignsEnabled;
      requirement invariant .Bridge.LTL.SwitchLaneStopSigns.c_on needs Bridge.LTL.PreSignsEnabled15Timer.Finished;
      requirement invariant .Bridge.LTL.SwitchLaneStopSigns.c_on needs Bridge.LTL.PreSignsEnabled;
      requirement invariant .Bridge.Barriers.LightSignals.c_on needs Bridge.LTL.PreSignsEnabled15Timer.Finished;
      requirement invariant .Bridge.Barriers.LightSignals.c_on needs Bridge.LTL.PreSignsEnabled;
    end
    group Requirement_II:
      requirement invariant .Bridge.Deck.Actuator.c_open needs Lock.VTL.BridgeRed;
      requirement invariant .Bridge.Deck.Actuator.c_close needs Lock.VTL.BridgeRed;
      requirement invariant .Lock.VTL.BridgeUE.Actuator.c_g needs Bridge.Deck.Open or Bridge.Deck.Closed;
      requirement invariant .Lock.VTL.BridgeUW.Actuator.c_g needs Bridge.Deck.Open or Bridge.Deck.Closed;
      requirement invariant .Lock.VTL.BridgeUE.Actuator.c_g needs Lock.DownstreamEb.GatesOpen and Lock.DownstreamFlood.GatesOpen and Lock.DownstreamStormFlood.GatesOpen;
      requirement invariant .Lock.VTL.BridgeUW.Actuator.c_g needs Lock.DownstreamEb.GatesOpen and Lock.DownstreamFlood.GatesOpen and Lock.DownstreamStormFlood.GatesOpen;
      requirement invariant .Bridge.Barriers.LTSoundSignals.c_on needs Bridge.LTL.PreSignsEnabled20TimeOk and Bridge.UI.LTLButton.Activated;
      requirement invariant .Bridge.Barriers.LTSoundSignals.c_on needs not Bridge.Barriers.LTClosed;
      requirement invariant .Bridge.Barriers.LTSoundSignals.c_off needs Bridge.Barriers.LTClosed;
    end
    group Requirement_III:
      requirement invariant .Bridge.Deck.Actuator.c_open needs Lock.VTL.DownstreamRedOrRedRed;
      requirement invariant .Bridge.Deck.Actuator.c_close needs Lock.VTL.DownstreamRedOrRedRed;
      requirement invariant .Lock.VTL.IncomingDE.Actuator.c_g needs Bridge.Deck.Open or Bridge.Deck.Closed;
      requirement invariant .Lock.VTL.IncomingDW.Actuator.c_g needs Bridge.Deck.Open or Bridge.Deck.Closed;
      requirement invariant .Lock.DownstreamEb.EastGate.Actuator.c_close needs Lock.VTL.DownstreamRedOrRedRed;
      requirement invariant .Lock.DownstreamEb.WestGate.Actuator.c_close needs Lock.VTL.DownstreamRedOrRedRed;
      requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_close needs Lock.VTL.DownstreamRedOrRedRed;
      requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_close needs Lock.VTL.DownstreamRedOrRedRed;
      requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_close needs Lock.VTL.DownstreamRedOrRedRed;
      requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_close needs Lock.VTL.DownstreamRedOrRedRed;
      requirement invariant .Lock.UpstreamEb.EastGate.Actuator.c_close needs Lock.VTL.UpstreamRedOrRedRed;
      requirement invariant .Lock.UpstreamEb.WestGate.Actuator.c_close needs Lock.VTL.UpstreamRedOrRedRed;
      requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_close needs Lock.VTL.UpstreamRedOrRedRed;
      requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_close needs Lock.VTL.UpstreamRedOrRedRed;
      requirement invariant .Bridge.Barriers.B3.Actuator.c_close needs Bridge.LTL.StopSignsEnabledTimer.Finished;
      requirement invariant .Bridge.Barriers.B3.Actuator.c_close needs Bridge.LTL.StopSignsEnabled;
      requirement invariant .Bridge.Barriers.B6.Actuator.c_close needs Bridge.LTL.StopSignsEnabledTimer.Finished;
      requirement invariant .Bridge.Barriers.B6.Actuator.c_close needs Bridge.LTL.StopSignsEnabled;
    end
    group Requirement_IV:
      requirement invariant .Lock.DownstreamEb.EastGate.Actuator.c_close needs Lock.VTL.BridgeRed;
      requirement invariant .Lock.DownstreamEb.WestGate.Actuator.c_close needs Lock.VTL.BridgeRed;
      requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_close needs Lock.VTL.BridgeRed;
      requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_close needs Lock.VTL.BridgeRed;
      requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_close needs Lock.VTL.BridgeRed;
      requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_close needs Lock.VTL.BridgeRed;
      requirement invariant .Bridge.Barriers.B2.Actuator.c_close needs Bridge.Barriers.EnteringClosedTimer.Finished;
      requirement invariant .Bridge.Barriers.B2.Actuator.c_close needs Bridge.Barriers.EnteringClosed;
      requirement invariant .Bridge.Barriers.B7.Actuator.c_close needs Bridge.Barriers.EnteringClosedTimer.Finished;
      requirement invariant .Bridge.Barriers.B7.Actuator.c_close needs Bridge.Barriers.EnteringClosed;
    end
    group Requirement_V:
      requirement invariant .Lock.DownstreamEb.EastGate.Actuator.c_open needs Lock.UpstreamEb.GatesPaddlesClosed or Lock.UpstreamFlood.GatesPaddlesClosed;
      requirement invariant .Lock.DownstreamEb.WestGate.Actuator.c_open needs Lock.UpstreamEb.GatesPaddlesClosed or Lock.UpstreamFlood.GatesPaddlesClosed;
      requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_open needs Lock.UpstreamEb.GatesPaddlesClosed or Lock.UpstreamFlood.GatesPaddlesClosed;
      requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_open needs Lock.UpstreamEb.GatesPaddlesClosed or Lock.UpstreamFlood.GatesPaddlesClosed;
      requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_open needs Lock.UpstreamEb.GatesPaddlesClosed or Lock.UpstreamFlood.GatesPaddlesClosed;
      requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_open needs Lock.UpstreamEb.GatesPaddlesClosed or Lock.UpstreamFlood.GatesPaddlesClosed;
      requirement invariant .Lock.UpstreamEb.EastGate.Actuator.c_open needs Lock.DownstreamEb.GatesPaddlesClosed or Lock.DownstreamFlood.GatesPaddlesClosed or Lock.DownstreamStormFlood.GatesPaddlesClosed;
      requirement invariant .Lock.UpstreamEb.WestGate.Actuator.c_open needs Lock.DownstreamEb.GatesPaddlesClosed or Lock.DownstreamFlood.GatesPaddlesClosed or Lock.DownstreamStormFlood.GatesPaddlesClosed;
      requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_open needs Lock.DownstreamEb.GatesPaddlesClosed or Lock.DownstreamFlood.GatesPaddlesClosed or Lock.DownstreamStormFlood.GatesPaddlesClosed;
      requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_open needs Lock.DownstreamEb.GatesPaddlesClosed or Lock.DownstreamFlood.GatesPaddlesClosed or Lock.DownstreamStormFlood.GatesPaddlesClosed;
      requirement invariant .Bridge.Barriers.B1.Actuator.c_close needs Bridge.Barriers.LeavingClosed;
      requirement invariant .Bridge.Barriers.B4.Actuator.c_close needs Bridge.Barriers.LeavingClosed;
      requirement invariant .Bridge.Barriers.B5.Actuator.c_close needs Bridge.Barriers.LeavingClosed;
      requirement invariant .Bridge.Barriers.B8.Actuator.c_close needs Bridge.Barriers.LeavingClosed;
    end
    group Requirement_VI:
      requirement invariant .Lock.DownstreamEb.EastPaddle.Actuator.c_open needs Lock.UpstreamEb.GatesPaddlesClosed or Lock.UpstreamFlood.GatesPaddlesClosed;
      requirement invariant .Lock.DownstreamEb.WestPaddle.Actuator.c_open needs Lock.UpstreamEb.GatesPaddlesClosed or Lock.UpstreamFlood.GatesPaddlesClosed;
      requirement invariant .Lock.DownstreamFlood.EastPaddle.Actuator.c_open needs Lock.UpstreamEb.GatesPaddlesClosed or Lock.UpstreamFlood.GatesPaddlesClosed;
      requirement invariant .Lock.DownstreamFlood.WestPaddle.Actuator.c_open needs Lock.UpstreamEb.GatesPaddlesClosed or Lock.UpstreamFlood.GatesPaddlesClosed;
      requirement invariant .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_open needs Lock.UpstreamEb.GatesPaddlesClosed or Lock.UpstreamFlood.GatesPaddlesClosed;
      requirement invariant .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_open needs Lock.UpstreamEb.GatesPaddlesClosed or Lock.UpstreamFlood.GatesPaddlesClosed;
      requirement invariant .Lock.UpstreamEb.EastPaddle.Actuator.c_open needs Lock.DownstreamEb.GatesPaddlesClosed or Lock.DownstreamFlood.GatesPaddlesClosed or Lock.DownstreamStormFlood.GatesPaddlesClosed;
      requirement invariant .Lock.UpstreamEb.WestPaddle.Actuator.c_open needs Lock.DownstreamEb.GatesPaddlesClosed or Lock.DownstreamFlood.GatesPaddlesClosed or Lock.DownstreamStormFlood.GatesPaddlesClosed;
      requirement invariant .Lock.UpstreamFlood.EastPaddle.Actuator.c_open needs Lock.DownstreamEb.GatesPaddlesClosed or Lock.DownstreamFlood.GatesPaddlesClosed or Lock.DownstreamStormFlood.GatesPaddlesClosed;
      requirement invariant .Lock.UpstreamFlood.WestPaddle.Actuator.c_open needs Lock.DownstreamEb.GatesPaddlesClosed or Lock.DownstreamFlood.GatesPaddlesClosed or Lock.DownstreamStormFlood.GatesPaddlesClosed;
      requirement invariant .Bridge.Barriers.B4.Actuator.c_close needs Bridge.Barriers.LTSoundSignalTimerOk;
      requirement invariant .Bridge.Barriers.B8.Actuator.c_close needs Bridge.Barriers.LTSoundSignalTimerOk;
    end
    group Requirement_VII:
      requirement invariant .Lock.DownstreamEb.EastGate.Actuator.c_open needs Lock.EqualWaterDownstream.On;
      requirement invariant .Lock.DownstreamEb.WestGate.Actuator.c_open needs Lock.EqualWaterDownstream.On;
      requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_open needs Lock.EqualWaterDownstream.On;
      requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_open needs Lock.EqualWaterDownstream.On;
      requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_open needs Lock.EqualWaterDownstream.On;
      requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_open needs Lock.EqualWaterDownstream.On;
      requirement invariant .Lock.UpstreamEb.EastGate.Actuator.c_open needs Lock.EqualWaterUpstream.On;
      requirement invariant .Lock.UpstreamEb.WestGate.Actuator.c_open needs Lock.EqualWaterUpstream.On;
      requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_open needs Lock.EqualWaterUpstream.On;
      requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_open needs Lock.EqualWaterUpstream.On;
      requirement invariant .Bridge.Deck.Actuator.c_open needs Bridge.Barriers.AllClosed;
    end
    group requirement_VIII:
      requirement invariant Lock.DownstreamEb.EastGate.Closed or Lock.DownstreamEb.EastPaddle.Open;
      requirement invariant Lock.DownstreamEb.WestGate.Closed or Lock.DownstreamEb.WestPaddle.Open;
      requirement invariant Lock.DownstreamFlood.EastGate.Closed or Lock.DownstreamFlood.EastPaddle.Open;
      requirement invariant Lock.DownstreamFlood.WestGate.Closed or Lock.DownstreamFlood.WestPaddle.Open;
      requirement invariant Lock.DownstreamStormFlood.EastGate.Closed or Lock.DownstreamStormFlood.EastPaddle.Open;
      requirement invariant Lock.DownstreamStormFlood.WestGate.Closed or Lock.DownstreamStormFlood.WestPaddle.Open;
      requirement invariant Lock.UpstreamEb.EastGate.Closed or Lock.UpstreamEb.EastPaddle.Open;
      requirement invariant Lock.UpstreamEb.WestGate.Closed or Lock.UpstreamEb.WestPaddle.Open;
      requirement invariant Lock.UpstreamFlood.EastGate.Closed or Lock.UpstreamFlood.EastPaddle.Open;
      requirement invariant Lock.UpstreamFlood.WestGate.Closed or Lock.UpstreamFlood.WestPaddle.Open;
    end
    group Requirement_IX:
      requirement invariant .Lock.VTL.BridgeUE.Actuator.c_g needs Lock.VTL.DownstreamRedOrRedRed;
      requirement invariant .Lock.VTL.BridgeUW.Actuator.c_g needs Lock.VTL.DownstreamRedOrRedRed;
      requirement invariant .Bridge.Barriers.B3.Actuator.c_open needs Bridge.Barriers.LeavingOpenTimer.Finished;
      requirement invariant .Bridge.Barriers.B3.Actuator.c_open needs Bridge.Barriers.LeavingOpen;
      requirement invariant .Bridge.Barriers.B6.Actuator.c_open needs Bridge.Barriers.LeavingOpenTimer.Finished;
      requirement invariant .Bridge.Barriers.B6.Actuator.c_open needs Bridge.Barriers.LeavingOpen;
    end
    group Requirement_X:
      requirement invariant .Lock.VTL.IncomingDE.Actuator.c_g needs Lock.VTL.BridgeRed;
      requirement invariant .Lock.VTL.IncomingDW.Actuator.c_g needs Lock.VTL.BridgeRed;
      requirement invariant .Bridge.LTL.StopSignsActuator.c_off needs Bridge.Barriers.AllOpen;
      requirement invariant .Bridge.LTL.SwitchLaneStopSigns.c_off needs Bridge.Barriers.AllOpen;
      requirement invariant .Bridge.Barriers.LightSignals.c_off needs Bridge.Barriers.AllOpen;
    end
    group requirement_XI:
    end
    group Requirement_VIII:
      requirement invariant .Bridge.Barriers.B1.Actuator.c_open needs Bridge.Deck.Closed;
      requirement invariant .Bridge.Barriers.B2.Actuator.c_open needs Bridge.Deck.Closed;
      requirement invariant .Bridge.Barriers.B3.Actuator.c_open needs Bridge.Deck.Closed;
      requirement invariant .Bridge.Barriers.B4.Actuator.c_open needs Bridge.Deck.Closed;
      requirement invariant .Bridge.Barriers.B5.Actuator.c_open needs Bridge.Deck.Closed;
      requirement invariant .Bridge.Barriers.B6.Actuator.c_open needs Bridge.Deck.Closed;
      requirement invariant .Bridge.Barriers.B7.Actuator.c_open needs Bridge.Deck.Closed;
      requirement invariant .Bridge.Barriers.B8.Actuator.c_open needs Bridge.Deck.Closed;
    end
    group Requirement_XI:
      requirement invariant .Bridge.LTL.PreSignsNearActuator.c_off needs Bridge.LTL.StopSignsDisabledTimer.Finished;
      requirement invariant .Bridge.LTL.PreSignsNearActuator.c_off needs Bridge.LTL.StopSignsDisabled;
    end
    group Requirement_XII:
      requirement invariant .Bridge.LTL.PreSignsFarActuator.c_off needs Bridge.LTL.PreSignsNearDisabledTimer.Finished;
      requirement invariant .Bridge.LTL.PreSignsFarActuator.c_off needs Bridge.LTL.PreSignsNearDisabled;
    end
    group Requirement_XIII:
      requirement invariant Bridge.CloseRequest.On disables .Bridge.Barriers.B1.Actuator.c_close;
      requirement invariant Bridge.CloseRequest.On disables .Bridge.Barriers.B2.Actuator.c_close;
      requirement invariant Bridge.CloseRequest.On disables .Bridge.Barriers.B3.Actuator.c_close;
      requirement invariant Bridge.CloseRequest.On disables .Bridge.Barriers.B4.Actuator.c_close;
      requirement invariant Bridge.CloseRequest.On disables .Bridge.Barriers.B5.Actuator.c_close;
      requirement invariant Bridge.CloseRequest.On disables .Bridge.Barriers.B6.Actuator.c_close;
      requirement invariant Bridge.CloseRequest.On disables .Bridge.Barriers.B7.Actuator.c_close;
      requirement invariant Bridge.CloseRequest.On disables .Bridge.Barriers.B8.Actuator.c_close;
      requirement invariant Bridge.CloseRequest.On disables .Bridge.Deck.Actuator.c_open;
    end
  end
  group FunctionalRequirements:
    group Gates_FReq:
      group UpstreamEbGateEast:
        requirement invariant .Lock.UpstreamEb.EastGate.Actuator.c_open needs Lock.UI.UpstreamEbGate.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamEb.EastGate.Actuator.c_close needs Lock.UI.UpstreamEbGate.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamEb.EastGate.Actuator.c_stop needs Lock.UI.UpstreamEbGate.Stop or Lock.EmergencyStop.Activated;
      end
      group UpstreamEbGateWest:
        requirement invariant .Lock.UpstreamEb.WestGate.Actuator.c_open needs Lock.UI.UpstreamEbGate.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamEb.WestGate.Actuator.c_close needs Lock.UI.UpstreamEbGate.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamEb.WestGate.Actuator.c_stop needs Lock.UI.UpstreamEbGate.Stop or Lock.EmergencyStop.Activated;
      end
      group UpstreamFloodGateEast:
        requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_open needs Lock.UI.UpstreamFloodGate.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_close needs Lock.UI.UpstreamFloodGate.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_stop needs Lock.UI.UpstreamFloodGate.Stop or Lock.EmergencyStop.Activated;
      end
      group UpstreamFloodGateWest:
        requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_open needs Lock.UI.UpstreamFloodGate.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_close needs Lock.UI.UpstreamFloodGate.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_stop needs Lock.UI.UpstreamFloodGate.Stop or Lock.EmergencyStop.Activated;
      end
      group DownstreamEbGateEast:
        requirement invariant .Lock.DownstreamEb.EastGate.Actuator.c_open needs Lock.UI.DownstreamEbGate.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamEb.EastGate.Actuator.c_close needs Lock.UI.DownstreamEbGate.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamEb.EastGate.Actuator.c_stop needs Lock.UI.DownstreamEbGate.Stop or Lock.EmergencyStop.Activated;
      end
      group DownstreamEbGateWest:
        requirement invariant .Lock.DownstreamEb.WestGate.Actuator.c_open needs Lock.UI.DownstreamEbGate.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamEb.WestGate.Actuator.c_close needs Lock.UI.DownstreamEbGate.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamEb.WestGate.Actuator.c_stop needs Lock.UI.DownstreamEbGate.Stop or Lock.EmergencyStop.Activated;
      end
      group DownstreamFloodGateEast:
        requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_open needs Lock.UI.DownstreamFloodGate.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_close needs Lock.UI.DownstreamFloodGate.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_stop needs Lock.UI.DownstreamFloodGate.Stop or Lock.EmergencyStop.Activated;
      end
      group DownstreamFloodGateWest:
        requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_open needs Lock.UI.DownstreamFloodGate.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_close needs Lock.UI.DownstreamFloodGate.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_stop needs Lock.UI.DownstreamFloodGate.Stop or Lock.EmergencyStop.Activated;
      end
      group DownstreamStormFloodGateEast:
        requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_open needs Lock.UI.DownstreamStormFloodGate.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_close needs Lock.UI.DownstreamStormFloodGate.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_stop needs Lock.UI.DownstreamStormFloodGate.Stop or Lock.EmergencyStop.Activated;
      end
      group DownstreamStormFloodGateWest:
        requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_open needs Lock.UI.DownstreamStormFloodGate.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_close needs Lock.UI.DownstreamStormFloodGate.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_stop needs Lock.UI.DownstreamStormFloodGate.Stop or Lock.EmergencyStop.Activated;
      end
    end
    group Paddles_FReq:
      group UpstreamEbPaddleEast:
        requirement invariant .Lock.UpstreamEb.EastPaddle.Actuator.c_open needs Lock.UI.UpstreamEbPaddle.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamEb.EastPaddle.Actuator.c_close needs Lock.UI.UpstreamEbPaddle.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamEb.EastPaddle.Actuator.c_stop needs Lock.UI.UpstreamEbPaddle.Stop or Lock.EmergencyStop.Activated;
      end
      group UpstreamEbPaddleWest:
        requirement invariant .Lock.UpstreamEb.WestPaddle.Actuator.c_open needs Lock.UI.UpstreamEbPaddle.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamEb.WestPaddle.Actuator.c_close needs Lock.UI.UpstreamEbPaddle.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamEb.WestPaddle.Actuator.c_stop needs Lock.UI.UpstreamEbPaddle.Stop or Lock.EmergencyStop.Activated;
      end
      group UpstreamFloodPaddleEast:
        requirement invariant .Lock.UpstreamFlood.EastPaddle.Actuator.c_open needs Lock.UI.UpstreamFloodPaddle.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamFlood.EastPaddle.Actuator.c_close needs Lock.UI.UpstreamFloodPaddle.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamFlood.EastPaddle.Actuator.c_stop needs Lock.UI.UpstreamFloodPaddle.Stop or Lock.EmergencyStop.Activated;
      end
      group UpstreamFloodPaddleWest:
        requirement invariant .Lock.UpstreamFlood.WestPaddle.Actuator.c_open needs Lock.UI.UpstreamFloodPaddle.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamFlood.WestPaddle.Actuator.c_close needs Lock.UI.UpstreamFloodPaddle.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.UpstreamFlood.WestPaddle.Actuator.c_stop needs Lock.UI.UpstreamFloodPaddle.Stop or Lock.EmergencyStop.Activated;
      end
      group DownstreamEbPaddleEast:
        requirement invariant .Lock.DownstreamEb.EastPaddle.Actuator.c_open needs Lock.UI.DownstreamEbPaddle.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamEb.EastPaddle.Actuator.c_close needs Lock.UI.DownstreamEbPaddle.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamEb.EastPaddle.Actuator.c_stop needs Lock.UI.DownstreamEbPaddle.Stop or Lock.EmergencyStop.Activated;
      end
      group DownstreamEbPaddleWest:
        requirement invariant .Lock.DownstreamEb.WestPaddle.Actuator.c_open needs Lock.UI.DownstreamEbPaddle.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamEb.WestPaddle.Actuator.c_close needs Lock.UI.DownstreamEbPaddle.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamEb.WestPaddle.Actuator.c_stop needs Lock.UI.DownstreamEbPaddle.Stop or Lock.EmergencyStop.Activated;
      end
      group DownstreamFloodPaddleEast:
        requirement invariant .Lock.DownstreamFlood.EastPaddle.Actuator.c_open needs Lock.UI.DownstreamFloodPaddle.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamFlood.EastPaddle.Actuator.c_close needs Lock.UI.DownstreamFloodPaddle.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamFlood.EastPaddle.Actuator.c_stop needs Lock.UI.DownstreamFloodPaddle.Stop or Lock.EmergencyStop.Activated;
      end
      group DownstreamFloodPaddleWest:
        requirement invariant .Lock.DownstreamFlood.WestPaddle.Actuator.c_open needs Lock.UI.DownstreamFloodPaddle.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamFlood.WestPaddle.Actuator.c_close needs Lock.UI.DownstreamFloodPaddle.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamFlood.WestPaddle.Actuator.c_stop needs Lock.UI.DownstreamFloodPaddle.Stop or Lock.EmergencyStop.Activated;
      end
      group DownstreamStormFloodPaddleEast:
        requirement invariant .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_open needs Lock.UI.DownstreamStormFloodPaddle.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_close needs Lock.UI.DownstreamStormFloodPaddle.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_stop needs Lock.UI.DownstreamStormFloodPaddle.Stop or Lock.EmergencyStop.Activated;
      end
      group DownstreamStormFloodPaddleWest:
        requirement invariant .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_open needs Lock.UI.DownstreamStormFloodPaddle.Open and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_close needs Lock.UI.DownstreamStormFloodPaddle.Close and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_stop needs Lock.UI.DownstreamStormFloodPaddle.Stop or Lock.EmergencyStop.Activated;
      end
    end
    group VTL_FReq:
      group IncomingDE:
        requirement invariant .Lock.VTL.IncomingDE.Actuator.c_r needs Lock.UI.DownstreamVTLIncoming.Red or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.VTL.IncomingDE.Actuator.c_rg needs Lock.UI.DownstreamVTLIncoming.RedGreen and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.VTL.IncomingDE.Actuator.c_g needs Lock.UI.DownstreamVTLIncoming.Green and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.VTL.IncomingDE.Actuator.c_rr needs Lock.UI.DownstreamVTLIncoming.RedRed and Lock.EmergencyStop.Deactivated;
      end
      group IncomingDW:
        requirement invariant .Lock.VTL.IncomingDW.Actuator.c_r needs Lock.UI.DownstreamVTLIncoming.Red or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.VTL.IncomingDW.Actuator.c_rg needs Lock.UI.DownstreamVTLIncoming.RedGreen and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.VTL.IncomingDW.Actuator.c_g needs Lock.UI.DownstreamVTLIncoming.Green and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.VTL.IncomingDW.Actuator.c_rr needs Lock.UI.DownstreamVTLIncoming.RedRed and Lock.EmergencyStop.Deactivated;
      end
      group IncomingUE:
        requirement invariant .Lock.VTL.IncomingUE.Actuator.c_r needs Lock.UI.UpstreamVTLIncoming.Red or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.VTL.IncomingUE.Actuator.c_rg needs Lock.UI.UpstreamVTLIncoming.RedGreen and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.VTL.IncomingUE.Actuator.c_g needs Lock.UI.UpstreamVTLIncoming.Green and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.VTL.IncomingUE.Actuator.c_rr needs Lock.UI.UpstreamVTLIncoming.RedRed and Lock.EmergencyStop.Deactivated;
      end
      group IncomingUW:
        requirement invariant .Lock.VTL.IncomingUW.Actuator.c_r needs Lock.UI.UpstreamVTLIncoming.Red or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.VTL.IncomingUW.Actuator.c_rg needs Lock.UI.UpstreamVTLIncoming.RedGreen and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.VTL.IncomingUW.Actuator.c_g needs Lock.UI.UpstreamVTLIncoming.Green and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.VTL.IncomingUW.Actuator.c_rr needs Lock.UI.UpstreamVTLIncoming.RedRed and Lock.EmergencyStop.Deactivated;
      end
      group BridgeUE:
        requirement invariant .Lock.VTL.BridgeUE.Actuator.c_r needs Lock.UI.UpstreamVTLBridge.Red or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.VTL.BridgeUE.Actuator.c_rg needs Lock.UI.UpstreamVTLBridge.RedGreen and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.VTL.BridgeUE.Actuator.c_g needs Lock.UI.UpstreamVTLBridge.Green and Lock.EmergencyStop.Deactivated;
      end
      group BridgeUW:
        requirement invariant .Lock.VTL.BridgeUW.Actuator.c_r needs Lock.UI.UpstreamVTLBridge.Red or Lock.EmergencyStop.Activated;
        requirement invariant .Lock.VTL.BridgeUW.Actuator.c_rg needs Lock.UI.UpstreamVTLBridge.RedGreen and Lock.EmergencyStop.Deactivated;
        requirement invariant .Lock.VTL.BridgeUW.Actuator.c_g needs Lock.UI.UpstreamVTLBridge.Green and Lock.EmergencyStop.Deactivated;
      end
    end
    group LTL_FReq:
      requirement invariant .Bridge.LTL.PreSignsNearActuator.c_on needs Bridge.UI.LTLButton.Activated;
      requirement invariant .Bridge.LTL.PreSignsFarActuator.c_on needs Bridge.UI.LTLButton.Activated;
      requirement invariant .Bridge.LTL.StopSignsActuator.c_on needs Bridge.UI.LTLButton.Activated;
      requirement invariant .Bridge.LTL.SwitchLaneStopSigns.c_on needs Bridge.UI.LTLButton.Activated;
      requirement invariant .Bridge.Barriers.LightSignals.c_on needs Bridge.UI.LTLButton.Activated;
      requirement invariant .Bridge.LTL.PreSignsNearActuator.c_off needs Bridge.UI.LTLButton.Deactivated;
      requirement invariant .Bridge.LTL.PreSignsFarActuator.c_off needs Bridge.UI.LTLButton.Deactivated;
      requirement invariant .Bridge.LTL.StopSignsActuator.c_off needs Bridge.UI.LTLButton.Deactivated;
      requirement invariant .Bridge.LTL.SwitchLaneStopSigns.c_off needs Bridge.UI.LTLButton.Deactivated;
      requirement invariant .Bridge.Barriers.LightSignals.c_off needs Bridge.UI.LTLButton.Deactivated;
    end
    group Barrier_FReq:
      group Barrier1UI:
        requirement invariant .Bridge.Barriers.B1.Actuator.c_open needs Bridge.UI.Barrier1.Open and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B1.Actuator.c_close needs Bridge.UI.Barrier1.Close and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B1.Actuator.c_stop needs Bridge.UI.Barrier1.Stop or Bridge.EmergencyStop.Activated;
      end
      group Barrier2UI:
        requirement invariant .Bridge.Barriers.B2.Actuator.c_open needs Bridge.UI.Barrier27.Open and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B2.Actuator.c_close needs Bridge.UI.Barrier27.Close and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B2.Actuator.c_stop needs Bridge.UI.Barrier27.Stop or Bridge.EmergencyStop.Activated;
      end
      group Barrier3UI:
        requirement invariant .Bridge.Barriers.B3.Actuator.c_open needs Bridge.UI.Barrier36.Open and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B3.Actuator.c_close needs Bridge.UI.Barrier36.Close and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B3.Actuator.c_stop needs Bridge.UI.Barrier36.Stop or Bridge.EmergencyStop.Activated;
      end
      group Barrier4UI:
        requirement invariant .Bridge.Barriers.B4.Actuator.c_open needs Bridge.UI.Barrier48.Open and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B4.Actuator.c_close needs Bridge.UI.Barrier48.Close and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B4.Actuator.c_stop needs Bridge.UI.Barrier48.Stop or Bridge.EmergencyStop.Activated;
      end
      group Barrier5UI:
        requirement invariant .Bridge.Barriers.B5.Actuator.c_open needs Bridge.UI.Barrier5.Open and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B5.Actuator.c_close needs Bridge.UI.Barrier5.Close and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B5.Actuator.c_stop needs Bridge.UI.Barrier5.Stop or Bridge.EmergencyStop.Activated;
      end
      group Barrier6UI:
        requirement invariant .Bridge.Barriers.B6.Actuator.c_open needs Bridge.UI.Barrier36.Open and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B6.Actuator.c_close needs Bridge.UI.Barrier36.Close and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B6.Actuator.c_stop needs Bridge.UI.Barrier36.Stop or Bridge.EmergencyStop.Activated;
      end
      group Barrier7UI:
        requirement invariant .Bridge.Barriers.B7.Actuator.c_open needs Bridge.UI.Barrier27.Open and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B7.Actuator.c_close needs Bridge.UI.Barrier27.Close and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B7.Actuator.c_stop needs Bridge.UI.Barrier27.Stop or Bridge.EmergencyStop.Activated;
      end
      group Barrier8UI:
        requirement invariant .Bridge.Barriers.B8.Actuator.c_open needs Bridge.UI.Barrier48.Open and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B8.Actuator.c_close needs Bridge.UI.Barrier48.Close and Bridge.EmergencyStop.Deactivated;
        requirement invariant .Bridge.Barriers.B8.Actuator.c_stop needs Bridge.UI.Barrier48.Stop or Bridge.EmergencyStop.Activated;
      end
    end
    group Deck_FReq:
      requirement invariant .Bridge.Deck.Actuator.c_open needs Bridge.UI.Deck.Open and Bridge.EmergencyStop.Deactivated;
      requirement invariant .Bridge.Deck.Actuator.c_close needs Bridge.UI.Deck.Close and Bridge.EmergencyStop.Deactivated;
      requirement invariant .Bridge.Deck.Actuator.c_stop needs Bridge.UI.Deck.Stop or Bridge.EmergencyStop.Activated;
    end
  end
  group Lock:
    group UI:
      plant automaton UpstreamEbGate:
        monitor;
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.UpstreamEbGate.u_close goto Close;
          edge .Lock.UI.UpstreamEbGate.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.UpstreamEbGate.u_open goto Open;
          edge .Lock.UI.UpstreamEbGate.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.UpstreamEbGate.u_close goto Close;
          edge .Lock.UI.UpstreamEbGate.u_open goto Open;
      end
      plant automaton UpstreamFloodGate:
        monitor;
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.UpstreamFloodGate.u_close goto Close;
          edge .Lock.UI.UpstreamFloodGate.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.UpstreamFloodGate.u_open goto Open;
          edge .Lock.UI.UpstreamFloodGate.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.UpstreamFloodGate.u_close goto Close;
          edge .Lock.UI.UpstreamFloodGate.u_open goto Open;
      end
      plant automaton DownstreamEbGate:
        monitor;
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.DownstreamEbGate.u_close goto Close;
          edge .Lock.UI.DownstreamEbGate.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.DownstreamEbGate.u_open goto Open;
          edge .Lock.UI.DownstreamEbGate.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.DownstreamEbGate.u_close goto Close;
          edge .Lock.UI.DownstreamEbGate.u_open goto Open;
      end
      plant automaton DownstreamFloodGate:
        monitor;
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.DownstreamFloodGate.u_close goto Close;
          edge .Lock.UI.DownstreamFloodGate.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.DownstreamFloodGate.u_open goto Open;
          edge .Lock.UI.DownstreamFloodGate.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.DownstreamFloodGate.u_close goto Close;
          edge .Lock.UI.DownstreamFloodGate.u_open goto Open;
      end
      plant automaton DownstreamStormFloodGate:
        monitor;
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.DownstreamStormFloodGate.u_close goto Close;
          edge .Lock.UI.DownstreamStormFloodGate.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.DownstreamStormFloodGate.u_open goto Open;
          edge .Lock.UI.DownstreamStormFloodGate.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.DownstreamStormFloodGate.u_close goto Close;
          edge .Lock.UI.DownstreamStormFloodGate.u_open goto Open;
      end
      plant automaton UpstreamEbPaddle:
        monitor;
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.UpstreamEbPaddle.u_close goto Close;
          edge .Lock.UI.UpstreamEbPaddle.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.UpstreamEbPaddle.u_open goto Open;
          edge .Lock.UI.UpstreamEbPaddle.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.UpstreamEbPaddle.u_close goto Close;
          edge .Lock.UI.UpstreamEbPaddle.u_open goto Open;
      end
      plant automaton UpstreamFloodPaddle:
        monitor;
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.UpstreamFloodPaddle.u_close goto Close;
          edge .Lock.UI.UpstreamFloodPaddle.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.UpstreamFloodPaddle.u_open goto Open;
          edge .Lock.UI.UpstreamFloodPaddle.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.UpstreamFloodPaddle.u_close goto Close;
          edge .Lock.UI.UpstreamFloodPaddle.u_open goto Open;
      end
      plant automaton DownstreamEbPaddle:
        monitor;
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.DownstreamEbPaddle.u_close goto Close;
          edge .Lock.UI.DownstreamEbPaddle.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.DownstreamEbPaddle.u_open goto Open;
          edge .Lock.UI.DownstreamEbPaddle.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.DownstreamEbPaddle.u_close goto Close;
          edge .Lock.UI.DownstreamEbPaddle.u_open goto Open;
      end
      plant automaton DownstreamFloodPaddle:
        monitor;
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.DownstreamFloodPaddle.u_close goto Close;
          edge .Lock.UI.DownstreamFloodPaddle.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.DownstreamFloodPaddle.u_open goto Open;
          edge .Lock.UI.DownstreamFloodPaddle.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.DownstreamFloodPaddle.u_close goto Close;
          edge .Lock.UI.DownstreamFloodPaddle.u_open goto Open;
      end
      plant automaton DownstreamStormFloodPaddle:
        monitor;
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Lock.UI.DownstreamStormFloodPaddle.u_close goto Close;
          edge .Lock.UI.DownstreamStormFloodPaddle.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Lock.UI.DownstreamStormFloodPaddle.u_open goto Open;
          edge .Lock.UI.DownstreamStormFloodPaddle.u_stop goto Stop;
        location Stop:
          edge .Lock.UI.DownstreamStormFloodPaddle.u_close goto Close;
          edge .Lock.UI.DownstreamStormFloodPaddle.u_open goto Open;
      end
      plant automaton DownstreamVTLIncoming:
        monitor;
        location RedRed:
          initial;
          marked;
          edge .Lock.UI.DownstreamVTLIncoming.u_r goto Red;
        location Red:
          marked;
          edge .Lock.UI.DownstreamVTLIncoming.u_rr goto RedRed;
          edge .Lock.UI.DownstreamVTLIncoming.u_rg goto RedGreen;
        location RedGreen:
          edge .Lock.UI.DownstreamVTLIncoming.u_r goto Red;
          edge .Lock.UI.DownstreamVTLIncoming.u_g goto Green;
        location Green:
          edge .Lock.UI.DownstreamVTLIncoming.u_r goto Red;
      end
      plant automaton UpstreamVTLIncoming:
        monitor;
        location RedRed:
          initial;
          marked;
          edge .Lock.UI.UpstreamVTLIncoming.u_r goto Red;
        location Red:
          marked;
          edge .Lock.UI.UpstreamVTLIncoming.u_rr goto RedRed;
          edge .Lock.UI.UpstreamVTLIncoming.u_rg goto RedGreen;
        location RedGreen:
          edge .Lock.UI.UpstreamVTLIncoming.u_r goto Red;
          edge .Lock.UI.UpstreamVTLIncoming.u_g goto Green;
        location Green:
          edge .Lock.UI.UpstreamVTLIncoming.u_r goto Red;
      end
      plant automaton UpstreamVTLBridge:
        monitor;
        location Red:
          initial;
          marked;
          edge .Lock.UI.UpstreamVTLBridge.u_rg goto RedGreen;
        location RedGreen:
          edge .Lock.UI.UpstreamVTLBridge.u_g goto Green;
          edge .Lock.UI.UpstreamVTLBridge.u_r goto Red;
        location Green:
          edge .Lock.UI.UpstreamVTLBridge.u_r goto Red;
      end
    end
    group VTL:
      alg bool DownstreamRedOrRedRed = IncomingDE.Red and IncomingDW.Red or IncomingDE.RedRed and IncomingDW.RedRed;
      alg bool UpstreamRedOrRedRed = IncomingUE.Red and IncomingUW.Red or IncomingUE.RedRed and IncomingUW.RedRed;
      alg bool BridgeRed = BridgeUE.Red and BridgeUW.Red;
      group IncomingDE:
        alg bool RedRed = Actuator.RedRed and SensorR1.On and SensorG.Off and SensorR2.On;
        alg bool Red = Actuator.Red and SensorR1.On and SensorG.Off and SensorR2.Off;
        alg bool RedGreen = Actuator.RedGreen and SensorR1.On and SensorG.On and SensorR2.Off;
        alg bool Green = Actuator.Green and SensorR1.Off and SensorG.On and SensorR2.Off;
        plant automaton Actuator:
          location RedRed:
            initial;
            marked;
            edge .Lock.VTL.IncomingDE.Actuator.c_r goto Red;
          location Red:
            marked;
            edge .Lock.VTL.IncomingDE.Actuator.c_rr goto RedRed;
            edge .Lock.VTL.IncomingDE.Actuator.c_rg goto RedGreen;
          location RedGreen:
            edge .Lock.VTL.IncomingDE.Actuator.c_r goto Red;
            edge .Lock.VTL.IncomingDE.Actuator.c_g goto Green;
          location Green:
            edge .Lock.VTL.IncomingDE.Actuator.c_r goto Red;
        end
        plant automaton SensorR1:
          alg bool InitialLocationOn = true;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.VTL.IncomingDE.SensorR1.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.VTL.IncomingDE.SensorR1.u_off goto Off;
        end
        plant automaton SensorG:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.VTL.IncomingDE.SensorG.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.VTL.IncomingDE.SensorG.u_off goto Off;
        end
        plant automaton SensorR2:
          alg bool InitialLocationOn = true;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.VTL.IncomingDE.SensorR2.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.VTL.IncomingDE.SensorR2.u_off goto Off;
        end
        plant automaton DynamicsR1:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge .Lock.VTL.IncomingDE.SensorR1.u_on when On;
            edge .Lock.VTL.IncomingDE.SensorR1.u_off when Off;
        end
        plant automaton DynamicsG:
          alg bool On = Actuator.Green or Actuator.RedGreen;
          alg bool Off = Actuator.Red or Actuator.RedRed;
          location:
            initial;
            marked;
            edge .Lock.VTL.IncomingDE.SensorG.u_on when On;
            edge .Lock.VTL.IncomingDE.SensorG.u_off when Off;
        end
        plant automaton DynamicsR2:
          alg bool On = Actuator.RedRed;
          alg bool Off = not Actuator.RedRed;
          location:
            initial;
            marked;
            edge .Lock.VTL.IncomingDE.SensorR2.u_on when On;
            edge .Lock.VTL.IncomingDE.SensorR2.u_off when Off;
        end
      end
      group IncomingDW:
        alg bool RedRed = Actuator.RedRed and SensorR1.On and SensorG.Off and SensorR2.On;
        alg bool Red = Actuator.Red and SensorR1.On and SensorG.Off and SensorR2.Off;
        alg bool RedGreen = Actuator.RedGreen and SensorR1.On and SensorG.On and SensorR2.Off;
        alg bool Green = Actuator.Green and SensorR1.Off and SensorG.On and SensorR2.Off;
        plant automaton Actuator:
          location RedRed:
            initial;
            marked;
            edge .Lock.VTL.IncomingDW.Actuator.c_r goto Red;
          location Red:
            marked;
            edge .Lock.VTL.IncomingDW.Actuator.c_rr goto RedRed;
            edge .Lock.VTL.IncomingDW.Actuator.c_rg goto RedGreen;
          location RedGreen:
            edge .Lock.VTL.IncomingDW.Actuator.c_r goto Red;
            edge .Lock.VTL.IncomingDW.Actuator.c_g goto Green;
          location Green:
            edge .Lock.VTL.IncomingDW.Actuator.c_r goto Red;
        end
        plant automaton SensorR1:
          alg bool InitialLocationOn = true;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.VTL.IncomingDW.SensorR1.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.VTL.IncomingDW.SensorR1.u_off goto Off;
        end
        plant automaton SensorG:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.VTL.IncomingDW.SensorG.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.VTL.IncomingDW.SensorG.u_off goto Off;
        end
        plant automaton SensorR2:
          alg bool InitialLocationOn = true;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.VTL.IncomingDW.SensorR2.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.VTL.IncomingDW.SensorR2.u_off goto Off;
        end
        plant automaton DynamicsR1:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge .Lock.VTL.IncomingDW.SensorR1.u_on when On;
            edge .Lock.VTL.IncomingDW.SensorR1.u_off when Off;
        end
        plant automaton DynamicsG:
          alg bool On = Actuator.Green or Actuator.RedGreen;
          alg bool Off = Actuator.Red or Actuator.RedRed;
          location:
            initial;
            marked;
            edge .Lock.VTL.IncomingDW.SensorG.u_on when On;
            edge .Lock.VTL.IncomingDW.SensorG.u_off when Off;
        end
        plant automaton DynamicsR2:
          alg bool On = Actuator.RedRed;
          alg bool Off = not Actuator.RedRed;
          location:
            initial;
            marked;
            edge .Lock.VTL.IncomingDW.SensorR2.u_on when On;
            edge .Lock.VTL.IncomingDW.SensorR2.u_off when Off;
        end
      end
      group IncomingUE:
        alg bool RedRed = Actuator.RedRed and SensorR1.On and SensorG.Off and SensorR2.On;
        alg bool Red = Actuator.Red and SensorR1.On and SensorG.Off and SensorR2.Off;
        alg bool RedGreen = Actuator.RedGreen and SensorR1.On and SensorG.On and SensorR2.Off;
        alg bool Green = Actuator.Green and SensorR1.Off and SensorG.On and SensorR2.Off;
        plant automaton Actuator:
          location RedRed:
            initial;
            marked;
            edge .Lock.VTL.IncomingUE.Actuator.c_r goto Red;
          location Red:
            marked;
            edge .Lock.VTL.IncomingUE.Actuator.c_rr goto RedRed;
            edge .Lock.VTL.IncomingUE.Actuator.c_rg goto RedGreen;
          location RedGreen:
            edge .Lock.VTL.IncomingUE.Actuator.c_r goto Red;
            edge .Lock.VTL.IncomingUE.Actuator.c_g goto Green;
          location Green:
            edge .Lock.VTL.IncomingUE.Actuator.c_r goto Red;
        end
        plant automaton SensorR1:
          alg bool InitialLocationOn = true;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.VTL.IncomingUE.SensorR1.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.VTL.IncomingUE.SensorR1.u_off goto Off;
        end
        plant automaton SensorG:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.VTL.IncomingUE.SensorG.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.VTL.IncomingUE.SensorG.u_off goto Off;
        end
        plant automaton SensorR2:
          alg bool InitialLocationOn = true;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.VTL.IncomingUE.SensorR2.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.VTL.IncomingUE.SensorR2.u_off goto Off;
        end
        plant automaton DynamicsR1:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge .Lock.VTL.IncomingUE.SensorR1.u_on when On;
            edge .Lock.VTL.IncomingUE.SensorR1.u_off when Off;
        end
        plant automaton DynamicsG:
          alg bool On = Actuator.Green or Actuator.RedGreen;
          alg bool Off = Actuator.Red or Actuator.RedRed;
          location:
            initial;
            marked;
            edge .Lock.VTL.IncomingUE.SensorG.u_on when On;
            edge .Lock.VTL.IncomingUE.SensorG.u_off when Off;
        end
        plant automaton DynamicsR2:
          alg bool On = Actuator.RedRed;
          alg bool Off = not Actuator.RedRed;
          location:
            initial;
            marked;
            edge .Lock.VTL.IncomingUE.SensorR2.u_on when On;
            edge .Lock.VTL.IncomingUE.SensorR2.u_off when Off;
        end
      end
      group IncomingUW:
        alg bool RedRed = Actuator.RedRed and SensorR1.On and SensorG.Off and SensorR2.On;
        alg bool Red = Actuator.Red and SensorR1.On and SensorG.Off and SensorR2.Off;
        alg bool RedGreen = Actuator.RedGreen and SensorR1.On and SensorG.On and SensorR2.Off;
        alg bool Green = Actuator.Green and SensorR1.Off and SensorG.On and SensorR2.Off;
        plant automaton Actuator:
          location RedRed:
            initial;
            marked;
            edge .Lock.VTL.IncomingUW.Actuator.c_r goto Red;
          location Red:
            marked;
            edge .Lock.VTL.IncomingUW.Actuator.c_rr goto RedRed;
            edge .Lock.VTL.IncomingUW.Actuator.c_rg goto RedGreen;
          location RedGreen:
            edge .Lock.VTL.IncomingUW.Actuator.c_r goto Red;
            edge .Lock.VTL.IncomingUW.Actuator.c_g goto Green;
          location Green:
            edge .Lock.VTL.IncomingUW.Actuator.c_r goto Red;
        end
        plant automaton SensorR1:
          alg bool InitialLocationOn = true;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.VTL.IncomingUW.SensorR1.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.VTL.IncomingUW.SensorR1.u_off goto Off;
        end
        plant automaton SensorG:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.VTL.IncomingUW.SensorG.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.VTL.IncomingUW.SensorG.u_off goto Off;
        end
        plant automaton SensorR2:
          alg bool InitialLocationOn = true;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.VTL.IncomingUW.SensorR2.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.VTL.IncomingUW.SensorR2.u_off goto Off;
        end
        plant automaton DynamicsR1:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge .Lock.VTL.IncomingUW.SensorR1.u_on when On;
            edge .Lock.VTL.IncomingUW.SensorR1.u_off when Off;
        end
        plant automaton DynamicsG:
          alg bool On = Actuator.Green or Actuator.RedGreen;
          alg bool Off = Actuator.Red or Actuator.RedRed;
          location:
            initial;
            marked;
            edge .Lock.VTL.IncomingUW.SensorG.u_on when On;
            edge .Lock.VTL.IncomingUW.SensorG.u_off when Off;
        end
        plant automaton DynamicsR2:
          alg bool On = Actuator.RedRed;
          alg bool Off = not Actuator.RedRed;
          location:
            initial;
            marked;
            edge .Lock.VTL.IncomingUW.SensorR2.u_on when On;
            edge .Lock.VTL.IncomingUW.SensorR2.u_off when Off;
        end
      end
      group BridgeUE:
        alg bool Red = Actuator.Red and SensorR.On and SensorG.Off;
        alg bool Green = Actuator.Green and SensorR.Off and SensorG.On;
        plant automaton Actuator:
          location Red:
            initial;
            marked;
            edge .Lock.VTL.BridgeUE.Actuator.c_rg goto RedGreen;
          location RedGreen:
            edge .Lock.VTL.BridgeUE.Actuator.c_r goto Red;
            edge .Lock.VTL.BridgeUE.Actuator.c_g goto Green;
          location Green:
            edge .Lock.VTL.BridgeUE.Actuator.c_r goto Red;
        end
        plant automaton SensorR:
          alg bool InitialLocationOn = true;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.VTL.BridgeUE.SensorR.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.VTL.BridgeUE.SensorR.u_off goto Off;
        end
        plant automaton SensorG:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.VTL.BridgeUE.SensorG.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.VTL.BridgeUE.SensorG.u_off goto Off;
        end
        plant automaton DynamicsR:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge .Lock.VTL.BridgeUE.SensorR.u_on when On;
            edge .Lock.VTL.BridgeUE.SensorR.u_off when Off;
        end
        plant automaton DynamicsG:
          alg bool On = not Actuator.Red;
          alg bool Off = Actuator.Red;
          location:
            initial;
            marked;
            edge .Lock.VTL.BridgeUE.SensorG.u_on when On;
            edge .Lock.VTL.BridgeUE.SensorG.u_off when Off;
        end
      end
      group BridgeUW:
        alg bool Red = Actuator.Red and SensorR.On and SensorG.Off;
        alg bool Green = Actuator.Green and SensorR.Off and SensorG.On;
        plant automaton Actuator:
          location Red:
            initial;
            marked;
            edge .Lock.VTL.BridgeUW.Actuator.c_rg goto RedGreen;
          location RedGreen:
            edge .Lock.VTL.BridgeUW.Actuator.c_r goto Red;
            edge .Lock.VTL.BridgeUW.Actuator.c_g goto Green;
          location Green:
            edge .Lock.VTL.BridgeUW.Actuator.c_r goto Red;
        end
        plant automaton SensorR:
          alg bool InitialLocationOn = true;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.VTL.BridgeUW.SensorR.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.VTL.BridgeUW.SensorR.u_off goto Off;
        end
        plant automaton SensorG:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Lock.VTL.BridgeUW.SensorG.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Lock.VTL.BridgeUW.SensorG.u_off goto Off;
        end
        plant automaton DynamicsR:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge .Lock.VTL.BridgeUW.SensorR.u_on when On;
            edge .Lock.VTL.BridgeUW.SensorR.u_off when Off;
        end
        plant automaton DynamicsG:
          alg bool On = not Actuator.Red;
          alg bool Off = Actuator.Red;
          location:
            initial;
            marked;
            edge .Lock.VTL.BridgeUW.SensorG.u_on when On;
            edge .Lock.VTL.BridgeUW.SensorG.u_off when Off;
        end
      end
    end
    plant automaton EmergencyStop:
      location Deactivated:
        initial;
        marked;
        edge .Lock.EmergencyStop.u_activate goto Activated;
      location Activated:
        edge .Lock.EmergencyStop.u_reset goto Deactivated;
    end
    group UpstreamEb:
      alg bool GatesOpen = EastGate.Open and WestGate.Open;
      alg bool GatesClosed = EastGate.Closed and WestGate.Closed;
      alg bool GatesMoving = EastGate.Moving or WestGate.Moving;
      alg bool PaddlesOpen = EastPaddle.Open and WestPaddle.Open;
      alg bool PaddlesClosed = EastPaddle.Closed and WestPaddle.Closed;
      alg bool PaddlesMoving = EastPaddle.Moving or WestPaddle.Moving;
      alg bool GatesPaddlesClosed = GatesClosed and PaddlesClosed;
      alg bool Moving = GatesMoving or PaddlesMoving;
      group EastGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.UpstreamEb.EastGate.Actuator.c_open goto Opening;
            edge .Lock.UpstreamEb.EastGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.UpstreamEb.EastGate.Actuator.c_stop, .Lock.UpstreamEb.EastGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.UpstreamEb.EastGate.Actuator.c_stop, .Lock.UpstreamEb.EastGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = true;
          alg bool InitialLocationOpen = false;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.UpstreamEb.EastGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.UpstreamEb.EastGate.Sensor.u_closed_on goto Closed;
            edge .Lock.UpstreamEb.EastGate.Sensor.u_open_on goto Open;
          location Open:
            initial InitialLocationOpen;
            marked InitialLocationOpen;
            edge .Lock.UpstreamEb.EastGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.UpstreamEb.EastGate.Sensor.u_open_on, .Lock.UpstreamEb.EastGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.UpstreamEb.EastGate.Sensor.u_closed_on, .Lock.UpstreamEb.EastGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.UpstreamEb.EastGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.UpstreamEb.EastGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.UpstreamEb.EastGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.UpstreamEb.EastGate.Actuator.c_close needs not Sensor.Closed;
      end
      group WestGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.UpstreamEb.WestGate.Actuator.c_open goto Opening;
            edge .Lock.UpstreamEb.WestGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.UpstreamEb.WestGate.Actuator.c_stop, .Lock.UpstreamEb.WestGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.UpstreamEb.WestGate.Actuator.c_stop, .Lock.UpstreamEb.WestGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = true;
          alg bool InitialLocationOpen = false;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.UpstreamEb.WestGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.UpstreamEb.WestGate.Sensor.u_closed_on goto Closed;
            edge .Lock.UpstreamEb.WestGate.Sensor.u_open_on goto Open;
          location Open:
            initial InitialLocationOpen;
            marked InitialLocationOpen;
            edge .Lock.UpstreamEb.WestGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.UpstreamEb.WestGate.Sensor.u_open_on, .Lock.UpstreamEb.WestGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.UpstreamEb.WestGate.Sensor.u_closed_on, .Lock.UpstreamEb.WestGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.UpstreamEb.WestGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.UpstreamEb.WestGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.UpstreamEb.WestGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.UpstreamEb.WestGate.Actuator.c_close needs not Sensor.Closed;
      end
      group EastPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.UpstreamEb.EastPaddle.Actuator.c_open goto Opening;
            edge .Lock.UpstreamEb.EastPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.UpstreamEb.EastPaddle.Actuator.c_stop, .Lock.UpstreamEb.EastPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.UpstreamEb.EastPaddle.Actuator.c_stop, .Lock.UpstreamEb.EastPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = true;
          alg bool InitialLocationOpen = false;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.UpstreamEb.EastPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.UpstreamEb.EastPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.UpstreamEb.EastPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial InitialLocationOpen;
            marked InitialLocationOpen;
            edge .Lock.UpstreamEb.EastPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.UpstreamEb.EastPaddle.Sensor.u_open_on, .Lock.UpstreamEb.EastPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.UpstreamEb.EastPaddle.Sensor.u_closed_on, .Lock.UpstreamEb.EastPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.UpstreamEb.EastPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.UpstreamEb.EastPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.UpstreamEb.EastPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.UpstreamEb.EastPaddle.Actuator.c_close needs not Sensor.Closed;
      end
      group WestPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.UpstreamEb.WestPaddle.Actuator.c_open goto Opening;
            edge .Lock.UpstreamEb.WestPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.UpstreamEb.WestPaddle.Actuator.c_stop, .Lock.UpstreamEb.WestPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.UpstreamEb.WestPaddle.Actuator.c_stop, .Lock.UpstreamEb.WestPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = true;
          alg bool InitialLocationOpen = false;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.UpstreamEb.WestPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.UpstreamEb.WestPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.UpstreamEb.WestPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial InitialLocationOpen;
            marked InitialLocationOpen;
            edge .Lock.UpstreamEb.WestPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.UpstreamEb.WestPaddle.Sensor.u_open_on, .Lock.UpstreamEb.WestPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.UpstreamEb.WestPaddle.Sensor.u_closed_on, .Lock.UpstreamEb.WestPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.UpstreamEb.WestPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.UpstreamEb.WestPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.UpstreamEb.WestPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.UpstreamEb.WestPaddle.Actuator.c_close needs not Sensor.Closed;
      end
    end
    group UpstreamFlood:
      alg bool GatesOpen = EastGate.Open and WestGate.Open;
      alg bool GatesClosed = EastGate.Closed and WestGate.Closed;
      alg bool GatesMoving = EastGate.Moving or WestGate.Moving;
      alg bool PaddlesOpen = EastPaddle.Open and WestPaddle.Open;
      alg bool PaddlesClosed = EastPaddle.Closed and WestPaddle.Closed;
      alg bool PaddlesMoving = EastPaddle.Moving or WestPaddle.Moving;
      alg bool GatesPaddlesClosed = GatesClosed and PaddlesClosed;
      alg bool Moving = GatesMoving or PaddlesMoving;
      group EastGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.UpstreamFlood.EastGate.Actuator.c_open goto Opening;
            edge .Lock.UpstreamFlood.EastGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.UpstreamFlood.EastGate.Actuator.c_stop, .Lock.UpstreamFlood.EastGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.UpstreamFlood.EastGate.Actuator.c_stop, .Lock.UpstreamFlood.EastGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = true;
          alg bool InitialLocationOpen = false;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.UpstreamFlood.EastGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.UpstreamFlood.EastGate.Sensor.u_closed_on goto Closed;
            edge .Lock.UpstreamFlood.EastGate.Sensor.u_open_on goto Open;
          location Open:
            initial InitialLocationOpen;
            marked InitialLocationOpen;
            edge .Lock.UpstreamFlood.EastGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.UpstreamFlood.EastGate.Sensor.u_open_on, .Lock.UpstreamFlood.EastGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.UpstreamFlood.EastGate.Sensor.u_closed_on, .Lock.UpstreamFlood.EastGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.UpstreamFlood.EastGate.Actuator.c_close needs not Sensor.Closed;
      end
      group WestGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.UpstreamFlood.WestGate.Actuator.c_open goto Opening;
            edge .Lock.UpstreamFlood.WestGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.UpstreamFlood.WestGate.Actuator.c_stop, .Lock.UpstreamFlood.WestGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.UpstreamFlood.WestGate.Actuator.c_stop, .Lock.UpstreamFlood.WestGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = true;
          alg bool InitialLocationOpen = false;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.UpstreamFlood.WestGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.UpstreamFlood.WestGate.Sensor.u_closed_on goto Closed;
            edge .Lock.UpstreamFlood.WestGate.Sensor.u_open_on goto Open;
          location Open:
            initial InitialLocationOpen;
            marked InitialLocationOpen;
            edge .Lock.UpstreamFlood.WestGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.UpstreamFlood.WestGate.Sensor.u_open_on, .Lock.UpstreamFlood.WestGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.UpstreamFlood.WestGate.Sensor.u_closed_on, .Lock.UpstreamFlood.WestGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.UpstreamFlood.WestGate.Actuator.c_close needs not Sensor.Closed;
      end
      group EastPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.UpstreamFlood.EastPaddle.Actuator.c_open goto Opening;
            edge .Lock.UpstreamFlood.EastPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.UpstreamFlood.EastPaddle.Actuator.c_stop, .Lock.UpstreamFlood.EastPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.UpstreamFlood.EastPaddle.Actuator.c_stop, .Lock.UpstreamFlood.EastPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = true;
          alg bool InitialLocationOpen = false;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.UpstreamFlood.EastPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.UpstreamFlood.EastPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.UpstreamFlood.EastPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial InitialLocationOpen;
            marked InitialLocationOpen;
            edge .Lock.UpstreamFlood.EastPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.UpstreamFlood.EastPaddle.Sensor.u_open_on, .Lock.UpstreamFlood.EastPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.UpstreamFlood.EastPaddle.Sensor.u_closed_on, .Lock.UpstreamFlood.EastPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.UpstreamFlood.EastPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.UpstreamFlood.EastPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.UpstreamFlood.EastPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.UpstreamFlood.EastPaddle.Actuator.c_close needs not Sensor.Closed;
      end
      group WestPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.UpstreamFlood.WestPaddle.Actuator.c_open goto Opening;
            edge .Lock.UpstreamFlood.WestPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.UpstreamFlood.WestPaddle.Actuator.c_stop, .Lock.UpstreamFlood.WestPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.UpstreamFlood.WestPaddle.Actuator.c_stop, .Lock.UpstreamFlood.WestPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = true;
          alg bool InitialLocationOpen = false;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.UpstreamFlood.WestPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.UpstreamFlood.WestPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.UpstreamFlood.WestPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial InitialLocationOpen;
            marked InitialLocationOpen;
            edge .Lock.UpstreamFlood.WestPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.UpstreamFlood.WestPaddle.Sensor.u_open_on, .Lock.UpstreamFlood.WestPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.UpstreamFlood.WestPaddle.Sensor.u_closed_on, .Lock.UpstreamFlood.WestPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.UpstreamFlood.WestPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.UpstreamFlood.WestPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.UpstreamFlood.WestPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.UpstreamFlood.WestPaddle.Actuator.c_close needs not Sensor.Closed;
      end
    end
    group DownstreamEb:
      alg bool GatesOpen = EastGate.Open and WestGate.Open;
      alg bool GatesClosed = EastGate.Closed and WestGate.Closed;
      alg bool GatesMoving = EastGate.Moving or WestGate.Moving;
      alg bool PaddlesOpen = EastPaddle.Open and WestPaddle.Open;
      alg bool PaddlesClosed = EastPaddle.Closed and WestPaddle.Closed;
      alg bool PaddlesMoving = EastPaddle.Moving or WestPaddle.Moving;
      alg bool GatesPaddlesClosed = GatesClosed and PaddlesClosed;
      alg bool Moving = GatesMoving or PaddlesMoving;
      group EastGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamEb.EastGate.Actuator.c_open goto Opening;
            edge .Lock.DownstreamEb.EastGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamEb.EastGate.Actuator.c_stop, .Lock.DownstreamEb.EastGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamEb.EastGate.Actuator.c_stop, .Lock.DownstreamEb.EastGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = true;
          alg bool InitialLocationOpen = false;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamEb.EastGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamEb.EastGate.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamEb.EastGate.Sensor.u_open_on goto Open;
          location Open:
            initial InitialLocationOpen;
            marked InitialLocationOpen;
            edge .Lock.DownstreamEb.EastGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamEb.EastGate.Sensor.u_open_on, .Lock.DownstreamEb.EastGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamEb.EastGate.Sensor.u_closed_on, .Lock.DownstreamEb.EastGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamEb.EastGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamEb.EastGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamEb.EastGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamEb.EastGate.Actuator.c_close needs not Sensor.Closed;
      end
      group WestGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamEb.WestGate.Actuator.c_open goto Opening;
            edge .Lock.DownstreamEb.WestGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamEb.WestGate.Actuator.c_stop, .Lock.DownstreamEb.WestGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamEb.WestGate.Actuator.c_stop, .Lock.DownstreamEb.WestGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = true;
          alg bool InitialLocationOpen = false;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamEb.WestGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamEb.WestGate.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamEb.WestGate.Sensor.u_open_on goto Open;
          location Open:
            initial InitialLocationOpen;
            marked InitialLocationOpen;
            edge .Lock.DownstreamEb.WestGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamEb.WestGate.Sensor.u_open_on, .Lock.DownstreamEb.WestGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamEb.WestGate.Sensor.u_closed_on, .Lock.DownstreamEb.WestGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamEb.WestGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamEb.WestGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamEb.WestGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamEb.WestGate.Actuator.c_close needs not Sensor.Closed;
      end
      group EastPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamEb.EastPaddle.Actuator.c_open goto Opening;
            edge .Lock.DownstreamEb.EastPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamEb.EastPaddle.Actuator.c_stop, .Lock.DownstreamEb.EastPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamEb.EastPaddle.Actuator.c_stop, .Lock.DownstreamEb.EastPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = true;
          alg bool InitialLocationOpen = false;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamEb.EastPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamEb.EastPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamEb.EastPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial InitialLocationOpen;
            marked InitialLocationOpen;
            edge .Lock.DownstreamEb.EastPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamEb.EastPaddle.Sensor.u_open_on, .Lock.DownstreamEb.EastPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamEb.EastPaddle.Sensor.u_closed_on, .Lock.DownstreamEb.EastPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamEb.EastPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamEb.EastPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamEb.EastPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamEb.EastPaddle.Actuator.c_close needs not Sensor.Closed;
      end
      group WestPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamEb.WestPaddle.Actuator.c_open goto Opening;
            edge .Lock.DownstreamEb.WestPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamEb.WestPaddle.Actuator.c_stop, .Lock.DownstreamEb.WestPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamEb.WestPaddle.Actuator.c_stop, .Lock.DownstreamEb.WestPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = true;
          alg bool InitialLocationOpen = false;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamEb.WestPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamEb.WestPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamEb.WestPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial InitialLocationOpen;
            marked InitialLocationOpen;
            edge .Lock.DownstreamEb.WestPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamEb.WestPaddle.Sensor.u_open_on, .Lock.DownstreamEb.WestPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamEb.WestPaddle.Sensor.u_closed_on, .Lock.DownstreamEb.WestPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamEb.WestPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamEb.WestPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamEb.WestPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamEb.WestPaddle.Actuator.c_close needs not Sensor.Closed;
      end
    end
    group DownstreamFlood:
      alg bool GatesOpen = EastGate.Open and WestGate.Open;
      alg bool GatesClosed = EastGate.Closed and WestGate.Closed;
      alg bool GatesMoving = EastGate.Moving or WestGate.Moving;
      alg bool PaddlesOpen = EastPaddle.Open and WestPaddle.Open;
      alg bool PaddlesClosed = EastPaddle.Closed and WestPaddle.Closed;
      alg bool PaddlesMoving = EastPaddle.Moving or WestPaddle.Moving;
      alg bool GatesPaddlesClosed = GatesClosed and PaddlesClosed;
      alg bool Moving = GatesMoving or PaddlesMoving;
      group EastGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamFlood.EastGate.Actuator.c_open goto Opening;
            edge .Lock.DownstreamFlood.EastGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamFlood.EastGate.Actuator.c_stop, .Lock.DownstreamFlood.EastGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamFlood.EastGate.Actuator.c_stop, .Lock.DownstreamFlood.EastGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = true;
          alg bool InitialLocationOpen = false;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamFlood.EastGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamFlood.EastGate.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamFlood.EastGate.Sensor.u_open_on goto Open;
          location Open:
            initial InitialLocationOpen;
            marked InitialLocationOpen;
            edge .Lock.DownstreamFlood.EastGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamFlood.EastGate.Sensor.u_open_on, .Lock.DownstreamFlood.EastGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamFlood.EastGate.Sensor.u_closed_on, .Lock.DownstreamFlood.EastGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamFlood.EastGate.Actuator.c_close needs not Sensor.Closed;
      end
      group WestGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamFlood.WestGate.Actuator.c_open goto Opening;
            edge .Lock.DownstreamFlood.WestGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamFlood.WestGate.Actuator.c_stop, .Lock.DownstreamFlood.WestGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamFlood.WestGate.Actuator.c_stop, .Lock.DownstreamFlood.WestGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = true;
          alg bool InitialLocationOpen = false;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamFlood.WestGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamFlood.WestGate.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamFlood.WestGate.Sensor.u_open_on goto Open;
          location Open:
            initial InitialLocationOpen;
            marked InitialLocationOpen;
            edge .Lock.DownstreamFlood.WestGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamFlood.WestGate.Sensor.u_open_on, .Lock.DownstreamFlood.WestGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamFlood.WestGate.Sensor.u_closed_on, .Lock.DownstreamFlood.WestGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamFlood.WestGate.Actuator.c_close needs not Sensor.Closed;
      end
      group EastPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamFlood.EastPaddle.Actuator.c_open goto Opening;
            edge .Lock.DownstreamFlood.EastPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamFlood.EastPaddle.Actuator.c_stop, .Lock.DownstreamFlood.EastPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamFlood.EastPaddle.Actuator.c_stop, .Lock.DownstreamFlood.EastPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = true;
          alg bool InitialLocationOpen = false;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamFlood.EastPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamFlood.EastPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamFlood.EastPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial InitialLocationOpen;
            marked InitialLocationOpen;
            edge .Lock.DownstreamFlood.EastPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamFlood.EastPaddle.Sensor.u_open_on, .Lock.DownstreamFlood.EastPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamFlood.EastPaddle.Sensor.u_closed_on, .Lock.DownstreamFlood.EastPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamFlood.EastPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamFlood.EastPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamFlood.EastPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamFlood.EastPaddle.Actuator.c_close needs not Sensor.Closed;
      end
      group WestPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamFlood.WestPaddle.Actuator.c_open goto Opening;
            edge .Lock.DownstreamFlood.WestPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamFlood.WestPaddle.Actuator.c_stop, .Lock.DownstreamFlood.WestPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamFlood.WestPaddle.Actuator.c_stop, .Lock.DownstreamFlood.WestPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = true;
          alg bool InitialLocationOpen = false;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamFlood.WestPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamFlood.WestPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamFlood.WestPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial InitialLocationOpen;
            marked InitialLocationOpen;
            edge .Lock.DownstreamFlood.WestPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamFlood.WestPaddle.Sensor.u_open_on, .Lock.DownstreamFlood.WestPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamFlood.WestPaddle.Sensor.u_closed_on, .Lock.DownstreamFlood.WestPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamFlood.WestPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamFlood.WestPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamFlood.WestPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamFlood.WestPaddle.Actuator.c_close needs not Sensor.Closed;
      end
    end
    group DownstreamStormFlood:
      alg bool GatesOpen = EastGate.Open and WestGate.Open;
      alg bool GatesClosed = EastGate.Closed and WestGate.Closed;
      alg bool GatesMoving = EastGate.Moving or WestGate.Moving;
      alg bool PaddlesOpen = EastPaddle.Open and WestPaddle.Open;
      alg bool PaddlesClosed = EastPaddle.Closed and WestPaddle.Closed;
      alg bool PaddlesMoving = EastPaddle.Moving or WestPaddle.Moving;
      alg bool GatesPaddlesClosed = GatesClosed and PaddlesClosed;
      alg bool Moving = GatesMoving or PaddlesMoving;
      group EastGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamStormFlood.EastGate.Actuator.c_open goto Opening;
            edge .Lock.DownstreamStormFlood.EastGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamStormFlood.EastGate.Actuator.c_stop, .Lock.DownstreamStormFlood.EastGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamStormFlood.EastGate.Actuator.c_stop, .Lock.DownstreamStormFlood.EastGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = true;
          alg bool InitialLocationOpen = false;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamStormFlood.EastGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamStormFlood.EastGate.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamStormFlood.EastGate.Sensor.u_open_on goto Open;
          location Open:
            initial InitialLocationOpen;
            marked InitialLocationOpen;
            edge .Lock.DownstreamStormFlood.EastGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamStormFlood.EastGate.Sensor.u_open_on, .Lock.DownstreamStormFlood.EastGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamStormFlood.EastGate.Sensor.u_closed_on, .Lock.DownstreamStormFlood.EastGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamStormFlood.EastGate.Actuator.c_close needs not Sensor.Closed;
      end
      group WestGate:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamStormFlood.WestGate.Actuator.c_open goto Opening;
            edge .Lock.DownstreamStormFlood.WestGate.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamStormFlood.WestGate.Actuator.c_stop, .Lock.DownstreamStormFlood.WestGate.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamStormFlood.WestGate.Actuator.c_stop, .Lock.DownstreamStormFlood.WestGate.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = true;
          alg bool InitialLocationOpen = false;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamStormFlood.WestGate.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamStormFlood.WestGate.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamStormFlood.WestGate.Sensor.u_open_on goto Open;
          location Open:
            initial InitialLocationOpen;
            marked InitialLocationOpen;
            edge .Lock.DownstreamStormFlood.WestGate.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamStormFlood.WestGate.Sensor.u_open_on, .Lock.DownstreamStormFlood.WestGate.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamStormFlood.WestGate.Sensor.u_closed_on, .Lock.DownstreamStormFlood.WestGate.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamStormFlood.WestGate.Actuator.c_close needs not Sensor.Closed;
      end
      group EastPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_open goto Opening;
            edge .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_stop, .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_stop, .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = true;
          alg bool InitialLocationOpen = false;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamStormFlood.EastPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamStormFlood.EastPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamStormFlood.EastPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial InitialLocationOpen;
            marked InitialLocationOpen;
            edge .Lock.DownstreamStormFlood.EastPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamStormFlood.EastPaddle.Sensor.u_open_on, .Lock.DownstreamStormFlood.EastPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamStormFlood.EastPaddle.Sensor.u_closed_on, .Lock.DownstreamStormFlood.EastPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_close needs not Sensor.Closed;
      end
      group WestPaddle:
        alg bool Moving = not Actuator.Rest;
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_open goto Opening;
            edge .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_close goto Closing;
          location Opening:
            edge .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_stop, .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_stop, .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = true;
          alg bool InitialLocationOpen = false;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Lock.DownstreamStormFlood.WestPaddle.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Lock.DownstreamStormFlood.WestPaddle.Sensor.u_closed_on goto Closed;
            edge .Lock.DownstreamStormFlood.WestPaddle.Sensor.u_open_on goto Open;
          location Open:
            initial InitialLocationOpen;
            marked InitialLocationOpen;
            edge .Lock.DownstreamStormFlood.WestPaddle.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Lock.DownstreamStormFlood.WestPaddle.Sensor.u_open_on, .Lock.DownstreamStormFlood.WestPaddle.Sensor.u_closed_off when Actuator.Opening;
            edge .Lock.DownstreamStormFlood.WestPaddle.Sensor.u_closed_on, .Lock.DownstreamStormFlood.WestPaddle.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_close needs not Sensor.Closed;
      end
    end
    plant automaton EqualWaterUpstream:
      alg bool InitialLocationOn = false;
      location Off:
        initial not InitialLocationOn;
        marked not InitialLocationOn;
        edge .Lock.EqualWaterUpstream.u_on goto On;
      location On:
        initial InitialLocationOn;
        marked InitialLocationOn;
        edge .Lock.EqualWaterUpstream.u_off goto Off;
    end
    plant automaton EqualWaterDownstream:
      alg bool InitialLocationOn = true;
      location Off:
        initial not InitialLocationOn;
        marked not InitialLocationOn;
        edge .Lock.EqualWaterDownstream.u_on goto On;
      location On:
        initial InitialLocationOn;
        marked InitialLocationOn;
        edge .Lock.EqualWaterDownstream.u_off goto Off;
    end
  end
  group Bridge:
    group UI:
      plant automaton LTLButton:
        monitor;
        location Deactivated:
          initial;
          marked;
          edge .Bridge.UI.LTLButton.u_activate goto Activated;
          edge .Bridge.UI.LTLButton.u_stop goto Stopped;
        location Activated:
          edge .Bridge.UI.LTLButton.u_deactivate goto Deactivated;
          edge .Bridge.UI.LTLButton.u_stop goto Stopped;
        location Stopped:
          edge .Bridge.UI.LTLButton.u_activate goto Activated;
          edge .Bridge.UI.LTLButton.u_deactivate goto Deactivated;
      end
      plant automaton Barrier1:
        monitor;
        alg bool InitialOpen = true;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Bridge.UI.Barrier1.u_close goto Close;
          edge .Bridge.UI.Barrier1.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Bridge.UI.Barrier1.u_open goto Open;
          edge .Bridge.UI.Barrier1.u_stop goto Stop;
        location Stop:
          edge .Bridge.UI.Barrier1.u_close goto Close;
          edge .Bridge.UI.Barrier1.u_open goto Open;
      end
      plant automaton Barrier27:
        monitor;
        alg bool InitialOpen = true;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Bridge.UI.Barrier27.u_close goto Close;
          edge .Bridge.UI.Barrier27.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Bridge.UI.Barrier27.u_open goto Open;
          edge .Bridge.UI.Barrier27.u_stop goto Stop;
        location Stop:
          edge .Bridge.UI.Barrier27.u_close goto Close;
          edge .Bridge.UI.Barrier27.u_open goto Open;
      end
      plant automaton Barrier36:
        monitor;
        alg bool InitialOpen = true;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Bridge.UI.Barrier36.u_close goto Close;
          edge .Bridge.UI.Barrier36.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Bridge.UI.Barrier36.u_open goto Open;
          edge .Bridge.UI.Barrier36.u_stop goto Stop;
        location Stop:
          edge .Bridge.UI.Barrier36.u_close goto Close;
          edge .Bridge.UI.Barrier36.u_open goto Open;
      end
      plant automaton Barrier48:
        monitor;
        alg bool InitialOpen = true;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Bridge.UI.Barrier48.u_close goto Close;
          edge .Bridge.UI.Barrier48.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Bridge.UI.Barrier48.u_open goto Open;
          edge .Bridge.UI.Barrier48.u_stop goto Stop;
        location Stop:
          edge .Bridge.UI.Barrier48.u_close goto Close;
          edge .Bridge.UI.Barrier48.u_open goto Open;
      end
      plant automaton Barrier5:
        monitor;
        alg bool InitialOpen = true;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Bridge.UI.Barrier5.u_close goto Close;
          edge .Bridge.UI.Barrier5.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Bridge.UI.Barrier5.u_open goto Open;
          edge .Bridge.UI.Barrier5.u_stop goto Stop;
        location Stop:
          edge .Bridge.UI.Barrier5.u_close goto Close;
          edge .Bridge.UI.Barrier5.u_open goto Open;
      end
      plant automaton Deck:
        monitor;
        alg bool InitialOpen = false;
        location Open:
          initial InitialOpen;
          marked InitialOpen;
          edge .Bridge.UI.Deck.u_close goto Close;
          edge .Bridge.UI.Deck.u_stop goto Stop;
        location Close:
          initial not InitialOpen;
          marked not InitialOpen;
          edge .Bridge.UI.Deck.u_open goto Open;
          edge .Bridge.UI.Deck.u_stop goto Stop;
        location Stop:
          edge .Bridge.UI.Deck.u_close goto Close;
          edge .Bridge.UI.Deck.u_open goto Open;
      end
    end
    group LTL:
      alg bool StopSignsEnabled = StopSign1.On and StopSign2.On and StopSign3.On and StopSign4.On and StopSign5.On and StopSign6.On and StopSign7.On and StopSign8.On and StopSign9.On and StopSign10.On and StopSign11.On and StopSign12.On and StopSignsActuator.On and SwitchLaneStopSigns.On;
      alg bool StopSignsDisabled = StopSign1.Off and StopSign2.Off and StopSign3.Off and StopSign4.Off and StopSign5.Off and StopSign6.Off and StopSign7.Off and StopSign8.Off and StopSign9.Off and StopSign10.Off and StopSign11.Off and StopSign12.Off and StopSignsActuator.Off and SwitchLaneStopSigns.Off;
      alg bool StopSignsEnabledTimeOk = StopSignsEnabledTimer.Finished and StopSignsEnabled;
      alg bool StopSignsDisabledTimeOk = StopSignsDisabledTimer.Finished and StopSignsDisabled;
      alg bool PreSignsFarEnabled = PreSign1.On and PreSign2.On and PreSignsFarActuator.On;
      alg bool PreSignsNearEnabled = PreSign3.On and PreSign4.On and PreSign5.On and PreSignsNearActuator.On;
      alg bool PreSignsEnabled = PreSignsFarEnabled and PreSignsNearEnabled;
      alg bool PreSignsNearDisabled = PreSign3.Off and PreSign4.Off and PreSign5.Off and PreSignsNearActuator.Off;
      alg bool PreSignsEnabled15TimeOk = PreSignsEnabled15Timer.Finished and PreSignsEnabled;
      alg bool PreSignsEnabled20TimeOk = PreSignsEnabled20Timer.Finished and PreSignsEnabled;
      alg bool PreSignsNearDisabledTimeOk = PreSignsNearDisabledTimer.Finished and PreSignsNearDisabled;
      plant automaton StopSignsActuator:
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          marked not InitialLocationOn;
          edge .Bridge.LTL.StopSignsActuator.c_on goto On;
        location On:
          initial InitialLocationOn;
          marked InitialLocationOn;
          edge .Bridge.LTL.StopSignsActuator.c_off goto Off;
      end
      plant automaton SwitchLaneStopSigns:
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          marked not InitialLocationOn;
          edge .Bridge.LTL.SwitchLaneStopSigns.c_on goto On;
        location On:
          initial InitialLocationOn;
          marked InitialLocationOn;
          edge .Bridge.LTL.SwitchLaneStopSigns.c_off goto Off;
      end
      group StopSign1:
        alg bool On = SwitchLaneStopSigns.On and Sensor.On;
        alg bool Off = SwitchLaneStopSigns.Off and Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTL.StopSign1.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTL.StopSign1.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = SwitchLaneStopSigns.On;
          alg bool Off = SwitchLaneStopSigns.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTL.StopSign1.Sensor.u_on when On;
            edge .Bridge.LTL.StopSign1.Sensor.u_off when Off;
        end
      end
      group StopSign2:
        alg bool On = SwitchLaneStopSigns.On and Sensor.On;
        alg bool Off = SwitchLaneStopSigns.Off and Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTL.StopSign2.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTL.StopSign2.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = SwitchLaneStopSigns.On;
          alg bool Off = SwitchLaneStopSigns.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTL.StopSign2.Sensor.u_on when On;
            edge .Bridge.LTL.StopSign2.Sensor.u_off when Off;
        end
      end
      group StopSign3:
        alg bool On = SwitchLaneStopSigns.On and Sensor.On;
        alg bool Off = SwitchLaneStopSigns.Off and Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTL.StopSign3.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTL.StopSign3.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = SwitchLaneStopSigns.On;
          alg bool Off = SwitchLaneStopSigns.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTL.StopSign3.Sensor.u_on when On;
            edge .Bridge.LTL.StopSign3.Sensor.u_off when Off;
        end
      end
      group StopSign4:
        alg bool On = SwitchLaneStopSigns.On and Sensor.On;
        alg bool Off = SwitchLaneStopSigns.Off and Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTL.StopSign4.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTL.StopSign4.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = SwitchLaneStopSigns.On;
          alg bool Off = SwitchLaneStopSigns.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTL.StopSign4.Sensor.u_on when On;
            edge .Bridge.LTL.StopSign4.Sensor.u_off when Off;
        end
      end
      group StopSign5:
        alg bool On = StopSignsActuator.On and Sensor.On;
        alg bool Off = StopSignsActuator.Off and Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTL.StopSign5.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTL.StopSign5.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = StopSignsActuator.On;
          alg bool Off = StopSignsActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTL.StopSign5.Sensor.u_on when On;
            edge .Bridge.LTL.StopSign5.Sensor.u_off when Off;
        end
      end
      group StopSign6:
        alg bool On = StopSignsActuator.On and Sensor.On;
        alg bool Off = StopSignsActuator.Off and Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTL.StopSign6.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTL.StopSign6.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = StopSignsActuator.On;
          alg bool Off = StopSignsActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTL.StopSign6.Sensor.u_on when On;
            edge .Bridge.LTL.StopSign6.Sensor.u_off when Off;
        end
      end
      group StopSign7:
        alg bool On = StopSignsActuator.On and Sensor.On;
        alg bool Off = StopSignsActuator.Off and Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTL.StopSign7.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTL.StopSign7.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = StopSignsActuator.On;
          alg bool Off = StopSignsActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTL.StopSign7.Sensor.u_on when On;
            edge .Bridge.LTL.StopSign7.Sensor.u_off when Off;
        end
      end
      group StopSign8:
        alg bool On = StopSignsActuator.On and Sensor.On;
        alg bool Off = StopSignsActuator.Off and Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTL.StopSign8.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTL.StopSign8.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = StopSignsActuator.On;
          alg bool Off = StopSignsActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTL.StopSign8.Sensor.u_on when On;
            edge .Bridge.LTL.StopSign8.Sensor.u_off when Off;
        end
      end
      group StopSign9:
        alg bool On = StopSignsActuator.On and Sensor.On;
        alg bool Off = StopSignsActuator.Off and Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTL.StopSign9.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTL.StopSign9.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = StopSignsActuator.On;
          alg bool Off = StopSignsActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTL.StopSign9.Sensor.u_on when On;
            edge .Bridge.LTL.StopSign9.Sensor.u_off when Off;
        end
      end
      group StopSign10:
        alg bool On = StopSignsActuator.On and Sensor.On;
        alg bool Off = StopSignsActuator.Off and Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTL.StopSign10.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTL.StopSign10.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = StopSignsActuator.On;
          alg bool Off = StopSignsActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTL.StopSign10.Sensor.u_on when On;
            edge .Bridge.LTL.StopSign10.Sensor.u_off when Off;
        end
      end
      group StopSign11:
        alg bool On = StopSignsActuator.On and Sensor.On;
        alg bool Off = StopSignsActuator.Off and Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTL.StopSign11.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTL.StopSign11.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = StopSignsActuator.On;
          alg bool Off = StopSignsActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTL.StopSign11.Sensor.u_on when On;
            edge .Bridge.LTL.StopSign11.Sensor.u_off when Off;
        end
      end
      group StopSign12:
        alg bool On = StopSignsActuator.On and Sensor.On;
        alg bool Off = StopSignsActuator.Off and Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTL.StopSign12.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTL.StopSign12.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = StopSignsActuator.On;
          alg bool Off = StopSignsActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTL.StopSign12.Sensor.u_on when On;
            edge .Bridge.LTL.StopSign12.Sensor.u_off when Off;
        end
      end
      plant automaton StopSignsEnabledTimer:
        alg bool EnablementGuard = StopSignsEnabled;
        alg bool DisablementGuard = not StopSignsEnabled;
        location Off:
          initial;
          marked;
          edge .Bridge.LTL.StopSignsEnabledTimer.c_on when EnablementGuard goto On;
        location On:
          edge .Bridge.LTL.StopSignsEnabledTimer.c_reset when DisablementGuard goto Off;
          edge .Bridge.LTL.StopSignsEnabledTimer.u_timeout goto Finished;
        location Finished:
          marked;
          edge .Bridge.LTL.StopSignsEnabledTimer.c_reset when DisablementGuard goto Off;
      end
      plant automaton StopSignsDisabledTimer:
        alg bool EnablementGuard = StopSignsDisabled;
        alg bool DisablementGuard = not StopSignsDisabled;
        location Off:
          initial;
          marked;
          edge .Bridge.LTL.StopSignsDisabledTimer.c_on when EnablementGuard goto On;
        location On:
          edge .Bridge.LTL.StopSignsDisabledTimer.c_reset when DisablementGuard goto Off;
          edge .Bridge.LTL.StopSignsDisabledTimer.u_timeout goto Finished;
        location Finished:
          marked;
          edge .Bridge.LTL.StopSignsDisabledTimer.c_reset when DisablementGuard goto Off;
      end
      plant automaton PreSignsFarActuator:
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          marked not InitialLocationOn;
          edge .Bridge.LTL.PreSignsFarActuator.c_on goto On;
        location On:
          initial InitialLocationOn;
          marked InitialLocationOn;
          edge .Bridge.LTL.PreSignsFarActuator.c_off goto Off;
      end
      plant automaton PreSignsNearActuator:
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          marked not InitialLocationOn;
          edge .Bridge.LTL.PreSignsNearActuator.c_on goto On;
        location On:
          initial InitialLocationOn;
          marked InitialLocationOn;
          edge .Bridge.LTL.PreSignsNearActuator.c_off goto Off;
      end
      group PreSign1:
        alg bool On = PreSignsFarActuator.On and Sensor.On;
        alg bool Off = PreSignsFarActuator.Off and Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTL.PreSign1.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTL.PreSign1.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = PreSignsFarActuator.On;
          alg bool Off = PreSignsFarActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTL.PreSign1.Sensor.u_on when On;
            edge .Bridge.LTL.PreSign1.Sensor.u_off when Off;
        end
      end
      group PreSign2:
        alg bool On = PreSignsFarActuator.On and Sensor.On;
        alg bool Off = PreSignsFarActuator.Off and Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTL.PreSign2.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTL.PreSign2.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = PreSignsFarActuator.On;
          alg bool Off = PreSignsFarActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTL.PreSign2.Sensor.u_on when On;
            edge .Bridge.LTL.PreSign2.Sensor.u_off when Off;
        end
      end
      group PreSign3:
        alg bool On = PreSignsNearActuator.On and Sensor.On;
        alg bool Off = PreSignsNearActuator.Off and Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTL.PreSign3.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTL.PreSign3.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = PreSignsNearActuator.On;
          alg bool Off = PreSignsNearActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTL.PreSign3.Sensor.u_on when On;
            edge .Bridge.LTL.PreSign3.Sensor.u_off when Off;
        end
      end
      group PreSign4:
        alg bool On = PreSignsNearActuator.On and Sensor.On;
        alg bool Off = PreSignsNearActuator.Off and Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTL.PreSign4.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTL.PreSign4.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = PreSignsNearActuator.On;
          alg bool Off = PreSignsNearActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTL.PreSign4.Sensor.u_on when On;
            edge .Bridge.LTL.PreSign4.Sensor.u_off when Off;
        end
      end
      group PreSign5:
        alg bool On = PreSignsNearActuator.On and Sensor.On;
        alg bool Off = PreSignsNearActuator.Off and Sensor.Off;
        plant automaton Sensor:
          alg bool InitialLocationOn = false;
          location Off:
            initial not InitialLocationOn;
            marked not InitialLocationOn;
            edge .Bridge.LTL.PreSign5.Sensor.u_on goto On;
          location On:
            initial InitialLocationOn;
            marked InitialLocationOn;
            edge .Bridge.LTL.PreSign5.Sensor.u_off goto Off;
        end
        plant automaton Dynamics:
          alg bool On = PreSignsNearActuator.On;
          alg bool Off = PreSignsNearActuator.Off;
          location:
            initial;
            marked;
            edge .Bridge.LTL.PreSign5.Sensor.u_on when On;
            edge .Bridge.LTL.PreSign5.Sensor.u_off when Off;
        end
      end
      plant automaton PreSignsEnabled15Timer:
        alg bool EnablementGuard = PreSignsEnabled;
        alg bool DisablementGuard = not PreSignsEnabled;
        location Off:
          initial;
          marked;
          edge .Bridge.LTL.PreSignsEnabled15Timer.c_on when EnablementGuard goto On;
        location On:
          edge .Bridge.LTL.PreSignsEnabled15Timer.c_reset when DisablementGuard goto Off;
          edge .Bridge.LTL.PreSignsEnabled15Timer.u_timeout goto Finished;
        location Finished:
          marked;
          edge .Bridge.LTL.PreSignsEnabled15Timer.c_reset when DisablementGuard goto Off;
      end
      plant automaton PreSignsEnabled20Timer:
        alg bool EnablementGuard = PreSignsEnabled;
        alg bool DisablementGuard = not PreSignsEnabled;
        location Off:
          initial;
          marked;
          edge .Bridge.LTL.PreSignsEnabled20Timer.c_on when EnablementGuard goto On;
        location On:
          edge .Bridge.LTL.PreSignsEnabled20Timer.c_reset when DisablementGuard goto Off;
          edge .Bridge.LTL.PreSignsEnabled20Timer.u_timeout goto Finished;
        location Finished:
          marked;
          edge .Bridge.LTL.PreSignsEnabled20Timer.c_reset when DisablementGuard goto Off;
      end
      plant automaton PreSignsNearDisabledTimer:
        alg bool EnablementGuard = PreSignsNearDisabled;
        alg bool DisablementGuard = not PreSignsNearDisabled;
        location Off:
          initial;
          marked;
          edge .Bridge.LTL.PreSignsNearDisabledTimer.c_on when EnablementGuard goto On;
        location On:
          edge .Bridge.LTL.PreSignsNearDisabledTimer.c_reset when DisablementGuard goto Off;
          edge .Bridge.LTL.PreSignsNearDisabledTimer.u_timeout goto Finished;
        location Finished:
          marked;
          edge .Bridge.LTL.PreSignsNearDisabledTimer.c_reset when DisablementGuard goto Off;
      end
    end
    group Barriers:
      alg bool EnteringClosed = B3.Closed and B6.Closed;
      alg bool LeavingClosed = B2.Closed and B7.Closed;
      alg bool LeavingOpen = B2.Open and B7.Open;
      alg bool LTClosed = B4.Closed and B8.Closed;
      alg bool AllClosed = B1.Closed and B2.Closed and B3.Closed and B4.Closed and B5.Closed and B6.Closed and B7.Closed and B8.Closed;
      alg bool AllOpen = B1.Open and B2.Open and B3.Open and B4.Open and B5.Open and B6.Open and B7.Open and B8.Open;
      alg bool EnteringClosedTimeOk = EnteringClosedTimer.Finished and EnteringClosed;
      alg bool LeavingOpenTimeOk = LeavingOpenTimer.Finished and LeavingOpen;
      alg bool LTSoundSignalTimerOk = LTSoundSignalTimer.Finished and LTSoundSignals.On;
      group B1:
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Bridge.Barriers.B1.Actuator.c_open goto Opening;
            edge .Bridge.Barriers.B1.Actuator.c_close goto Closing;
          location Opening:
            edge .Bridge.Barriers.B1.Actuator.c_stop, .Bridge.Barriers.B1.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Bridge.Barriers.B1.Actuator.c_stop, .Bridge.Barriers.B1.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = false;
          alg bool InitialLocationOpen = true;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Bridge.Barriers.B1.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Bridge.Barriers.B1.Sensor.u_closed_on goto Closed;
            edge .Bridge.Barriers.B1.Sensor.u_open_on goto Open;
          location Open:
            initial InitialLocationOpen;
            marked InitialLocationOpen;
            edge .Bridge.Barriers.B1.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Bridge.Barriers.B1.Sensor.u_open_on, .Bridge.Barriers.B1.Sensor.u_closed_off when Actuator.Opening;
            edge .Bridge.Barriers.B1.Sensor.u_closed_on, .Bridge.Barriers.B1.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Bridge.Barriers.B1.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Bridge.Barriers.B1.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Bridge.Barriers.B1.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Bridge.Barriers.B1.Actuator.c_close needs not Sensor.Closed;
      end
      group B2:
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Bridge.Barriers.B2.Actuator.c_open goto Opening;
            edge .Bridge.Barriers.B2.Actuator.c_close goto Closing;
          location Opening:
            edge .Bridge.Barriers.B2.Actuator.c_stop, .Bridge.Barriers.B2.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Bridge.Barriers.B2.Actuator.c_stop, .Bridge.Barriers.B2.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = false;
          alg bool InitialLocationOpen = true;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Bridge.Barriers.B2.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Bridge.Barriers.B2.Sensor.u_closed_on goto Closed;
            edge .Bridge.Barriers.B2.Sensor.u_open_on goto Open;
          location Open:
            initial InitialLocationOpen;
            marked InitialLocationOpen;
            edge .Bridge.Barriers.B2.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Bridge.Barriers.B2.Sensor.u_open_on, .Bridge.Barriers.B2.Sensor.u_closed_off when Actuator.Opening;
            edge .Bridge.Barriers.B2.Sensor.u_closed_on, .Bridge.Barriers.B2.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Bridge.Barriers.B2.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Bridge.Barriers.B2.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Bridge.Barriers.B2.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Bridge.Barriers.B2.Actuator.c_close needs not Sensor.Closed;
      end
      group B3:
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Bridge.Barriers.B3.Actuator.c_open goto Opening;
            edge .Bridge.Barriers.B3.Actuator.c_close goto Closing;
          location Opening:
            edge .Bridge.Barriers.B3.Actuator.c_stop, .Bridge.Barriers.B3.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Bridge.Barriers.B3.Actuator.c_stop, .Bridge.Barriers.B3.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = false;
          alg bool InitialLocationOpen = true;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Bridge.Barriers.B3.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Bridge.Barriers.B3.Sensor.u_closed_on goto Closed;
            edge .Bridge.Barriers.B3.Sensor.u_open_on goto Open;
          location Open:
            initial InitialLocationOpen;
            marked InitialLocationOpen;
            edge .Bridge.Barriers.B3.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Bridge.Barriers.B3.Sensor.u_open_on, .Bridge.Barriers.B3.Sensor.u_closed_off when Actuator.Opening;
            edge .Bridge.Barriers.B3.Sensor.u_closed_on, .Bridge.Barriers.B3.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Bridge.Barriers.B3.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Bridge.Barriers.B3.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Bridge.Barriers.B3.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Bridge.Barriers.B3.Actuator.c_close needs not Sensor.Closed;
      end
      group B4:
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Bridge.Barriers.B4.Actuator.c_open goto Opening;
            edge .Bridge.Barriers.B4.Actuator.c_close goto Closing;
          location Opening:
            edge .Bridge.Barriers.B4.Actuator.c_stop, .Bridge.Barriers.B4.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Bridge.Barriers.B4.Actuator.c_stop, .Bridge.Barriers.B4.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = false;
          alg bool InitialLocationOpen = true;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Bridge.Barriers.B4.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Bridge.Barriers.B4.Sensor.u_closed_on goto Closed;
            edge .Bridge.Barriers.B4.Sensor.u_open_on goto Open;
          location Open:
            initial InitialLocationOpen;
            marked InitialLocationOpen;
            edge .Bridge.Barriers.B4.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Bridge.Barriers.B4.Sensor.u_open_on, .Bridge.Barriers.B4.Sensor.u_closed_off when Actuator.Opening;
            edge .Bridge.Barriers.B4.Sensor.u_closed_on, .Bridge.Barriers.B4.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Bridge.Barriers.B4.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Bridge.Barriers.B4.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Bridge.Barriers.B4.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Bridge.Barriers.B4.Actuator.c_close needs not Sensor.Closed;
      end
      group B5:
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Bridge.Barriers.B5.Actuator.c_open goto Opening;
            edge .Bridge.Barriers.B5.Actuator.c_close goto Closing;
          location Opening:
            edge .Bridge.Barriers.B5.Actuator.c_stop, .Bridge.Barriers.B5.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Bridge.Barriers.B5.Actuator.c_stop, .Bridge.Barriers.B5.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = false;
          alg bool InitialLocationOpen = true;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Bridge.Barriers.B5.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Bridge.Barriers.B5.Sensor.u_closed_on goto Closed;
            edge .Bridge.Barriers.B5.Sensor.u_open_on goto Open;
          location Open:
            initial InitialLocationOpen;
            marked InitialLocationOpen;
            edge .Bridge.Barriers.B5.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Bridge.Barriers.B5.Sensor.u_open_on, .Bridge.Barriers.B5.Sensor.u_closed_off when Actuator.Opening;
            edge .Bridge.Barriers.B5.Sensor.u_closed_on, .Bridge.Barriers.B5.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Bridge.Barriers.B5.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Bridge.Barriers.B5.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Bridge.Barriers.B5.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Bridge.Barriers.B5.Actuator.c_close needs not Sensor.Closed;
      end
      group B6:
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Bridge.Barriers.B6.Actuator.c_open goto Opening;
            edge .Bridge.Barriers.B6.Actuator.c_close goto Closing;
          location Opening:
            edge .Bridge.Barriers.B6.Actuator.c_stop, .Bridge.Barriers.B6.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Bridge.Barriers.B6.Actuator.c_stop, .Bridge.Barriers.B6.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = false;
          alg bool InitialLocationOpen = true;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Bridge.Barriers.B6.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Bridge.Barriers.B6.Sensor.u_closed_on goto Closed;
            edge .Bridge.Barriers.B6.Sensor.u_open_on goto Open;
          location Open:
            initial InitialLocationOpen;
            marked InitialLocationOpen;
            edge .Bridge.Barriers.B6.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Bridge.Barriers.B6.Sensor.u_open_on, .Bridge.Barriers.B6.Sensor.u_closed_off when Actuator.Opening;
            edge .Bridge.Barriers.B6.Sensor.u_closed_on, .Bridge.Barriers.B6.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Bridge.Barriers.B6.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Bridge.Barriers.B6.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Bridge.Barriers.B6.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Bridge.Barriers.B6.Actuator.c_close needs not Sensor.Closed;
      end
      group B7:
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Bridge.Barriers.B7.Actuator.c_open goto Opening;
            edge .Bridge.Barriers.B7.Actuator.c_close goto Closing;
          location Opening:
            edge .Bridge.Barriers.B7.Actuator.c_stop, .Bridge.Barriers.B7.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Bridge.Barriers.B7.Actuator.c_stop, .Bridge.Barriers.B7.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = false;
          alg bool InitialLocationOpen = true;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Bridge.Barriers.B7.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Bridge.Barriers.B7.Sensor.u_closed_on goto Closed;
            edge .Bridge.Barriers.B7.Sensor.u_open_on goto Open;
          location Open:
            initial InitialLocationOpen;
            marked InitialLocationOpen;
            edge .Bridge.Barriers.B7.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Bridge.Barriers.B7.Sensor.u_open_on, .Bridge.Barriers.B7.Sensor.u_closed_off when Actuator.Opening;
            edge .Bridge.Barriers.B7.Sensor.u_closed_on, .Bridge.Barriers.B7.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Bridge.Barriers.B7.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Bridge.Barriers.B7.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Bridge.Barriers.B7.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Bridge.Barriers.B7.Actuator.c_close needs not Sensor.Closed;
      end
      group B8:
        alg bool Closed = Actuator.Rest and Sensor.Closed;
        alg bool Open = Actuator.Rest and Sensor.Open;
        plant automaton Actuator:
          location Rest:
            initial;
            marked;
            edge .Bridge.Barriers.B8.Actuator.c_open goto Opening;
            edge .Bridge.Barriers.B8.Actuator.c_close goto Closing;
          location Opening:
            edge .Bridge.Barriers.B8.Actuator.c_stop, .Bridge.Barriers.B8.Actuator.c_endStopOpening goto Rest;
          location Closing:
            edge .Bridge.Barriers.B8.Actuator.c_stop, .Bridge.Barriers.B8.Actuator.c_endStopClosing goto Rest;
        end
        plant automaton Sensor:
          alg bool InitialLocationClosed = false;
          alg bool InitialLocationOpen = true;
          location Closed:
            initial InitialLocationClosed;
            marked InitialLocationClosed;
            edge .Bridge.Barriers.B8.Sensor.u_closed_off goto Intermediate;
          location Intermediate:
            edge .Bridge.Barriers.B8.Sensor.u_closed_on goto Closed;
            edge .Bridge.Barriers.B8.Sensor.u_open_on goto Open;
          location Open:
            initial InitialLocationOpen;
            marked InitialLocationOpen;
            edge .Bridge.Barriers.B8.Sensor.u_open_off goto Intermediate;
        end
        plant automaton Dynamics:
          location:
            initial;
            marked;
            edge .Bridge.Barriers.B8.Sensor.u_open_on, .Bridge.Barriers.B8.Sensor.u_closed_off when Actuator.Opening;
            edge .Bridge.Barriers.B8.Sensor.u_closed_on, .Bridge.Barriers.B8.Sensor.u_open_off when Actuator.Closing;
        end
        requirement invariant .Bridge.Barriers.B8.Actuator.c_endStopOpening needs Sensor.Open;
        requirement invariant .Bridge.Barriers.B8.Actuator.c_endStopClosing needs Sensor.Closed;
        requirement invariant .Bridge.Barriers.B8.Actuator.c_open needs not Sensor.Open;
        requirement invariant .Bridge.Barriers.B8.Actuator.c_close needs not Sensor.Closed;
      end
      plant automaton LightSignals:
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          marked not InitialLocationOn;
          edge .Bridge.Barriers.LightSignals.c_on goto On;
        location On:
          initial InitialLocationOn;
          marked InitialLocationOn;
          edge .Bridge.Barriers.LightSignals.c_off goto Off;
      end
      plant automaton LTSoundSignals:
        alg bool InitialLocationOn = false;
        location Off:
          initial not InitialLocationOn;
          marked not InitialLocationOn;
          edge .Bridge.Barriers.LTSoundSignals.c_on goto On;
        location On:
          initial InitialLocationOn;
          marked InitialLocationOn;
          edge .Bridge.Barriers.LTSoundSignals.c_off goto Off;
      end
      plant automaton EnteringClosedTimer:
        alg bool EnablementGuard = EnteringClosed;
        alg bool DisablementGuard = not EnteringClosed;
        location Off:
          initial;
          marked;
          edge .Bridge.Barriers.EnteringClosedTimer.c_on when EnablementGuard goto On;
        location On:
          edge .Bridge.Barriers.EnteringClosedTimer.c_reset when DisablementGuard goto Off;
          edge .Bridge.Barriers.EnteringClosedTimer.u_timeout goto Finished;
        location Finished:
          marked;
          edge .Bridge.Barriers.EnteringClosedTimer.c_reset when DisablementGuard goto Off;
      end
      plant automaton LeavingOpenTimer:
        alg bool EnablementGuard = LeavingOpen;
        alg bool DisablementGuard = not LeavingOpen;
        location Off:
          initial;
          marked;
          edge .Bridge.Barriers.LeavingOpenTimer.c_on when EnablementGuard goto On;
        location On:
          edge .Bridge.Barriers.LeavingOpenTimer.c_reset when DisablementGuard goto Off;
          edge .Bridge.Barriers.LeavingOpenTimer.u_timeout goto Finished;
        location Finished:
          marked;
          edge .Bridge.Barriers.LeavingOpenTimer.c_reset when DisablementGuard goto Off;
      end
      plant automaton LTSoundSignalTimer:
        alg bool EnablementGuard = LTSoundSignals.On;
        alg bool DisablementGuard = LTSoundSignals.Off;
        location Off:
          initial;
          marked;
          edge .Bridge.Barriers.LTSoundSignalTimer.c_on when EnablementGuard goto On;
        location On:
          edge .Bridge.Barriers.LTSoundSignalTimer.c_reset when DisablementGuard goto Off;
          edge .Bridge.Barriers.LTSoundSignalTimer.u_timeout goto Finished;
        location Finished:
          marked;
          edge .Bridge.Barriers.LTSoundSignalTimer.c_reset when DisablementGuard goto Off;
      end
    end
    group Deck:
      alg bool Moving = not Actuator.Rest;
      alg bool Closed = Actuator.Rest and Sensor.Closed;
      alg bool Open = Actuator.Rest and Sensor.Open;
      plant automaton Actuator:
        location Rest:
          initial;
          marked;
          edge .Bridge.Deck.Actuator.c_open goto Opening;
          edge .Bridge.Deck.Actuator.c_close goto Closing;
        location Opening:
          edge .Bridge.Deck.Actuator.c_stop, .Bridge.Deck.Actuator.c_endStopOpening goto Rest;
        location Closing:
          edge .Bridge.Deck.Actuator.c_stop, .Bridge.Deck.Actuator.c_endStopClosing goto Rest;
      end
      plant automaton Sensor:
        alg bool InitialLocationClosed = true;
        alg bool InitialLocationOpen = false;
        location Closed:
          initial InitialLocationClosed;
          marked InitialLocationClosed;
          edge .Bridge.Deck.Sensor.u_closed_off goto Intermediate;
        location Intermediate:
          edge .Bridge.Deck.Sensor.u_closed_on goto Closed;
          edge .Bridge.Deck.Sensor.u_open_on goto Open;
        location Open:
          initial InitialLocationOpen;
          marked InitialLocationOpen;
          edge .Bridge.Deck.Sensor.u_open_off goto Intermediate;
      end
      plant automaton Dynamics:
        location:
          initial;
          marked;
          edge .Bridge.Deck.Sensor.u_open_on, .Bridge.Deck.Sensor.u_closed_off when Actuator.Opening;
          edge .Bridge.Deck.Sensor.u_closed_on, .Bridge.Deck.Sensor.u_open_off when Actuator.Closing;
      end
      requirement invariant .Bridge.Deck.Actuator.c_endStopOpening needs Sensor.Open;
      requirement invariant .Bridge.Deck.Actuator.c_endStopClosing needs Sensor.Closed;
      requirement invariant .Bridge.Deck.Actuator.c_open needs not Sensor.Open;
      requirement invariant .Bridge.Deck.Actuator.c_close needs not Sensor.Closed;
    end
    plant automaton CloseRequest:
      alg bool InitialLocationOn = false;
      location Off:
        initial not InitialLocationOn;
        marked not InitialLocationOn;
        edge .Bridge.CloseRequest.u_on goto On;
      location On:
        initial InitialLocationOn;
        marked InitialLocationOn;
        edge .Bridge.CloseRequest.u_off goto Off;
    end
    plant automaton EmergencyStop:
      location Deactivated:
        initial;
        marked;
        edge .Bridge.EmergencyStop.u_activate goto Activated;
      location Activated:
        edge .Bridge.EmergencyStop.u_reset goto Deactivated;
    end
  end
  supervisor automaton sup:
    alphabet .Lock.VTL.IncomingDE.Actuator.c_r, .Lock.VTL.IncomingDE.Actuator.c_rr, .Lock.VTL.IncomingDE.Actuator.c_rg, .Lock.VTL.IncomingDE.Actuator.c_g, .Lock.VTL.IncomingDW.Actuator.c_r, .Lock.VTL.IncomingDW.Actuator.c_rr, .Lock.VTL.IncomingDW.Actuator.c_rg, .Lock.VTL.IncomingDW.Actuator.c_g, .Lock.VTL.IncomingUE.Actuator.c_r, .Lock.VTL.IncomingUE.Actuator.c_rr, .Lock.VTL.IncomingUE.Actuator.c_rg, .Lock.VTL.IncomingUE.Actuator.c_g, .Lock.VTL.IncomingUW.Actuator.c_r, .Lock.VTL.IncomingUW.Actuator.c_rr, .Lock.VTL.IncomingUW.Actuator.c_rg, .Lock.VTL.IncomingUW.Actuator.c_g, .Lock.VTL.BridgeUE.Actuator.c_rg, .Lock.VTL.BridgeUE.Actuator.c_r, .Lock.VTL.BridgeUE.Actuator.c_g, .Lock.VTL.BridgeUW.Actuator.c_rg, .Lock.VTL.BridgeUW.Actuator.c_r, .Lock.VTL.BridgeUW.Actuator.c_g, .Lock.UpstreamEb.EastGate.Actuator.c_open, .Lock.UpstreamEb.EastGate.Actuator.c_close, .Lock.UpstreamEb.EastGate.Actuator.c_stop, .Lock.UpstreamEb.EastGate.Actuator.c_endStopOpening, .Lock.UpstreamEb.EastGate.Actuator.c_endStopClosing, .Lock.UpstreamEb.WestGate.Actuator.c_open, .Lock.UpstreamEb.WestGate.Actuator.c_close, .Lock.UpstreamEb.WestGate.Actuator.c_stop, .Lock.UpstreamEb.WestGate.Actuator.c_endStopOpening, .Lock.UpstreamEb.WestGate.Actuator.c_endStopClosing, .Lock.UpstreamEb.EastPaddle.Actuator.c_open, .Lock.UpstreamEb.EastPaddle.Actuator.c_close, .Lock.UpstreamEb.EastPaddle.Actuator.c_stop, .Lock.UpstreamEb.EastPaddle.Actuator.c_endStopOpening, .Lock.UpstreamEb.EastPaddle.Actuator.c_endStopClosing, .Lock.UpstreamEb.WestPaddle.Actuator.c_open, .Lock.UpstreamEb.WestPaddle.Actuator.c_close, .Lock.UpstreamEb.WestPaddle.Actuator.c_stop, .Lock.UpstreamEb.WestPaddle.Actuator.c_endStopOpening, .Lock.UpstreamEb.WestPaddle.Actuator.c_endStopClosing, .Lock.UpstreamFlood.EastGate.Actuator.c_open, .Lock.UpstreamFlood.EastGate.Actuator.c_close, .Lock.UpstreamFlood.EastGate.Actuator.c_stop, .Lock.UpstreamFlood.EastGate.Actuator.c_endStopOpening, .Lock.UpstreamFlood.EastGate.Actuator.c_endStopClosing, .Lock.UpstreamFlood.WestGate.Actuator.c_open, .Lock.UpstreamFlood.WestGate.Actuator.c_close, .Lock.UpstreamFlood.WestGate.Actuator.c_stop, .Lock.UpstreamFlood.WestGate.Actuator.c_endStopOpening, .Lock.UpstreamFlood.WestGate.Actuator.c_endStopClosing, .Lock.UpstreamFlood.EastPaddle.Actuator.c_open, .Lock.UpstreamFlood.EastPaddle.Actuator.c_close, .Lock.UpstreamFlood.EastPaddle.Actuator.c_stop, .Lock.UpstreamFlood.EastPaddle.Actuator.c_endStopOpening, .Lock.UpstreamFlood.EastPaddle.Actuator.c_endStopClosing, .Lock.UpstreamFlood.WestPaddle.Actuator.c_open, .Lock.UpstreamFlood.WestPaddle.Actuator.c_close, .Lock.UpstreamFlood.WestPaddle.Actuator.c_stop, .Lock.UpstreamFlood.WestPaddle.Actuator.c_endStopOpening, .Lock.UpstreamFlood.WestPaddle.Actuator.c_endStopClosing, .Lock.DownstreamEb.EastGate.Actuator.c_open, .Lock.DownstreamEb.EastGate.Actuator.c_close, .Lock.DownstreamEb.EastGate.Actuator.c_stop, .Lock.DownstreamEb.EastGate.Actuator.c_endStopOpening, .Lock.DownstreamEb.EastGate.Actuator.c_endStopClosing, .Lock.DownstreamEb.WestGate.Actuator.c_open, .Lock.DownstreamEb.WestGate.Actuator.c_close, .Lock.DownstreamEb.WestGate.Actuator.c_stop, .Lock.DownstreamEb.WestGate.Actuator.c_endStopOpening, .Lock.DownstreamEb.WestGate.Actuator.c_endStopClosing, .Lock.DownstreamEb.EastPaddle.Actuator.c_open, .Lock.DownstreamEb.EastPaddle.Actuator.c_close, .Lock.DownstreamEb.EastPaddle.Actuator.c_stop, .Lock.DownstreamEb.EastPaddle.Actuator.c_endStopOpening, .Lock.DownstreamEb.EastPaddle.Actuator.c_endStopClosing, .Lock.DownstreamEb.WestPaddle.Actuator.c_open, .Lock.DownstreamEb.WestPaddle.Actuator.c_close, .Lock.DownstreamEb.WestPaddle.Actuator.c_stop, .Lock.DownstreamEb.WestPaddle.Actuator.c_endStopOpening, .Lock.DownstreamEb.WestPaddle.Actuator.c_endStopClosing, .Lock.DownstreamFlood.EastGate.Actuator.c_open, .Lock.DownstreamFlood.EastGate.Actuator.c_close, .Lock.DownstreamFlood.EastGate.Actuator.c_stop, .Lock.DownstreamFlood.EastGate.Actuator.c_endStopOpening, .Lock.DownstreamFlood.EastGate.Actuator.c_endStopClosing, .Lock.DownstreamFlood.WestGate.Actuator.c_open, .Lock.DownstreamFlood.WestGate.Actuator.c_close, .Lock.DownstreamFlood.WestGate.Actuator.c_stop, .Lock.DownstreamFlood.WestGate.Actuator.c_endStopOpening, .Lock.DownstreamFlood.WestGate.Actuator.c_endStopClosing, .Lock.DownstreamFlood.EastPaddle.Actuator.c_open, .Lock.DownstreamFlood.EastPaddle.Actuator.c_close, .Lock.DownstreamFlood.EastPaddle.Actuator.c_stop, .Lock.DownstreamFlood.EastPaddle.Actuator.c_endStopOpening, .Lock.DownstreamFlood.EastPaddle.Actuator.c_endStopClosing, .Lock.DownstreamFlood.WestPaddle.Actuator.c_open, .Lock.DownstreamFlood.WestPaddle.Actuator.c_close, .Lock.DownstreamFlood.WestPaddle.Actuator.c_stop, .Lock.DownstreamFlood.WestPaddle.Actuator.c_endStopOpening, .Lock.DownstreamFlood.WestPaddle.Actuator.c_endStopClosing, .Lock.DownstreamStormFlood.EastGate.Actuator.c_open, .Lock.DownstreamStormFlood.EastGate.Actuator.c_close, .Lock.DownstreamStormFlood.EastGate.Actuator.c_stop, .Lock.DownstreamStormFlood.EastGate.Actuator.c_endStopOpening, .Lock.DownstreamStormFlood.EastGate.Actuator.c_endStopClosing, .Lock.DownstreamStormFlood.WestGate.Actuator.c_open, .Lock.DownstreamStormFlood.WestGate.Actuator.c_close, .Lock.DownstreamStormFlood.WestGate.Actuator.c_stop, .Lock.DownstreamStormFlood.WestGate.Actuator.c_endStopOpening, .Lock.DownstreamStormFlood.WestGate.Actuator.c_endStopClosing, .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_open, .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_close, .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_stop, .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_endStopOpening, .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_endStopClosing, .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_open, .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_close, .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_stop, .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_endStopOpening, .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_endStopClosing, .Bridge.LTL.StopSignsActuator.c_on, .Bridge.LTL.StopSignsActuator.c_off, .Bridge.LTL.SwitchLaneStopSigns.c_on, .Bridge.LTL.SwitchLaneStopSigns.c_off, .Bridge.LTL.StopSignsEnabledTimer.c_on, .Bridge.LTL.StopSignsEnabledTimer.c_reset, .Bridge.LTL.StopSignsDisabledTimer.c_on, .Bridge.LTL.StopSignsDisabledTimer.c_reset, .Bridge.LTL.PreSignsFarActuator.c_on, .Bridge.LTL.PreSignsFarActuator.c_off, .Bridge.LTL.PreSignsNearActuator.c_on, .Bridge.LTL.PreSignsNearActuator.c_off, .Bridge.LTL.PreSignsEnabled15Timer.c_on, .Bridge.LTL.PreSignsEnabled15Timer.c_reset, .Bridge.LTL.PreSignsEnabled20Timer.c_on, .Bridge.LTL.PreSignsEnabled20Timer.c_reset, .Bridge.LTL.PreSignsNearDisabledTimer.c_on, .Bridge.LTL.PreSignsNearDisabledTimer.c_reset, .Bridge.Barriers.B1.Actuator.c_open, .Bridge.Barriers.B1.Actuator.c_close, .Bridge.Barriers.B1.Actuator.c_stop, .Bridge.Barriers.B1.Actuator.c_endStopOpening, .Bridge.Barriers.B1.Actuator.c_endStopClosing, .Bridge.Barriers.B2.Actuator.c_open, .Bridge.Barriers.B2.Actuator.c_close, .Bridge.Barriers.B2.Actuator.c_stop, .Bridge.Barriers.B2.Actuator.c_endStopOpening, .Bridge.Barriers.B2.Actuator.c_endStopClosing, .Bridge.Barriers.B3.Actuator.c_open, .Bridge.Barriers.B3.Actuator.c_close, .Bridge.Barriers.B3.Actuator.c_stop, .Bridge.Barriers.B3.Actuator.c_endStopOpening, .Bridge.Barriers.B3.Actuator.c_endStopClosing, .Bridge.Barriers.B4.Actuator.c_open, .Bridge.Barriers.B4.Actuator.c_close, .Bridge.Barriers.B4.Actuator.c_stop, .Bridge.Barriers.B4.Actuator.c_endStopOpening, .Bridge.Barriers.B4.Actuator.c_endStopClosing, .Bridge.Barriers.B5.Actuator.c_open, .Bridge.Barriers.B5.Actuator.c_close, .Bridge.Barriers.B5.Actuator.c_stop, .Bridge.Barriers.B5.Actuator.c_endStopOpening, .Bridge.Barriers.B5.Actuator.c_endStopClosing, .Bridge.Barriers.B6.Actuator.c_open, .Bridge.Barriers.B6.Actuator.c_close, .Bridge.Barriers.B6.Actuator.c_stop, .Bridge.Barriers.B6.Actuator.c_endStopOpening, .Bridge.Barriers.B6.Actuator.c_endStopClosing, .Bridge.Barriers.B7.Actuator.c_open, .Bridge.Barriers.B7.Actuator.c_close, .Bridge.Barriers.B7.Actuator.c_stop, .Bridge.Barriers.B7.Actuator.c_endStopOpening, .Bridge.Barriers.B7.Actuator.c_endStopClosing, .Bridge.Barriers.B8.Actuator.c_open, .Bridge.Barriers.B8.Actuator.c_close, .Bridge.Barriers.B8.Actuator.c_stop, .Bridge.Barriers.B8.Actuator.c_endStopOpening, .Bridge.Barriers.B8.Actuator.c_endStopClosing, .Bridge.Barriers.LightSignals.c_on, .Bridge.Barriers.LightSignals.c_off, .Bridge.Barriers.LTSoundSignals.c_on, .Bridge.Barriers.LTSoundSignals.c_off, .Bridge.Barriers.EnteringClosedTimer.c_on, .Bridge.Barriers.EnteringClosedTimer.c_reset, .Bridge.Barriers.LeavingOpenTimer.c_on, .Bridge.Barriers.LeavingOpenTimer.c_reset, .Bridge.Barriers.LTSoundSignalTimer.c_on, .Bridge.Barriers.LTSoundSignalTimer.c_reset, .Bridge.Deck.Actuator.c_open, .Bridge.Deck.Actuator.c_close, .Bridge.Deck.Actuator.c_stop, .Bridge.Deck.Actuator.c_endStopOpening, .Bridge.Deck.Actuator.c_endStopClosing;
    location:
      initial;
      marked;
      edge .Bridge.Barriers.B1.Actuator.c_close when true;
      edge .Bridge.Barriers.B1.Actuator.c_endStopClosing when true;
      edge .Bridge.Barriers.B1.Actuator.c_endStopOpening when true;
      edge .Bridge.Barriers.B1.Actuator.c_open when true;
      edge .Bridge.Barriers.B1.Actuator.c_stop when true;
      edge .Bridge.Barriers.B2.Actuator.c_close when true;
      edge .Bridge.Barriers.B2.Actuator.c_endStopClosing when true;
      edge .Bridge.Barriers.B2.Actuator.c_endStopOpening when true;
      edge .Bridge.Barriers.B2.Actuator.c_open when true;
      edge .Bridge.Barriers.B2.Actuator.c_stop when true;
      edge .Bridge.Barriers.B3.Actuator.c_close when true;
      edge .Bridge.Barriers.B3.Actuator.c_endStopClosing when true;
      edge .Bridge.Barriers.B3.Actuator.c_endStopOpening when true;
      edge .Bridge.Barriers.B3.Actuator.c_open when true;
      edge .Bridge.Barriers.B3.Actuator.c_stop when true;
      edge .Bridge.Barriers.B4.Actuator.c_close when true;
      edge .Bridge.Barriers.B4.Actuator.c_endStopClosing when true;
      edge .Bridge.Barriers.B4.Actuator.c_endStopOpening when true;
      edge .Bridge.Barriers.B4.Actuator.c_open when true;
      edge .Bridge.Barriers.B4.Actuator.c_stop when true;
      edge .Bridge.Barriers.B5.Actuator.c_close when true;
      edge .Bridge.Barriers.B5.Actuator.c_endStopClosing when true;
      edge .Bridge.Barriers.B5.Actuator.c_endStopOpening when true;
      edge .Bridge.Barriers.B5.Actuator.c_open when true;
      edge .Bridge.Barriers.B5.Actuator.c_stop when true;
      edge .Bridge.Barriers.B6.Actuator.c_close when true;
      edge .Bridge.Barriers.B6.Actuator.c_endStopClosing when true;
      edge .Bridge.Barriers.B6.Actuator.c_endStopOpening when true;
      edge .Bridge.Barriers.B6.Actuator.c_open when true;
      edge .Bridge.Barriers.B6.Actuator.c_stop when true;
      edge .Bridge.Barriers.B7.Actuator.c_close when true;
      edge .Bridge.Barriers.B7.Actuator.c_endStopClosing when true;
      edge .Bridge.Barriers.B7.Actuator.c_endStopOpening when true;
      edge .Bridge.Barriers.B7.Actuator.c_open when true;
      edge .Bridge.Barriers.B7.Actuator.c_stop when true;
      edge .Bridge.Barriers.B8.Actuator.c_close when true;
      edge .Bridge.Barriers.B8.Actuator.c_endStopClosing when true;
      edge .Bridge.Barriers.B8.Actuator.c_endStopOpening when true;
      edge .Bridge.Barriers.B8.Actuator.c_open when true;
      edge .Bridge.Barriers.B8.Actuator.c_stop when true;
      edge .Bridge.Barriers.EnteringClosedTimer.c_on when true;
      edge .Bridge.Barriers.EnteringClosedTimer.c_reset when true;
      edge .Bridge.Barriers.LeavingOpenTimer.c_on when true;
      edge .Bridge.Barriers.LeavingOpenTimer.c_reset when true;
      edge .Bridge.Barriers.LightSignals.c_off when true;
      edge .Bridge.Barriers.LightSignals.c_on when true;
      edge .Bridge.Barriers.LTSoundSignals.c_off when true;
      edge .Bridge.Barriers.LTSoundSignals.c_on when true;
      edge .Bridge.Barriers.LTSoundSignalTimer.c_on when true;
      edge .Bridge.Barriers.LTSoundSignalTimer.c_reset when true;
      edge .Bridge.Deck.Actuator.c_close when true;
      edge .Bridge.Deck.Actuator.c_endStopClosing when true;
      edge .Bridge.Deck.Actuator.c_endStopOpening when true;
      edge .Bridge.Deck.Actuator.c_open when true;
      edge .Bridge.Deck.Actuator.c_stop when true;
      edge .Bridge.LTL.PreSignsEnabled15Timer.c_on when true;
      edge .Bridge.LTL.PreSignsEnabled15Timer.c_reset when true;
      edge .Bridge.LTL.PreSignsEnabled20Timer.c_on when true;
      edge .Bridge.LTL.PreSignsEnabled20Timer.c_reset when true;
      edge .Bridge.LTL.PreSignsFarActuator.c_off when true;
      edge .Bridge.LTL.PreSignsFarActuator.c_on when true;
      edge .Bridge.LTL.PreSignsNearActuator.c_off when true;
      edge .Bridge.LTL.PreSignsNearActuator.c_on when true;
      edge .Bridge.LTL.PreSignsNearDisabledTimer.c_on when true;
      edge .Bridge.LTL.PreSignsNearDisabledTimer.c_reset when true;
      edge .Bridge.LTL.StopSignsActuator.c_off when true;
      edge .Bridge.LTL.StopSignsActuator.c_on when true;
      edge .Bridge.LTL.StopSignsDisabledTimer.c_on when true;
      edge .Bridge.LTL.StopSignsDisabledTimer.c_reset when true;
      edge .Bridge.LTL.StopSignsEnabledTimer.c_on when true;
      edge .Bridge.LTL.StopSignsEnabledTimer.c_reset when true;
      edge .Bridge.LTL.SwitchLaneStopSigns.c_off when true;
      edge .Bridge.LTL.SwitchLaneStopSigns.c_on when true;
      edge .Lock.DownstreamEb.EastGate.Actuator.c_close when true;
      edge .Lock.DownstreamEb.EastGate.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamEb.EastGate.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamEb.EastGate.Actuator.c_open when Lock.DownstreamEb.EastPaddle.Sensor.Open and Lock.DownstreamEb.EastPaddle.Actuator.Rest;
      edge .Lock.DownstreamEb.EastGate.Actuator.c_stop when true;
      edge .Lock.DownstreamEb.EastPaddle.Actuator.c_close when not Lock.DownstreamEb.EastPaddle.Sensor.Intermediate and (Lock.DownstreamEb.EastGate.Sensor.Closed and Lock.DownstreamEb.EastGate.Actuator.Rest) or Lock.DownstreamEb.EastPaddle.Sensor.Intermediate;
      edge .Lock.DownstreamEb.EastPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamEb.EastPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamEb.EastPaddle.Actuator.c_open when true;
      edge .Lock.DownstreamEb.EastPaddle.Actuator.c_stop when true;
      edge .Lock.DownstreamEb.WestGate.Actuator.c_close when true;
      edge .Lock.DownstreamEb.WestGate.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamEb.WestGate.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamEb.WestGate.Actuator.c_open when Lock.DownstreamEb.WestPaddle.Actuator.Rest and Lock.DownstreamEb.WestPaddle.Sensor.Open;
      edge .Lock.DownstreamEb.WestGate.Actuator.c_stop when true;
      edge .Lock.DownstreamEb.WestPaddle.Actuator.c_close when not Lock.DownstreamEb.WestPaddle.Sensor.Intermediate and (Lock.DownstreamEb.WestGate.Sensor.Closed and Lock.DownstreamEb.WestGate.Actuator.Rest) or Lock.DownstreamEb.WestPaddle.Sensor.Intermediate;
      edge .Lock.DownstreamEb.WestPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamEb.WestPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamEb.WestPaddle.Actuator.c_open when true;
      edge .Lock.DownstreamEb.WestPaddle.Actuator.c_stop when true;
      edge .Lock.DownstreamFlood.EastGate.Actuator.c_close when true;
      edge .Lock.DownstreamFlood.EastGate.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamFlood.EastGate.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamFlood.EastGate.Actuator.c_open when Lock.DownstreamFlood.EastPaddle.Sensor.Open and Lock.DownstreamFlood.EastPaddle.Actuator.Rest;
      edge .Lock.DownstreamFlood.EastGate.Actuator.c_stop when true;
      edge .Lock.DownstreamFlood.EastPaddle.Actuator.c_close when not Lock.DownstreamFlood.EastPaddle.Sensor.Intermediate and (Lock.DownstreamFlood.EastGate.Sensor.Closed and Lock.DownstreamFlood.EastGate.Actuator.Rest) or Lock.DownstreamFlood.EastPaddle.Sensor.Intermediate;
      edge .Lock.DownstreamFlood.EastPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamFlood.EastPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamFlood.EastPaddle.Actuator.c_open when true;
      edge .Lock.DownstreamFlood.EastPaddle.Actuator.c_stop when true;
      edge .Lock.DownstreamFlood.WestGate.Actuator.c_close when true;
      edge .Lock.DownstreamFlood.WestGate.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamFlood.WestGate.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamFlood.WestGate.Actuator.c_open when Lock.DownstreamFlood.WestPaddle.Actuator.Rest and Lock.DownstreamFlood.WestPaddle.Sensor.Open;
      edge .Lock.DownstreamFlood.WestGate.Actuator.c_stop when true;
      edge .Lock.DownstreamFlood.WestPaddle.Actuator.c_close when not Lock.DownstreamFlood.WestPaddle.Sensor.Intermediate and (Lock.DownstreamFlood.WestGate.Sensor.Closed and Lock.DownstreamFlood.WestGate.Actuator.Rest) or Lock.DownstreamFlood.WestPaddle.Sensor.Intermediate;
      edge .Lock.DownstreamFlood.WestPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamFlood.WestPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamFlood.WestPaddle.Actuator.c_open when true;
      edge .Lock.DownstreamFlood.WestPaddle.Actuator.c_stop when true;
      edge .Lock.DownstreamStormFlood.EastGate.Actuator.c_close when true;
      edge .Lock.DownstreamStormFlood.EastGate.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamStormFlood.EastGate.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamStormFlood.EastGate.Actuator.c_open when Lock.DownstreamStormFlood.EastPaddle.Sensor.Open and Lock.DownstreamStormFlood.EastPaddle.Actuator.Rest;
      edge .Lock.DownstreamStormFlood.EastGate.Actuator.c_stop when true;
      edge .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_close when Lock.DownstreamStormFlood.EastGate.Actuator.Rest and Lock.DownstreamStormFlood.EastGate.Sensor.Closed;
      edge .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_open when true;
      edge .Lock.DownstreamStormFlood.EastPaddle.Actuator.c_stop when true;
      edge .Lock.DownstreamStormFlood.WestGate.Actuator.c_close when true;
      edge .Lock.DownstreamStormFlood.WestGate.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamStormFlood.WestGate.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamStormFlood.WestGate.Actuator.c_open when Lock.DownstreamStormFlood.WestPaddle.Sensor.Open and Lock.DownstreamStormFlood.WestPaddle.Actuator.Rest;
      edge .Lock.DownstreamStormFlood.WestGate.Actuator.c_stop when true;
      edge .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_close when Lock.DownstreamStormFlood.WestGate.Actuator.Rest and Lock.DownstreamStormFlood.WestGate.Sensor.Closed;
      edge .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_open when true;
      edge .Lock.DownstreamStormFlood.WestPaddle.Actuator.c_stop when true;
      edge .Lock.UpstreamEb.EastGate.Actuator.c_close when true;
      edge .Lock.UpstreamEb.EastGate.Actuator.c_endStopClosing when true;
      edge .Lock.UpstreamEb.EastGate.Actuator.c_endStopOpening when true;
      edge .Lock.UpstreamEb.EastGate.Actuator.c_open when Lock.UpstreamEb.EastPaddle.Actuator.Rest and Lock.UpstreamEb.EastPaddle.Sensor.Open;
      edge .Lock.UpstreamEb.EastGate.Actuator.c_stop when true;
      edge .Lock.UpstreamEb.EastPaddle.Actuator.c_close when Lock.UpstreamEb.EastGate.Sensor.Closed and Lock.UpstreamEb.EastGate.Actuator.Rest;
      edge .Lock.UpstreamEb.EastPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.UpstreamEb.EastPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.UpstreamEb.EastPaddle.Actuator.c_open when true;
      edge .Lock.UpstreamEb.EastPaddle.Actuator.c_stop when true;
      edge .Lock.UpstreamEb.WestGate.Actuator.c_close when true;
      edge .Lock.UpstreamEb.WestGate.Actuator.c_endStopClosing when true;
      edge .Lock.UpstreamEb.WestGate.Actuator.c_endStopOpening when true;
      edge .Lock.UpstreamEb.WestGate.Actuator.c_open when Lock.UpstreamEb.WestPaddle.Actuator.Rest and Lock.UpstreamEb.WestPaddle.Sensor.Open;
      edge .Lock.UpstreamEb.WestGate.Actuator.c_stop when true;
      edge .Lock.UpstreamEb.WestPaddle.Actuator.c_close when Lock.UpstreamEb.WestGate.Actuator.Rest and Lock.UpstreamEb.WestGate.Sensor.Closed;
      edge .Lock.UpstreamEb.WestPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.UpstreamEb.WestPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.UpstreamEb.WestPaddle.Actuator.c_open when true;
      edge .Lock.UpstreamEb.WestPaddle.Actuator.c_stop when true;
      edge .Lock.UpstreamFlood.EastGate.Actuator.c_close when true;
      edge .Lock.UpstreamFlood.EastGate.Actuator.c_endStopClosing when true;
      edge .Lock.UpstreamFlood.EastGate.Actuator.c_endStopOpening when true;
      edge .Lock.UpstreamFlood.EastGate.Actuator.c_open when Lock.UpstreamFlood.EastPaddle.Actuator.Rest and Lock.UpstreamFlood.EastPaddle.Sensor.Open;
      edge .Lock.UpstreamFlood.EastGate.Actuator.c_stop when true;
      edge .Lock.UpstreamFlood.EastPaddle.Actuator.c_close when Lock.UpstreamFlood.EastGate.Actuator.Rest and Lock.UpstreamFlood.EastGate.Sensor.Closed;
      edge .Lock.UpstreamFlood.EastPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.UpstreamFlood.EastPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.UpstreamFlood.EastPaddle.Actuator.c_open when true;
      edge .Lock.UpstreamFlood.EastPaddle.Actuator.c_stop when true;
      edge .Lock.UpstreamFlood.WestGate.Actuator.c_close when true;
      edge .Lock.UpstreamFlood.WestGate.Actuator.c_endStopClosing when true;
      edge .Lock.UpstreamFlood.WestGate.Actuator.c_endStopOpening when true;
      edge .Lock.UpstreamFlood.WestGate.Actuator.c_open when Lock.UpstreamFlood.WestPaddle.Sensor.Open and Lock.UpstreamFlood.WestPaddle.Actuator.Rest;
      edge .Lock.UpstreamFlood.WestGate.Actuator.c_stop when true;
      edge .Lock.UpstreamFlood.WestPaddle.Actuator.c_close when Lock.UpstreamFlood.WestGate.Actuator.Rest and Lock.UpstreamFlood.WestGate.Sensor.Closed;
      edge .Lock.UpstreamFlood.WestPaddle.Actuator.c_endStopClosing when true;
      edge .Lock.UpstreamFlood.WestPaddle.Actuator.c_endStopOpening when true;
      edge .Lock.UpstreamFlood.WestPaddle.Actuator.c_open when true;
      edge .Lock.UpstreamFlood.WestPaddle.Actuator.c_stop when true;
      edge .Lock.VTL.BridgeUE.Actuator.c_g when true;
      edge .Lock.VTL.BridgeUE.Actuator.c_r when true;
      edge .Lock.VTL.BridgeUE.Actuator.c_rg when true;
      edge .Lock.VTL.BridgeUW.Actuator.c_g when true;
      edge .Lock.VTL.BridgeUW.Actuator.c_r when true;
      edge .Lock.VTL.BridgeUW.Actuator.c_rg when true;
      edge .Lock.VTL.IncomingDE.Actuator.c_g when true;
      edge .Lock.VTL.IncomingDE.Actuator.c_r when true;
      edge .Lock.VTL.IncomingDE.Actuator.c_rg when true;
      edge .Lock.VTL.IncomingDE.Actuator.c_rr when true;
      edge .Lock.VTL.IncomingDW.Actuator.c_g when true;
      edge .Lock.VTL.IncomingDW.Actuator.c_r when true;
      edge .Lock.VTL.IncomingDW.Actuator.c_rg when true;
      edge .Lock.VTL.IncomingDW.Actuator.c_rr when true;
      edge .Lock.VTL.IncomingUE.Actuator.c_g when true;
      edge .Lock.VTL.IncomingUE.Actuator.c_r when true;
      edge .Lock.VTL.IncomingUE.Actuator.c_rg when true;
      edge .Lock.VTL.IncomingUE.Actuator.c_rr when true;
      edge .Lock.VTL.IncomingUW.Actuator.c_g when true;
      edge .Lock.VTL.IncomingUW.Actuator.c_r when true;
      edge .Lock.VTL.IncomingUW.Actuator.c_rg when true;
      edge .Lock.VTL.IncomingUW.Actuator.c_rr when true;
  end
end
group Button_223224:
  alg int n = 22;
  svgin id "Button" + <string>n event Lock.UI.UpstreamEbGate.u_close file "../Image.svg";
  svgin id "Button" + <string>(n + 1) event Lock.UI.UpstreamEbGate.u_open file "../Image.svg";
  svgin id "Button" + <string>(n + 2) event Lock.UI.UpstreamEbGate.u_stop file "../Image.svg";
  svgout id "Button" + <string>n + "V" attr "fill" value if Lock.UI.UpstreamEbGate.Close: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 1) + "V" attr "fill" value if Lock.UI.UpstreamEbGate.Open: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 2) + "V" attr "fill" value if Lock.UI.UpstreamEbGate.Stop: "yellowgreen" else "indianred" end file "../Image.svg";
end
group Button_252627:
  alg int n = 25;
  svgin id "Button" + <string>n event Lock.UI.UpstreamFloodGate.u_close file "../Image.svg";
  svgin id "Button" + <string>(n + 1) event Lock.UI.UpstreamFloodGate.u_open file "../Image.svg";
  svgin id "Button" + <string>(n + 2) event Lock.UI.UpstreamFloodGate.u_stop file "../Image.svg";
  svgout id "Button" + <string>n + "V" attr "fill" value if Lock.UI.UpstreamFloodGate.Close: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 1) + "V" attr "fill" value if Lock.UI.UpstreamFloodGate.Open: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 2) + "V" attr "fill" value if Lock.UI.UpstreamFloodGate.Stop: "yellowgreen" else "indianred" end file "../Image.svg";
end
group Button_282930:
  alg int n = 28;
  svgin id "Button" + <string>n event Lock.UI.DownstreamEbGate.u_close file "../Image.svg";
  svgin id "Button" + <string>(n + 1) event Lock.UI.DownstreamEbGate.u_open file "../Image.svg";
  svgin id "Button" + <string>(n + 2) event Lock.UI.DownstreamEbGate.u_stop file "../Image.svg";
  svgout id "Button" + <string>n + "V" attr "fill" value if Lock.UI.DownstreamEbGate.Close: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 1) + "V" attr "fill" value if Lock.UI.DownstreamEbGate.Open: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 2) + "V" attr "fill" value if Lock.UI.DownstreamEbGate.Stop: "yellowgreen" else "indianred" end file "../Image.svg";
end
group Button_313233:
  alg int n = 31;
  svgin id "Button" + <string>n event Lock.UI.DownstreamFloodGate.u_close file "../Image.svg";
  svgin id "Button" + <string>(n + 1) event Lock.UI.DownstreamFloodGate.u_open file "../Image.svg";
  svgin id "Button" + <string>(n + 2) event Lock.UI.DownstreamFloodGate.u_stop file "../Image.svg";
  svgout id "Button" + <string>n + "V" attr "fill" value if Lock.UI.DownstreamFloodGate.Close: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 1) + "V" attr "fill" value if Lock.UI.DownstreamFloodGate.Open: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 2) + "V" attr "fill" value if Lock.UI.DownstreamFloodGate.Stop: "yellowgreen" else "indianred" end file "../Image.svg";
end
group Button_343536:
  alg int n = 34;
  svgin id "Button" + <string>n event Lock.UI.DownstreamStormFloodGate.u_close file "../Image.svg";
  svgin id "Button" + <string>(n + 1) event Lock.UI.DownstreamStormFloodGate.u_open file "../Image.svg";
  svgin id "Button" + <string>(n + 2) event Lock.UI.DownstreamStormFloodGate.u_stop file "../Image.svg";
  svgout id "Button" + <string>n + "V" attr "fill" value if Lock.UI.DownstreamStormFloodGate.Close: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 1) + "V" attr "fill" value if Lock.UI.DownstreamStormFloodGate.Open: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 2) + "V" attr "fill" value if Lock.UI.DownstreamStormFloodGate.Stop: "yellowgreen" else "indianred" end file "../Image.svg";
end
group Button_373839:
  alg int n = 37;
  svgin id "Button" + <string>n event Lock.UI.UpstreamEbPaddle.u_close file "../Image.svg";
  svgin id "Button" + <string>(n + 1) event Lock.UI.UpstreamEbPaddle.u_open file "../Image.svg";
  svgin id "Button" + <string>(n + 2) event Lock.UI.UpstreamEbPaddle.u_stop file "../Image.svg";
  svgout id "Button" + <string>n + "V" attr "fill" value if Lock.UI.UpstreamEbPaddle.Close: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 1) + "V" attr "fill" value if Lock.UI.UpstreamEbPaddle.Open: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 2) + "V" attr "fill" value if Lock.UI.UpstreamEbPaddle.Stop: "yellowgreen" else "indianred" end file "../Image.svg";
end
group Button_404142:
  alg int n = 40;
  svgin id "Button" + <string>n event Lock.UI.UpstreamFloodPaddle.u_close file "../Image.svg";
  svgin id "Button" + <string>(n + 1) event Lock.UI.UpstreamFloodPaddle.u_open file "../Image.svg";
  svgin id "Button" + <string>(n + 2) event Lock.UI.UpstreamFloodPaddle.u_stop file "../Image.svg";
  svgout id "Button" + <string>n + "V" attr "fill" value if Lock.UI.UpstreamFloodPaddle.Close: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 1) + "V" attr "fill" value if Lock.UI.UpstreamFloodPaddle.Open: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 2) + "V" attr "fill" value if Lock.UI.UpstreamFloodPaddle.Stop: "yellowgreen" else "indianred" end file "../Image.svg";
end
group Button_434445:
  alg int n = 43;
  svgin id "Button" + <string>n event Lock.UI.DownstreamEbPaddle.u_close file "../Image.svg";
  svgin id "Button" + <string>(n + 1) event Lock.UI.DownstreamEbPaddle.u_open file "../Image.svg";
  svgin id "Button" + <string>(n + 2) event Lock.UI.DownstreamEbPaddle.u_stop file "../Image.svg";
  svgout id "Button" + <string>n + "V" attr "fill" value if Lock.UI.DownstreamEbPaddle.Close: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 1) + "V" attr "fill" value if Lock.UI.DownstreamEbPaddle.Open: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 2) + "V" attr "fill" value if Lock.UI.DownstreamEbPaddle.Stop: "yellowgreen" else "indianred" end file "../Image.svg";
end
group Button_464748:
  alg int n = 46;
  svgin id "Button" + <string>n event Lock.UI.DownstreamFloodPaddle.u_close file "../Image.svg";
  svgin id "Button" + <string>(n + 1) event Lock.UI.DownstreamFloodPaddle.u_open file "../Image.svg";
  svgin id "Button" + <string>(n + 2) event Lock.UI.DownstreamFloodPaddle.u_stop file "../Image.svg";
  svgout id "Button" + <string>n + "V" attr "fill" value if Lock.UI.DownstreamFloodPaddle.Close: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 1) + "V" attr "fill" value if Lock.UI.DownstreamFloodPaddle.Open: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 2) + "V" attr "fill" value if Lock.UI.DownstreamFloodPaddle.Stop: "yellowgreen" else "indianred" end file "../Image.svg";
end
group Button_495051:
  alg int n = 49;
  svgin id "Button" + <string>n event Lock.UI.DownstreamStormFloodPaddle.u_close file "../Image.svg";
  svgin id "Button" + <string>(n + 1) event Lock.UI.DownstreamStormFloodPaddle.u_open file "../Image.svg";
  svgin id "Button" + <string>(n + 2) event Lock.UI.DownstreamStormFloodPaddle.u_stop file "../Image.svg";
  svgout id "Button" + <string>n + "V" attr "fill" value if Lock.UI.DownstreamStormFloodPaddle.Close: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 1) + "V" attr "fill" value if Lock.UI.DownstreamStormFloodPaddle.Open: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 2) + "V" attr "fill" value if Lock.UI.DownstreamStormFloodPaddle.Stop: "yellowgreen" else "indianred" end file "../Image.svg";
end
group Button_52535455:
  alg int n = 52;
  svgin id "Button" + <string>n event Lock.UI.UpstreamVTLIncoming.u_r file "../Image.svg";
  svgin id "Button" + <string>(n + 1) event Lock.UI.UpstreamVTLIncoming.u_g file "../Image.svg";
  svgin id "Button" + <string>(n + 2) event Lock.UI.UpstreamVTLIncoming.u_rg file "../Image.svg";
  svgin id "Button" + <string>(n + 3) event Lock.UI.UpstreamVTLIncoming.u_rr file "../Image.svg";
  svgout id "Button" + <string>n + "V" attr "fill" value if Lock.UI.UpstreamVTLIncoming.Red: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 1) + "V" attr "fill" value if Lock.UI.UpstreamVTLIncoming.Green: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 2) + "V" attr "fill" value if Lock.UI.UpstreamVTLIncoming.RedGreen: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 3) + "V" attr "fill" value if Lock.UI.UpstreamVTLIncoming.RedRed: "yellowgreen" else "indianred" end file "../Image.svg";
end
group Button_56575859:
  alg int n = 56;
  svgin id "Button" + <string>n event Lock.UI.DownstreamVTLIncoming.u_r file "../Image.svg";
  svgin id "Button" + <string>(n + 1) event Lock.UI.DownstreamVTLIncoming.u_g file "../Image.svg";
  svgin id "Button" + <string>(n + 2) event Lock.UI.DownstreamVTLIncoming.u_rg file "../Image.svg";
  svgin id "Button" + <string>(n + 3) event Lock.UI.DownstreamVTLIncoming.u_rr file "../Image.svg";
  svgout id "Button" + <string>n + "V" attr "fill" value if Lock.UI.DownstreamVTLIncoming.Red: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 1) + "V" attr "fill" value if Lock.UI.DownstreamVTLIncoming.Green: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 2) + "V" attr "fill" value if Lock.UI.DownstreamVTLIncoming.RedGreen: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 3) + "V" attr "fill" value if Lock.UI.DownstreamVTLIncoming.RedRed: "yellowgreen" else "indianred" end file "../Image.svg";
end
group Button_202122:
  alg int n = 20;
  svgin id "Button" + <string>n event Lock.UI.UpstreamVTLBridge.u_r file "../Image.svg";
  svgin id "Button" + <string>(n + 1) event Lock.UI.UpstreamVTLBridge.u_g file "../Image.svg";
  svgin id "Button" + <string>(n + 1) + "b" event Lock.UI.UpstreamVTLBridge.u_rg file "../Image.svg";
  svgout id "Button" + <string>n + "V" attr "fill" value if Lock.UI.UpstreamVTLBridge.Red: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 1) + "V" attr "fill" value if Lock.UI.UpstreamVTLBridge.Green: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 1) + "bV" attr "fill" value if Lock.UI.UpstreamVTLBridge.RedGreen: "yellowgreen" else "indianred" end file "../Image.svg";
end
group EmergencyStopV:
  svgin id "EmergencyStopLock" event if Lock.EmergencyStop.Deactivated: Lock.EmergencyStop.u_activate else Lock.EmergencyStop.u_reset end file "../Image.svg";
  svgout id "EmergencyStopLockV" attr "fill" value if Lock.EmergencyStop.Activated: "yellowgreen" else "indianred" end file "../Image.svg";
  svgin id "EmergencyStop" event if Bridge.EmergencyStop.Deactivated: Bridge.EmergencyStop.u_activate else Bridge.EmergencyStop.u_reset end file "../Image.svg";
  svgout id "EmergencyStopV" attr "fill" value if Bridge.EmergencyStop.Activated: "yellowgreen" else "indianred" end file "../Image.svg";
end
group lockdoor_upstream_ebb_east:
  alg string GateID = "UpstreamEbEastGate";
  alg string PaddleID = "BVHeboost";
  alg bool PaddleClosed = Lock.UpstreamEb.EastPaddle.Sensor.Closed;
  alg int x = 633;
  alg int y = 413;
  alg int OpenDegree = 77;
  alg real Degree = Lock.UpstreamEb.EastGate.Degree;
  svgout id GateID attr "transform" value fmt("rotate(%s, %s, %s)", scale(Degree, 0, 90, 0.01, OpenDegree), x, y) file "../Image.svg";
  svgout id "schuif" + PaddleID attr "fill" value if PaddleClosed: "grey" else "lightblue" end file "../Image.svg";
end
group lockdoor_upstream_ebb_west:
  alg string GateID = "UpstreamEbWestGate";
  alg string PaddleID = "BVHebwest";
  alg bool PaddleClosed = Lock.UpstreamEb.WestPaddle.Sensor.Closed;
  alg int x = 560;
  alg int y = 413;
  alg int OpenDegree = -77;
  alg real Degree = Lock.UpstreamEb.WestGate.Degree;
  svgout id GateID attr "transform" value fmt("rotate(%s, %s, %s)", scale(Degree, 0, 90, 0.01, OpenDegree), x, y) file "../Image.svg";
  svgout id "schuif" + PaddleID attr "fill" value if PaddleClosed: "grey" else "lightblue" end file "../Image.svg";
end
group lockdoor_upstream_flood_east:
  alg string GateID = "UpstreamFloodEastGate";
  alg string PaddleID = "BVHvloedoost";
  alg bool PaddleClosed = Lock.UpstreamFlood.EastPaddle.Sensor.Closed;
  alg int x = 633;
  alg int y = 445;
  alg int OpenDegree = -77;
  alg real Degree = Lock.UpstreamFlood.EastGate.Degree;
  svgout id GateID attr "transform" value fmt("rotate(%s, %s, %s)", scale(Degree, 0, 90, 0.01, OpenDegree), x, y) file "../Image.svg";
  svgout id "schuif" + PaddleID attr "fill" value if PaddleClosed: "grey" else "lightblue" end file "../Image.svg";
end
group lockdoor_upstream_flood_west:
  alg string GateID = "UpstreamFloodWestGate";
  alg string PaddleID = "BVHvloedwest";
  alg bool PaddleClosed = Lock.UpstreamFlood.WestPaddle.Sensor.Closed;
  alg int x = 560;
  alg int y = 445;
  alg int OpenDegree = 77;
  alg real Degree = Lock.UpstreamFlood.WestGate.Degree;
  svgout id GateID attr "transform" value fmt("rotate(%s, %s, %s)", scale(Degree, 0, 90, 0.01, OpenDegree), x, y) file "../Image.svg";
  svgout id "schuif" + PaddleID attr "fill" value if PaddleClosed: "grey" else "lightblue" end file "../Image.svg";
end
group lockdoor_downstream_ebb_east:
  alg string GateID = "DownstreamEbEastGate";
  alg string PaddleID = "BNHeboost";
  alg bool PaddleClosed = Lock.DownstreamEb.EastPaddle.Sensor.Closed;
  alg int x = 633;
  alg int y = 811;
  alg int OpenDegree = 77;
  alg real Degree = Lock.DownstreamEb.EastGate.Degree;
  svgout id GateID attr "transform" value fmt("rotate(%s, %s, %s)", scale(Degree, 0, 90, 0.01, OpenDegree), x, y) file "../Image.svg";
  svgout id "schuif" + PaddleID attr "fill" value if PaddleClosed: "grey" else "lightblue" end file "../Image.svg";
end
group lockdoor_downstream_ebb_west:
  alg string GateID = "DownstreamEbWestGate";
  alg string PaddleID = "BNHebwest";
  alg bool PaddleClosed = Lock.DownstreamEb.WestPaddle.Sensor.Closed;
  alg int x = 560;
  alg int y = 811;
  alg int OpenDegree = -77;
  alg real Degree = Lock.DownstreamEb.WestGate.Degree;
  svgout id GateID attr "transform" value fmt("rotate(%s, %s, %s)", scale(Degree, 0, 90, 0.01, OpenDegree), x, y) file "../Image.svg";
  svgout id "schuif" + PaddleID attr "fill" value if PaddleClosed: "grey" else "lightblue" end file "../Image.svg";
end
group lockdoor_downstream_flood_east:
  alg string GateID = "DownstreamFloodEastGate";
  alg string PaddleID = "BNHvloedoost";
  alg bool PaddleClosed = Lock.DownstreamFlood.EastPaddle.Sensor.Closed;
  alg int x = 633;
  alg int y = 838;
  alg int OpenDegree = -77;
  alg real Degree = Lock.DownstreamFlood.EastGate.Degree;
  svgout id GateID attr "transform" value fmt("rotate(%s, %s, %s)", scale(Degree, 0, 90, 0.01, OpenDegree), x, y) file "../Image.svg";
  svgout id "schuif" + PaddleID attr "fill" value if PaddleClosed: "grey" else "lightblue" end file "../Image.svg";
end
group lockdoor_downstream_flood_west:
  alg string GateID = "DownstreamFloodWestGate";
  alg string PaddleID = "BNHvloedwest";
  alg bool PaddleClosed = Lock.DownstreamFlood.WestPaddle.Sensor.Closed;
  alg int x = 560;
  alg int y = 838;
  alg int OpenDegree = 77;
  alg real Degree = Lock.DownstreamFlood.WestGate.Degree;
  svgout id GateID attr "transform" value fmt("rotate(%s, %s, %s)", scale(Degree, 0, 90, 0.01, OpenDegree), x, y) file "../Image.svg";
  svgout id "schuif" + PaddleID attr "fill" value if PaddleClosed: "grey" else "lightblue" end file "../Image.svg";
end
group lockdoor_downstream_stormflood_east:
  alg string GateID = "DownstreamStormFloodEastGate";
  alg string PaddleID = "BNHstormvloedoost";
  alg bool PaddleClosed = Lock.DownstreamStormFlood.EastPaddle.Sensor.Closed;
  alg int x = 633;
  alg int y = 900;
  alg int OpenDegree = -77;
  alg real Degree = Lock.DownstreamStormFlood.EastGate.Degree;
  svgout id GateID attr "transform" value fmt("rotate(%s, %s, %s)", scale(Degree, 0, 90, 0.01, OpenDegree), x, y) file "../Image.svg";
  svgout id "schuif" + PaddleID attr "fill" value if PaddleClosed: "grey" else "lightblue" end file "../Image.svg";
end
group lockdoor_downstream_stormflood_west:
  alg string GateID = "DownstreamStormFloodWestGate";
  alg string PaddleID = "BNHstormvloedwest";
  alg bool PaddleClosed = Lock.DownstreamStormFlood.WestPaddle.Sensor.Closed;
  alg int x = 560;
  alg int y = 900;
  alg int OpenDegree = 77;
  alg real Degree = Lock.DownstreamStormFlood.WestGate.Degree;
  svgout id GateID attr "transform" value fmt("rotate(%s, %s, %s)", scale(Degree, 0, 90, 0.01, OpenDegree), x, y) file "../Image.svg";
  svgout id "schuif" + PaddleID attr "fill" value if PaddleClosed: "grey" else "lightblue" end file "../Image.svg";
end
group shippingsign_upstream_east_Rgr:
  alg string a = "seinBVHoostRgr";
  alg string color = "red";
  alg bool b = Lock.VTL.IncomingUE.SensorR1.On;
  svgout id a attr "fill" value if b: color else "grey" end file "../Image.svg";
end
group shippingsign_upstream_west_Rgr:
  alg string a = "seinBVHwestRgr";
  alg string color = "red";
  alg bool b = Lock.VTL.IncomingUW.SensorR1.On;
  svgout id a attr "fill" value if b: color else "grey" end file "../Image.svg";
end
group shippingsign_upstream_east_rGr:
  alg string a = "seinBVHoostrGr";
  alg string color = "green";
  alg bool b = Lock.VTL.IncomingUE.SensorG.On;
  svgout id a attr "fill" value if b: color else "grey" end file "../Image.svg";
end
group shippingsign_upstream_west_rGr:
  alg string a = "seinBVHwestrGr";
  alg string color = "green";
  alg bool b = Lock.VTL.IncomingUW.SensorG.On;
  svgout id a attr "fill" value if b: color else "grey" end file "../Image.svg";
end
group shippingsign_upstream_east_rgR:
  alg string a = "seinBVHoostrgR";
  alg string color = "red";
  alg bool b = Lock.VTL.IncomingUE.SensorR2.On;
  svgout id a attr "fill" value if b: color else "grey" end file "../Image.svg";
end
group shippingsign_upstream_west_rgR:
  alg string a = "seinBVHwestrgR";
  alg string color = "red";
  alg bool b = Lock.VTL.IncomingUW.SensorR2.On;
  svgout id a attr "fill" value if b: color else "grey" end file "../Image.svg";
end
group shippingsign_downstream_east_Rgr:
  alg string a = "seinBNHoostRgr";
  alg string color = "red";
  alg bool b = Lock.VTL.IncomingDE.SensorR1.On;
  svgout id a attr "fill" value if b: color else "grey" end file "../Image.svg";
end
group shippingsign_downstream_west_Rgr:
  alg string a = "seinBNHwestRgr";
  alg string color = "red";
  alg bool b = Lock.VTL.IncomingDW.SensorR1.On;
  svgout id a attr "fill" value if b: color else "grey" end file "../Image.svg";
end
group shippingsign_downstream_east_rGr:
  alg string a = "seinBNHoostrGr";
  alg string color = "green";
  alg bool b = Lock.VTL.IncomingDE.SensorG.On;
  svgout id a attr "fill" value if b: color else "grey" end file "../Image.svg";
end
group shippingsign_downstream_west_rGr:
  alg string a = "seinBNHwestrGr";
  alg string color = "green";
  alg bool b = Lock.VTL.IncomingDW.SensorG.On;
  svgout id a attr "fill" value if b: color else "grey" end file "../Image.svg";
end
group shippingsign_downstream_east_rgR:
  alg string a = "seinBNHoostrgR";
  alg string color = "red";
  alg bool b = Lock.VTL.IncomingDE.SensorR2.On;
  svgout id a attr "fill" value if b: color else "grey" end file "../Image.svg";
end
group shippingsign_downstream_west_rgR:
  alg string a = "seinBNHwestrgR";
  alg string color = "red";
  alg bool b = Lock.VTL.IncomingDW.SensorR2.On;
  svgout id a attr "fill" value if b: color else "grey" end file "../Image.svg";
end
group bridgesign_east_Rg:
  alg string a = "scheepvaartsein_BVH_east_r";
  alg string color = "red";
  alg bool b = Lock.VTL.BridgeUE.SensorR.On;
  svgout id a attr "fill" value if b: color else "grey" end file "../Image.svg";
end
group bridgesign_east_rG:
  alg string a = "scheepvaartsein_BVH_east_g";
  alg string color = "green";
  alg bool b = Lock.VTL.BridgeUE.SensorG.On;
  svgout id a attr "fill" value if b: color else "grey" end file "../Image.svg";
end
group bridgesign_west_Rg:
  alg string a = "scheepvaartsein_BVH_west_r";
  alg string color = "red";
  alg bool b = Lock.VTL.BridgeUW.SensorR.On;
  svgout id a attr "fill" value if b: color else "grey" end file "../Image.svg";
end
group bridgesign_west_rG:
  alg string a = "scheepvaartsein_BVH_west_g";
  alg string color = "green";
  alg bool b = Lock.VTL.BridgeUW.SensorG.On;
  svgout id a attr "fill" value if b: color else "grey" end file "../Image.svg";
end
group presign_C_100:
  alg string ID = "C_500";
  alg bool SensorOn = Bridge.LTL.PreSign1.Sensor.On;
  svgout id "PreSign_" + ID attr "fill" value if SensorOn: "orange" else "grey" end file "../Image.svg";
end
group presign_C_200:
  alg string ID = "K_300";
  alg bool SensorOn = Bridge.LTL.PreSign2.Sensor.On;
  svgout id "PreSign_" + ID attr "fill" value if SensorOn: "orange" else "grey" end file "../Image.svg";
end
group presign_C_500:
  alg string ID = "C_200";
  alg bool SensorOn = Bridge.LTL.PreSign3.Sensor.On;
  svgout id "PreSign_" + ID attr "fill" value if SensorOn: "orange" else "grey" end file "../Image.svg";
end
group presign_K_150:
  alg string ID = "C_100";
  alg bool SensorOn = Bridge.LTL.PreSign4.Sensor.On;
  svgout id "PreSign_" + ID attr "fill" value if SensorOn: "orange" else "grey" end file "../Image.svg";
end
group presign_K_250:
  alg string ID = "K_150";
  alg bool SensorOn = Bridge.LTL.PreSign5.Sensor.On;
  svgout id "PreSign_" + ID attr "fill" value if SensorOn: "orange" else "grey" end file "../Image.svg";
end
group stopsign1:
  alg int n = 1;
  alg bool SensorOn = Bridge.LTL.StopSign1.Sensor.On;
  svgout id "StopSign" + <string>n attr "fill" value if SensorOn: "red" else "grey" end file "../Image.svg";
end
group stopsign2:
  alg int n = 2;
  alg bool SensorOn = Bridge.LTL.StopSign2.Sensor.On;
  svgout id "StopSign" + <string>n attr "fill" value if SensorOn: "red" else "grey" end file "../Image.svg";
end
group stopsign3:
  alg int n = 3;
  alg bool SensorOn = Bridge.LTL.StopSign3.Sensor.On;
  svgout id "StopSign" + <string>n attr "fill" value if SensorOn: "red" else "grey" end file "../Image.svg";
end
group stopsign4:
  alg int n = 4;
  alg bool SensorOn = Bridge.LTL.StopSign4.Sensor.On;
  svgout id "StopSign" + <string>n attr "fill" value if SensorOn: "red" else "grey" end file "../Image.svg";
end
group stopsign5:
  alg int n = 5;
  alg bool SensorOn = Bridge.LTL.StopSign5.Sensor.On;
  svgout id "StopSign" + <string>n attr "fill" value if SensorOn: "red" else "grey" end file "../Image.svg";
end
group stopsign6:
  alg int n = 6;
  alg bool SensorOn = Bridge.LTL.StopSign6.Sensor.On;
  svgout id "StopSign" + <string>n attr "fill" value if SensorOn: "red" else "grey" end file "../Image.svg";
end
group stopsign7:
  alg int n = 7;
  alg bool SensorOn = Bridge.LTL.StopSign7.Sensor.On;
  svgout id "StopSign" + <string>n attr "fill" value if SensorOn: "red" else "grey" end file "../Image.svg";
end
group stopsign8:
  alg int n = 8;
  alg bool SensorOn = Bridge.LTL.StopSign8.Sensor.On;
  svgout id "StopSign" + <string>n attr "fill" value if SensorOn: "red" else "grey" end file "../Image.svg";
end
group stopsign9:
  alg int n = 9;
  alg bool SensorOn = Bridge.LTL.StopSign9.Sensor.On;
  svgout id "StopSign" + <string>n attr "fill" value if SensorOn: "red" else "grey" end file "../Image.svg";
end
group stopsign10:
  alg int n = 10;
  alg bool SensorOn = Bridge.LTL.StopSign10.Sensor.On;
  svgout id "StopSign" + <string>n attr "fill" value if SensorOn: "red" else "grey" end file "../Image.svg";
end
group stopsign11:
  alg int n = 11;
  alg bool SensorOn = Bridge.LTL.StopSign11.Sensor.On;
  svgout id "StopSign" + <string>n attr "fill" value if SensorOn: "red" else "grey" end file "../Image.svg";
end
group stopsign12:
  alg int n = 12;
  alg bool SensorOn = Bridge.LTL.StopSign12.Sensor.On;
  svgout id "StopSign" + <string>n attr "fill" value if SensorOn: "red" else "grey" end file "../Image.svg";
end
group barrier1:
  alg int n = 1;
  alg bool Closed = Bridge.Barriers.B1.Sensor.Closed;
  alg real Degree = Bridge.Barriers.B1.Degree;
  svgout id "Barrier" + <string>n attr "fill-opacity" value if Closed: 100 else 0 end file "../Image.svg";
  svgout id "Barrier" + <string>n attr "stroke-opacity" value if Closed: 100 else 0 end file "../Image.svg";
  svgout id "prog_B" + <string>n attr "width" value scale(Degree, 90, 0, 0.01, 100) file "../Image.svg";
end
group barrier2:
  alg int n = 2;
  alg bool Closed = Bridge.Barriers.B2.Sensor.Closed;
  alg real Degree = Bridge.Barriers.B2.Degree;
  svgout id "Barrier" + <string>n attr "fill-opacity" value if Closed: 100 else 0 end file "../Image.svg";
  svgout id "Barrier" + <string>n attr "stroke-opacity" value if Closed: 100 else 0 end file "../Image.svg";
  svgout id "prog_B" + <string>n attr "width" value scale(Degree, 90, 0, 0.01, 100) file "../Image.svg";
end
group barrier3:
  alg int n = 3;
  alg bool Closed = Bridge.Barriers.B3.Sensor.Closed;
  alg real Degree = Bridge.Barriers.B3.Degree;
  svgout id "Barrier" + <string>n attr "fill-opacity" value if Closed: 100 else 0 end file "../Image.svg";
  svgout id "Barrier" + <string>n attr "stroke-opacity" value if Closed: 100 else 0 end file "../Image.svg";
  svgout id "prog_B" + <string>n attr "width" value scale(Degree, 90, 0, 0.01, 100) file "../Image.svg";
end
group barrier4:
  alg int n = 4;
  alg bool Closed = Bridge.Barriers.B4.Sensor.Closed;
  alg real Degree = Bridge.Barriers.B4.Degree;
  svgout id "Barrier" + <string>n attr "fill-opacity" value if Closed: 100 else 0 end file "../Image.svg";
  svgout id "Barrier" + <string>n attr "stroke-opacity" value if Closed: 100 else 0 end file "../Image.svg";
  svgout id "prog_B" + <string>n attr "width" value scale(Degree, 90, 0, 0.01, 100) file "../Image.svg";
end
group barrier5:
  alg int n = 5;
  alg bool Closed = Bridge.Barriers.B5.Sensor.Closed;
  alg real Degree = Bridge.Barriers.B5.Degree;
  svgout id "Barrier" + <string>n attr "fill-opacity" value if Closed: 100 else 0 end file "../Image.svg";
  svgout id "Barrier" + <string>n attr "stroke-opacity" value if Closed: 100 else 0 end file "../Image.svg";
  svgout id "prog_B" + <string>n attr "width" value scale(Degree, 90, 0, 0.01, 100) file "../Image.svg";
end
group barrier6:
  alg int n = 6;
  alg bool Closed = Bridge.Barriers.B6.Sensor.Closed;
  alg real Degree = Bridge.Barriers.B6.Degree;
  svgout id "Barrier" + <string>n attr "fill-opacity" value if Closed: 100 else 0 end file "../Image.svg";
  svgout id "Barrier" + <string>n attr "stroke-opacity" value if Closed: 100 else 0 end file "../Image.svg";
  svgout id "prog_B" + <string>n attr "width" value scale(Degree, 90, 0, 0.01, 100) file "../Image.svg";
end
group barrier7:
  alg int n = 7;
  alg bool Closed = Bridge.Barriers.B7.Sensor.Closed;
  alg real Degree = Bridge.Barriers.B7.Degree;
  svgout id "Barrier" + <string>n attr "fill-opacity" value if Closed: 100 else 0 end file "../Image.svg";
  svgout id "Barrier" + <string>n attr "stroke-opacity" value if Closed: 100 else 0 end file "../Image.svg";
  svgout id "prog_B" + <string>n attr "width" value scale(Degree, 90, 0, 0.01, 100) file "../Image.svg";
end
group barrier8:
  alg int n = 8;
  alg bool Closed = Bridge.Barriers.B8.Sensor.Closed;
  alg real Degree = Bridge.Barriers.B8.Degree;
  svgout id "Barrier" + <string>n attr "fill-opacity" value if Closed: 100 else 0 end file "../Image.svg";
  svgout id "Barrier" + <string>n attr "stroke-opacity" value if Closed: 100 else 0 end file "../Image.svg";
  svgout id "prog_B" + <string>n attr "width" value scale(Degree, 90, 0, 0.01, 100) file "../Image.svg";
end
group Button_234:
  alg int n = 2;
  svgin id "Button" + <string>n event Bridge.UI.Barrier36.u_close file "../Image.svg";
  svgin id "Button" + <string>(n + 1) event Bridge.UI.Barrier36.u_open file "../Image.svg";
  svgin id "Button" + <string>(n + 2) event Bridge.UI.Barrier36.u_stop file "../Image.svg";
  svgout id "Button" + <string>n + "V" attr "fill" value if Bridge.UI.Barrier36.Close: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 1) + "V" attr "fill" value if Bridge.UI.Barrier36.Open: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 2) + "V" attr "fill" value if Bridge.UI.Barrier36.Stop: "yellowgreen" else "indianred" end file "../Image.svg";
end
group Button_567:
  alg int n = 5;
  svgin id "Button" + <string>n event Bridge.UI.Barrier27.u_close file "../Image.svg";
  svgin id "Button" + <string>(n + 1) event Bridge.UI.Barrier27.u_open file "../Image.svg";
  svgin id "Button" + <string>(n + 2) event Bridge.UI.Barrier27.u_stop file "../Image.svg";
  svgout id "Button" + <string>n + "V" attr "fill" value if Bridge.UI.Barrier27.Close: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 1) + "V" attr "fill" value if Bridge.UI.Barrier27.Open: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 2) + "V" attr "fill" value if Bridge.UI.Barrier27.Stop: "yellowgreen" else "indianred" end file "../Image.svg";
end
group Button_8910:
  alg int n = 8;
  svgin id "Button" + <string>n event Bridge.UI.Barrier1.u_close file "../Image.svg";
  svgin id "Button" + <string>(n + 1) event Bridge.UI.Barrier1.u_open file "../Image.svg";
  svgin id "Button" + <string>(n + 2) event Bridge.UI.Barrier1.u_stop file "../Image.svg";
  svgout id "Button" + <string>n + "V" attr "fill" value if Bridge.UI.Barrier1.Close: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 1) + "V" attr "fill" value if Bridge.UI.Barrier1.Open: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 2) + "V" attr "fill" value if Bridge.UI.Barrier1.Stop: "yellowgreen" else "indianred" end file "../Image.svg";
end
group Button_111213:
  alg int n = 11;
  svgin id "Button" + <string>n event Bridge.UI.Barrier5.u_close file "../Image.svg";
  svgin id "Button" + <string>(n + 1) event Bridge.UI.Barrier5.u_open file "../Image.svg";
  svgin id "Button" + <string>(n + 2) event Bridge.UI.Barrier5.u_stop file "../Image.svg";
  svgout id "Button" + <string>n + "V" attr "fill" value if Bridge.UI.Barrier5.Close: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 1) + "V" attr "fill" value if Bridge.UI.Barrier5.Open: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 2) + "V" attr "fill" value if Bridge.UI.Barrier5.Stop: "yellowgreen" else "indianred" end file "../Image.svg";
end
group Button_141516:
  alg int n = 14;
  svgin id "Button" + <string>n event Bridge.UI.Barrier48.u_close file "../Image.svg";
  svgin id "Button" + <string>(n + 1) event Bridge.UI.Barrier48.u_open file "../Image.svg";
  svgin id "Button" + <string>(n + 2) event Bridge.UI.Barrier48.u_stop file "../Image.svg";
  svgout id "Button" + <string>n + "V" attr "fill" value if Bridge.UI.Barrier48.Close: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 1) + "V" attr "fill" value if Bridge.UI.Barrier48.Open: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 2) + "V" attr "fill" value if Bridge.UI.Barrier48.Stop: "yellowgreen" else "indianred" end file "../Image.svg";
end
group Button_171819:
  alg int n = 17;
  svgin id "Button" + <string>n event Bridge.UI.Deck.u_close file "../Image.svg";
  svgin id "Button" + <string>(n + 1) event Bridge.UI.Deck.u_open file "../Image.svg";
  svgin id "Button" + <string>(n + 2) event Bridge.UI.Deck.u_stop file "../Image.svg";
  svgout id "Button" + <string>n + "V" attr "fill" value if Bridge.UI.Deck.Close: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 1) + "V" attr "fill" value if Bridge.UI.Deck.Open: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button" + <string>(n + 2) + "V" attr "fill" value if Bridge.UI.Deck.Stop: "yellowgreen" else "indianred" end file "../Image.svg";
end
group LTLButtonV:
  svgin id "Button1a" event Bridge.UI.LTLButton.u_activate file "../Image.svg";
  svgin id "Button1b" event Bridge.UI.LTLButton.u_stop file "../Image.svg";
  svgin id "Button1c" event Bridge.UI.LTLButton.u_deactivate file "../Image.svg";
  svgout id "Button1aV" attr "fill" value if Bridge.UI.LTLButton.Activated: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button1bV" attr "fill" value if Bridge.UI.LTLButton.Stopped: "yellowgreen" else "indianred" end file "../Image.svg";
  svgout id "Button1cV" attr "fill" value if Bridge.UI.LTLButton.Deactivated: "yellowgreen" else "indianred" end file "../Image.svg";
end
group CloseRequestV:
  svgin id "RequestClose" event if Bridge.CloseRequest.Off: Bridge.CloseRequest.u_on else Bridge.CloseRequest.u_off end file "../Image.svg";
  svgout id "RequestClose" attr "fill" value if Bridge.CloseRequest.On: "yellowgreen" else "indianred" end file "../Image.svg";
end
svgout id "water_chamber" attr "fill" value if Lock.Water.H_Chamber >= 10: "#000080" elif Lock.Water.H_Chamber <= 2.0: "#9ecaff" else "#0000ff" end file "../Image.svg";
svgout id "prog_Deck" attr "width" value scale(Bridge.Deck.Degree, 0, 90, 0.01, 100) file "../Image.svg";
svgout id "SoundSignal" attr "visibility" value if Bridge.Barriers.LTSoundSignals.On: "visible" else "hidden" end file "../Image.svg";
svgout id "Deck" attr "visibility" value if Bridge.Deck.Sensor.Open: "hidden" else "visible" end file "../Image.svg";
